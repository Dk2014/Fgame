// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lineup.proto

package cross

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SILineupAttend struct {
	CrossType        *int32 `protobuf:"varint,1,req,name=crossType" json:"crossType,omitempty"`
	SceneId          *int64 `protobuf:"varint,2,req,name=sceneId" json:"sceneId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SILineupAttend) Reset()                    { *m = SILineupAttend{} }
func (m *SILineupAttend) String() string            { return proto.CompactTextString(m) }
func (*SILineupAttend) ProtoMessage()               {}
func (*SILineupAttend) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{0} }

func (m *SILineupAttend) GetCrossType() int32 {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return 0
}

func (m *SILineupAttend) GetSceneId() int64 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

type ISLineupAttend struct {
	BeforeNum        *int32 `protobuf:"varint,1,req,name=beforeNum" json:"beforeNum,omitempty"`
	CrossType        *int32 `protobuf:"varint,2,req,name=crossType" json:"crossType,omitempty"`
	SceneId          *int64 `protobuf:"varint,3,req,name=sceneId" json:"sceneId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISLineupAttend) Reset()                    { *m = ISLineupAttend{} }
func (m *ISLineupAttend) String() string            { return proto.CompactTextString(m) }
func (*ISLineupAttend) ProtoMessage()               {}
func (*ISLineupAttend) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{1} }

func (m *ISLineupAttend) GetBeforeNum() int32 {
	if m != nil && m.BeforeNum != nil {
		return *m.BeforeNum
	}
	return 0
}

func (m *ISLineupAttend) GetCrossType() int32 {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return 0
}

func (m *ISLineupAttend) GetSceneId() int64 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

type SILineupCancle struct {
	CrossType        *int32 `protobuf:"varint,1,req,name=crossType" json:"crossType,omitempty"`
	SceneId          *int64 `protobuf:"varint,2,req,name=sceneId" json:"sceneId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SILineupCancle) Reset()                    { *m = SILineupCancle{} }
func (m *SILineupCancle) String() string            { return proto.CompactTextString(m) }
func (*SILineupCancle) ProtoMessage()               {}
func (*SILineupCancle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{2} }

func (m *SILineupCancle) GetCrossType() int32 {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return 0
}

func (m *SILineupCancle) GetSceneId() int64 {
	if m != nil && m.SceneId != nil {
		return *m.SceneId
	}
	return 0
}

type ISLineupCancle struct {
	CrossType        *int32 `protobuf:"varint,1,req,name=crossType" json:"crossType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISLineupCancle) Reset()                    { *m = ISLineupCancle{} }
func (m *ISLineupCancle) String() string            { return proto.CompactTextString(m) }
func (*ISLineupCancle) ProtoMessage()               {}
func (*ISLineupCancle) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{3} }

func (m *ISLineupCancle) GetCrossType() int32 {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return 0
}

type ISLineupSuccess struct {
	CrossType        *int32 `protobuf:"varint,1,req,name=crossType" json:"crossType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISLineupSuccess) Reset()                    { *m = ISLineupSuccess{} }
func (m *ISLineupSuccess) String() string            { return proto.CompactTextString(m) }
func (*ISLineupSuccess) ProtoMessage()               {}
func (*ISLineupSuccess) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{4} }

func (m *ISLineupSuccess) GetCrossType() int32 {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return 0
}

type SILineupSuccess struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SILineupSuccess) Reset()                    { *m = SILineupSuccess{} }
func (m *SILineupSuccess) String() string            { return proto.CompactTextString(m) }
func (*SILineupSuccess) ProtoMessage()               {}
func (*SILineupSuccess) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{5} }

type ISLineupSceneFinishToCancel struct {
	CrossType        *int32 `protobuf:"varint,1,req,name=crossType" json:"crossType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISLineupSceneFinishToCancel) Reset()                    { *m = ISLineupSceneFinishToCancel{} }
func (m *ISLineupSceneFinishToCancel) String() string            { return proto.CompactTextString(m) }
func (*ISLineupSceneFinishToCancel) ProtoMessage()               {}
func (*ISLineupSceneFinishToCancel) Descriptor() ([]byte, []int) { return fileDescriptor15, []int{6} }

func (m *ISLineupSceneFinishToCancel) GetCrossType() int32 {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return 0
}

func init() {
	proto.RegisterType((*SILineupAttend)(nil), "cross.SILineupAttend")
	proto.RegisterType((*ISLineupAttend)(nil), "cross.ISLineupAttend")
	proto.RegisterType((*SILineupCancle)(nil), "cross.SILineupCancle")
	proto.RegisterType((*ISLineupCancle)(nil), "cross.ISLineupCancle")
	proto.RegisterType((*ISLineupSuccess)(nil), "cross.ISLineupSuccess")
	proto.RegisterType((*SILineupSuccess)(nil), "cross.SILineupSuccess")
	proto.RegisterType((*ISLineupSceneFinishToCancel)(nil), "cross.ISLineupSceneFinishToCancel")
}

func init() { proto.RegisterFile("lineup.proto", fileDescriptor15) }

var fileDescriptor15 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xc9, 0xcc, 0x4b,
	0x2d, 0x2d, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2e, 0xca, 0x2f, 0x2e, 0x56,
	0x32, 0xe1, 0xe2, 0x0b, 0xf6, 0xf4, 0x01, 0x4b, 0x38, 0x96, 0x94, 0xa4, 0xe6, 0xa5, 0x08, 0x09,
	0x72, 0x71, 0x82, 0xa5, 0x42, 0x2a, 0x0b, 0x52, 0x25, 0x18, 0x15, 0x98, 0x34, 0x58, 0x85, 0xf8,
	0xb9, 0xd8, 0x8b, 0x93, 0x53, 0xf3, 0x52, 0x3d, 0x53, 0x24, 0x98, 0x14, 0x98, 0x34, 0x98, 0x95,
	0xdc, 0xb9, 0xf8, 0x3c, 0x83, 0xd1, 0x75, 0x25, 0xa5, 0xa6, 0xe5, 0x17, 0xa5, 0xfa, 0x95, 0xe6,
	0x42, 0x75, 0xa1, 0x18, 0xc4, 0x84, 0x6e, 0x10, 0x33, 0xd8, 0x20, 0x24, 0xeb, 0x9d, 0x13, 0xf3,
	0x92, 0x73, 0x52, 0x89, 0xb2, 0x5e, 0x19, 0x61, 0x3d, 0x4e, 0x5d, 0x4a, 0x2a, 0x5c, 0xfc, 0x30,
	0x45, 0xc1, 0xa5, 0xc9, 0xc9, 0xa9, 0xc5, 0xc5, 0xd8, 0x54, 0x09, 0x72, 0xf1, 0xc3, 0x1c, 0x00,
	0x55, 0xa5, 0x64, 0xc0, 0x25, 0x0d, 0xd7, 0x08, 0xb2, 0xd6, 0x2d, 0x33, 0x2f, 0xb3, 0x38, 0x23,
	0x24, 0x1f, 0x64, 0x55, 0x6a, 0x0e, 0x16, 0x43, 0x00, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xae,
	0x28, 0xee, 0x5a, 0x01, 0x00, 0x00,
}
