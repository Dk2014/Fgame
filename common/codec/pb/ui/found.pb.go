// Code generated by protoc-gen-go. DO NOT EDIT.
// source: found.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FoundBriefInfo struct {
	ResId            *int32 `protobuf:"varint,1,req,name=resId" json:"resId,omitempty"`
	Num              *int32 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`
	IsReceive        *int32 `protobuf:"varint,3,req,name=isReceive" json:"isReceive,omitempty"`
	Group            *int32 `protobuf:"varint,4,req,name=group" json:"group,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FoundBriefInfo) Reset()                    { *m = FoundBriefInfo{} }
func (m *FoundBriefInfo) String() string            { return proto.CompactTextString(m) }
func (*FoundBriefInfo) ProtoMessage()               {}
func (*FoundBriefInfo) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{0} }

func (m *FoundBriefInfo) GetResId() int32 {
	if m != nil && m.ResId != nil {
		return *m.ResId
	}
	return 0
}

func (m *FoundBriefInfo) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *FoundBriefInfo) GetIsReceive() int32 {
	if m != nil && m.IsReceive != nil {
		return *m.IsReceive
	}
	return 0
}

func (m *FoundBriefInfo) GetGroup() int32 {
	if m != nil && m.Group != nil {
		return *m.Group
	}
	return 0
}

type CSFoundResouceList struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSFoundResouceList) Reset()                    { *m = CSFoundResouceList{} }
func (m *CSFoundResouceList) String() string            { return proto.CompactTextString(m) }
func (*CSFoundResouceList) ProtoMessage()               {}
func (*CSFoundResouceList) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{1} }

type SCFoundResouceList struct {
	FoundList        []*FoundBriefInfo `protobuf:"bytes,1,rep,name=foundList" json:"foundList,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SCFoundResouceList) Reset()                    { *m = SCFoundResouceList{} }
func (m *SCFoundResouceList) String() string            { return proto.CompactTextString(m) }
func (*SCFoundResouceList) ProtoMessage()               {}
func (*SCFoundResouceList) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{2} }

func (m *SCFoundResouceList) GetFoundList() []*FoundBriefInfo {
	if m != nil {
		return m.FoundList
	}
	return nil
}

type CSFound struct {
	ResType          *int32 `protobuf:"varint,1,req,name=resType" json:"resType,omitempty"`
	Typ              *int32 `protobuf:"varint,2,req,name=typ" json:"typ,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSFound) Reset()                    { *m = CSFound{} }
func (m *CSFound) String() string            { return proto.CompactTextString(m) }
func (*CSFound) ProtoMessage()               {}
func (*CSFound) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{3} }

func (m *CSFound) GetResType() int32 {
	if m != nil && m.ResType != nil {
		return *m.ResType
	}
	return 0
}

func (m *CSFound) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

type SCFound struct {
	ResType          *int32      `protobuf:"varint,1,req,name=resType" json:"resType,omitempty"`
	DropInfoList     []*DropInfo `protobuf:"bytes,2,rep,name=dropInfoList" json:"dropInfoList,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SCFound) Reset()                    { *m = SCFound{} }
func (m *SCFound) String() string            { return proto.CompactTextString(m) }
func (*SCFound) ProtoMessage()               {}
func (*SCFound) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{4} }

func (m *SCFound) GetResType() int32 {
	if m != nil && m.ResType != nil {
		return *m.ResType
	}
	return 0
}

func (m *SCFound) GetDropInfoList() []*DropInfo {
	if m != nil {
		return m.DropInfoList
	}
	return nil
}

type CSFoundBatch struct {
	Typ              *int32 `protobuf:"varint,1,req,name=typ" json:"typ,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSFoundBatch) Reset()                    { *m = CSFoundBatch{} }
func (m *CSFoundBatch) String() string            { return proto.CompactTextString(m) }
func (*CSFoundBatch) ProtoMessage()               {}
func (*CSFoundBatch) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{5} }

func (m *CSFoundBatch) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

type SCFoundBatch struct {
	DropInfoList     []*DropInfo `protobuf:"bytes,2,rep,name=dropInfoList" json:"dropInfoList,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SCFoundBatch) Reset()                    { *m = SCFoundBatch{} }
func (m *SCFoundBatch) String() string            { return proto.CompactTextString(m) }
func (*SCFoundBatch) ProtoMessage()               {}
func (*SCFoundBatch) Descriptor() ([]byte, []int) { return fileDescriptor37, []int{6} }

func (m *SCFoundBatch) GetDropInfoList() []*DropInfo {
	if m != nil {
		return m.DropInfoList
	}
	return nil
}

func init() {
	proto.RegisterType((*FoundBriefInfo)(nil), "ui.FoundBriefInfo")
	proto.RegisterType((*CSFoundResouceList)(nil), "ui.CSFoundResouceList")
	proto.RegisterType((*SCFoundResouceList)(nil), "ui.SCFoundResouceList")
	proto.RegisterType((*CSFound)(nil), "ui.CSFound")
	proto.RegisterType((*SCFound)(nil), "ui.SCFound")
	proto.RegisterType((*CSFoundBatch)(nil), "ui.CSFoundBatch")
	proto.RegisterType((*SCFoundBatch)(nil), "ui.SCFoundBatch")
}

func init() { proto.RegisterFile("found.proto", fileDescriptor37) }

var fileDescriptor37 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xc1, 0x4b, 0xc3, 0x30,
	0x18, 0xc5, 0x59, 0x6b, 0x29, 0x7b, 0xed, 0x14, 0x83, 0x87, 0xa0, 0x97, 0xf1, 0x81, 0xb8, 0x53,
	0x0f, 0xbb, 0x0a, 0x1e, 0x36, 0x11, 0x06, 0xe2, 0x61, 0xf3, 0x1f, 0x90, 0xf6, 0xab, 0xe6, 0x60,
	0x13, 0x92, 0x46, 0xd8, 0x7f, 0x2f, 0x49, 0x23, 0xa2, 0x5e, 0x3c, 0xbe, 0xf7, 0x85, 0xdf, 0xef,
	0x05, 0x55, 0xaf, 0xfd, 0xd0, 0x35, 0xc6, 0xea, 0x51, 0x8b, 0xcc, 0xab, 0x4b, 0x74, 0x56, 0x9b,
	0x29, 0xd3, 0x13, 0x4e, 0x1f, 0xc2, 0x79, 0x63, 0x15, 0xf7, 0xbb, 0xa1, 0xd7, 0x62, 0x81, 0xc2,
	0xb2, 0xdb, 0x75, 0x72, 0xb6, 0xcc, 0x56, 0x85, 0xa8, 0x90, 0x0f, 0xfe, 0x5d, 0x66, 0x31, 0x9c,
	0x63, 0xae, 0xdc, 0x9e, 0x5b, 0x56, 0x1f, 0x2c, 0xf3, 0x58, 0x2d, 0x50, 0xbc, 0x5a, 0xed, 0x8d,
	0x3c, 0x09, 0x91, 0x2e, 0x20, 0xb6, 0x87, 0x48, 0xdc, 0xb3, 0xd3, 0xbe, 0xe5, 0x47, 0xe5, 0x46,
	0xba, 0x85, 0x38, 0x6c, 0x7f, 0xb7, 0xe2, 0x1a, 0xf3, 0x38, 0x2d, 0x04, 0x39, 0x5b, 0xe6, 0xab,
	0x6a, 0x2d, 0x1a, 0xaf, 0x9a, 0x9f, 0x83, 0xe8, 0x06, 0x65, 0x42, 0x8a, 0x33, 0x94, 0x96, 0xdd,
	0xf3, 0xd1, 0xf0, 0xf7, 0xba, 0xf1, 0x68, 0xa6, 0x75, 0x74, 0x87, 0x32, 0x59, 0xfe, 0x3e, 0x24,
	0xd4, 0xe1, 0xd7, 0x01, 0x18, 0x75, 0x59, 0xd4, 0xd5, 0x41, 0x77, 0x9f, 0x7a, 0xba, 0x42, 0x9d,
	0x44, 0x9b, 0x97, 0xb1, 0x7d, 0xfb, 0x82, 0x47, 0x00, 0xad, 0x51, 0x27, 0xf8, 0x74, 0xfc, 0x07,
	0xf0, 0x33, 0x00, 0x00, 0xff, 0xff, 0x66, 0x07, 0xf2, 0xde, 0x7a, 0x01, 0x00, 0x00,
}
