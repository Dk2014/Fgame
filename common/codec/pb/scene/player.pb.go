// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

package scene

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ScenePlayerData struct {
	Uid              *int64               `protobuf:"varint,1,req,name=uid" json:"uid,omitempty"`
	Job              *int32               `protobuf:"varint,2,req,name=job" json:"job,omitempty"`
	Sex              *int32               `protobuf:"varint,3,req,name=sex" json:"sex,omitempty"`
	Name             *string              `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	Pos              *Position            `protobuf:"bytes,5,req,name=pos" json:"pos,omitempty"`
	Angle            *float32             `protobuf:"fixed32,6,req,name=angle" json:"angle,omitempty"`
	PlayerShowData   *ScenePlayerShowData `protobuf:"bytes,7,req,name=playerShowData" json:"playerShowData,omitempty"`
	Level            *int32               `protobuf:"varint,8,req,name=level" json:"level,omitempty"`
	BuffList         []*ObjectBuffData    `protobuf:"bytes,9,rep,name=buffList" json:"buffList,omitempty"`
	OwnerId          *int64               `protobuf:"varint,10,req,name=ownerId" json:"ownerId,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *ScenePlayerData) Reset()                    { *m = ScenePlayerData{} }
func (m *ScenePlayerData) String() string            { return proto.CompactTextString(m) }
func (*ScenePlayerData) ProtoMessage()               {}
func (*ScenePlayerData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *ScenePlayerData) GetUid() int64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *ScenePlayerData) GetJob() int32 {
	if m != nil && m.Job != nil {
		return *m.Job
	}
	return 0
}

func (m *ScenePlayerData) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *ScenePlayerData) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ScenePlayerData) GetPos() *Position {
	if m != nil {
		return m.Pos
	}
	return nil
}

func (m *ScenePlayerData) GetAngle() float32 {
	if m != nil && m.Angle != nil {
		return *m.Angle
	}
	return 0
}

func (m *ScenePlayerData) GetPlayerShowData() *ScenePlayerShowData {
	if m != nil {
		return m.PlayerShowData
	}
	return nil
}

func (m *ScenePlayerData) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *ScenePlayerData) GetBuffList() []*ObjectBuffData {
	if m != nil {
		return m.BuffList
	}
	return nil
}

func (m *ScenePlayerData) GetOwnerId() int64 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

type ScenePlayerShowData struct {
	Uid              *int64  `protobuf:"varint,1,req,name=uid" json:"uid,omitempty"`
	LingTong         *int32  `protobuf:"varint,2,req,name=lingTong" json:"lingTong,omitempty"`
	Hp               *int64  `protobuf:"varint,3,opt,name=hp" json:"hp,omitempty"`
	HpMax            *int64  `protobuf:"varint,4,opt,name=hpMax" json:"hpMax,omitempty"`
	TitleId          *int32  `protobuf:"varint,5,opt,name=titleId" json:"titleId,omitempty"`
	WeaponId         *int32  `protobuf:"varint,6,opt,name=weaponId" json:"weaponId,omitempty"`
	ClothesId        *int32  `protobuf:"varint,7,opt,name=clothesId" json:"clothesId,omitempty"`
	RideId           *int32  `protobuf:"varint,8,opt,name=rideId" json:"rideId,omitempty"`
	WingId           *int32  `protobuf:"varint,9,opt,name=wingId" json:"wingId,omitempty"`
	RideLevel        *int32  `protobuf:"varint,10,opt,name=rideLevel" json:"rideLevel,omitempty"`
	BangPaiName      *string `protobuf:"bytes,11,opt,name=bangPaiName" json:"bangPaiName,omitempty"`
	PkState          *int32  `protobuf:"varint,12,opt,name=pkState" json:"pkState,omitempty"`
	PkValue          *int32  `protobuf:"varint,13,opt,name=pkValue" json:"pkValue,omitempty"`
	Speed            *int32  `protobuf:"varint,14,opt,name=speed" json:"speed,omitempty"`
	Camp             *int32  `protobuf:"varint,15,opt,name=camp" json:"camp,omitempty"`
	TeamName         *string `protobuf:"bytes,16,opt,name=teamName" json:"teamName,omitempty"`
	ShenFaId         *int32  `protobuf:"varint,17,opt,name=shenFaId" json:"shenFaId,omitempty"`
	LingYuId         *int32  `protobuf:"varint,18,opt,name=lingYuId" json:"lingYuId,omitempty"`
	FourGodKey       *int32  `protobuf:"varint,19,opt,name=fourGodKey" json:"fourGodKey,omitempty"`
	WeaponWaken      *bool   `protobuf:"varint,20,opt,name=weaponWaken" json:"weaponWaken,omitempty"`
	Realm            *int32  `protobuf:"varint,21,opt,name=realm" json:"realm,omitempty"`
	SpouseName       *string `protobuf:"bytes,22,opt,name=spouseName" json:"spouseName,omitempty"`
	WeddingStatus    *int32  `protobuf:"varint,23,opt,name=weddingStatus" json:"weddingStatus,omitempty"`
	ModelId          *int32  `protobuf:"varint,24,opt,name=modelId" json:"modelId,omitempty"`
	Vip              *int32  `protobuf:"varint,25,opt,name=vip" json:"vip,omitempty"`
	RingType         *int32  `protobuf:"varint,26,opt,name=ringType" json:"ringType,omitempty"`
	FaBaoId          *int32  `protobuf:"varint,27,opt,name=faBaoId" json:"faBaoId,omitempty"`
	PetId            *int32  `protobuf:"varint,28,opt,name=petId" json:"petId,omitempty"`
	XianTiId         *int32  `protobuf:"varint,29,opt,name=xianTiId" json:"xianTiId,omitempty"`
	FlyPetId         *int32  `protobuf:"varint,30,opt,name=flyPetId" json:"flyPetId,omitempty"`
	ShenYuKey        *int32  `protobuf:"varint,31,opt,name=shenYuKey" json:"shenYuKey,omitempty"`
	IsModel          *bool   `protobuf:"varint,32,opt,name=isModel" json:"isModel,omitempty"`
	IsRobot          *bool   `protobuf:"varint,33,opt,name=isRobot" json:"isRobot,omitempty"`
	JieYiName        *string `protobuf:"bytes,34,opt,name=jieYiName" json:"jieYiName,omitempty"`
	ZhenYing         *int32  `protobuf:"varint,35,opt,name=zhenYing" json:"zhenYing,omitempty"`
	GuanZhi          *int32  `protobuf:"varint,36,opt,name=guanZhi" json:"guanZhi,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ScenePlayerShowData) Reset()                    { *m = ScenePlayerShowData{} }
func (m *ScenePlayerShowData) String() string            { return proto.CompactTextString(m) }
func (*ScenePlayerShowData) ProtoMessage()               {}
func (*ScenePlayerShowData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *ScenePlayerShowData) GetUid() int64 {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return 0
}

func (m *ScenePlayerShowData) GetLingTong() int32 {
	if m != nil && m.LingTong != nil {
		return *m.LingTong
	}
	return 0
}

func (m *ScenePlayerShowData) GetHp() int64 {
	if m != nil && m.Hp != nil {
		return *m.Hp
	}
	return 0
}

func (m *ScenePlayerShowData) GetHpMax() int64 {
	if m != nil && m.HpMax != nil {
		return *m.HpMax
	}
	return 0
}

func (m *ScenePlayerShowData) GetTitleId() int32 {
	if m != nil && m.TitleId != nil {
		return *m.TitleId
	}
	return 0
}

func (m *ScenePlayerShowData) GetWeaponId() int32 {
	if m != nil && m.WeaponId != nil {
		return *m.WeaponId
	}
	return 0
}

func (m *ScenePlayerShowData) GetClothesId() int32 {
	if m != nil && m.ClothesId != nil {
		return *m.ClothesId
	}
	return 0
}

func (m *ScenePlayerShowData) GetRideId() int32 {
	if m != nil && m.RideId != nil {
		return *m.RideId
	}
	return 0
}

func (m *ScenePlayerShowData) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *ScenePlayerShowData) GetRideLevel() int32 {
	if m != nil && m.RideLevel != nil {
		return *m.RideLevel
	}
	return 0
}

func (m *ScenePlayerShowData) GetBangPaiName() string {
	if m != nil && m.BangPaiName != nil {
		return *m.BangPaiName
	}
	return ""
}

func (m *ScenePlayerShowData) GetPkState() int32 {
	if m != nil && m.PkState != nil {
		return *m.PkState
	}
	return 0
}

func (m *ScenePlayerShowData) GetPkValue() int32 {
	if m != nil && m.PkValue != nil {
		return *m.PkValue
	}
	return 0
}

func (m *ScenePlayerShowData) GetSpeed() int32 {
	if m != nil && m.Speed != nil {
		return *m.Speed
	}
	return 0
}

func (m *ScenePlayerShowData) GetCamp() int32 {
	if m != nil && m.Camp != nil {
		return *m.Camp
	}
	return 0
}

func (m *ScenePlayerShowData) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *ScenePlayerShowData) GetShenFaId() int32 {
	if m != nil && m.ShenFaId != nil {
		return *m.ShenFaId
	}
	return 0
}

func (m *ScenePlayerShowData) GetLingYuId() int32 {
	if m != nil && m.LingYuId != nil {
		return *m.LingYuId
	}
	return 0
}

func (m *ScenePlayerShowData) GetFourGodKey() int32 {
	if m != nil && m.FourGodKey != nil {
		return *m.FourGodKey
	}
	return 0
}

func (m *ScenePlayerShowData) GetWeaponWaken() bool {
	if m != nil && m.WeaponWaken != nil {
		return *m.WeaponWaken
	}
	return false
}

func (m *ScenePlayerShowData) GetRealm() int32 {
	if m != nil && m.Realm != nil {
		return *m.Realm
	}
	return 0
}

func (m *ScenePlayerShowData) GetSpouseName() string {
	if m != nil && m.SpouseName != nil {
		return *m.SpouseName
	}
	return ""
}

func (m *ScenePlayerShowData) GetWeddingStatus() int32 {
	if m != nil && m.WeddingStatus != nil {
		return *m.WeddingStatus
	}
	return 0
}

func (m *ScenePlayerShowData) GetModelId() int32 {
	if m != nil && m.ModelId != nil {
		return *m.ModelId
	}
	return 0
}

func (m *ScenePlayerShowData) GetVip() int32 {
	if m != nil && m.Vip != nil {
		return *m.Vip
	}
	return 0
}

func (m *ScenePlayerShowData) GetRingType() int32 {
	if m != nil && m.RingType != nil {
		return *m.RingType
	}
	return 0
}

func (m *ScenePlayerShowData) GetFaBaoId() int32 {
	if m != nil && m.FaBaoId != nil {
		return *m.FaBaoId
	}
	return 0
}

func (m *ScenePlayerShowData) GetPetId() int32 {
	if m != nil && m.PetId != nil {
		return *m.PetId
	}
	return 0
}

func (m *ScenePlayerShowData) GetXianTiId() int32 {
	if m != nil && m.XianTiId != nil {
		return *m.XianTiId
	}
	return 0
}

func (m *ScenePlayerShowData) GetFlyPetId() int32 {
	if m != nil && m.FlyPetId != nil {
		return *m.FlyPetId
	}
	return 0
}

func (m *ScenePlayerShowData) GetShenYuKey() int32 {
	if m != nil && m.ShenYuKey != nil {
		return *m.ShenYuKey
	}
	return 0
}

func (m *ScenePlayerShowData) GetIsModel() bool {
	if m != nil && m.IsModel != nil {
		return *m.IsModel
	}
	return false
}

func (m *ScenePlayerShowData) GetIsRobot() bool {
	if m != nil && m.IsRobot != nil {
		return *m.IsRobot
	}
	return false
}

func (m *ScenePlayerShowData) GetJieYiName() string {
	if m != nil && m.JieYiName != nil {
		return *m.JieYiName
	}
	return ""
}

func (m *ScenePlayerShowData) GetZhenYing() int32 {
	if m != nil && m.ZhenYing != nil {
		return *m.ZhenYing
	}
	return 0
}

func (m *ScenePlayerShowData) GetGuanZhi() int32 {
	if m != nil && m.GuanZhi != nil {
		return *m.GuanZhi
	}
	return 0
}

func init() {
	proto.RegisterType((*ScenePlayerData)(nil), "scene.ScenePlayerData")
	proto.RegisterType((*ScenePlayerShowData)(nil), "scene.ScenePlayerShowData")
}

func init() { proto.RegisterFile("player.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xdf, 0x6e, 0xd3, 0x3c,
	0x14, 0x57, 0x93, 0x66, 0x6d, 0x4f, 0xdb, 0x75, 0xcb, 0xbe, 0x7d, 0x1c, 0xca, 0x80, 0x30, 0x90,
	0xc8, 0xd5, 0x2e, 0xf6, 0x08, 0x13, 0x02, 0x45, 0x6c, 0x50, 0xb1, 0x09, 0x34, 0xee, 0xdc, 0xfa,
	0x24, 0xf1, 0x96, 0xd8, 0x56, 0xe2, 0xac, 0x2b, 0xd7, 0x3c, 0x30, 0x8f, 0x80, 0xec, 0xd6, 0x12,
	0x48, 0xdc, 0xe5, 0xfc, 0x72, 0x7e, 0xff, 0x8e, 0x61, 0xa2, 0x2b, 0xb6, 0xa1, 0xe6, 0x4c, 0x37,
	0xca, 0xa8, 0x38, 0x6a, 0x57, 0x24, 0x69, 0x3e, 0x59, 0xa9, 0xba, 0x56, 0x72, 0x0b, 0xce, 0x61,
	0xd9, 0xe5, 0xf9, 0xf6, 0xfb, 0xf4, 0x57, 0x0f, 0x66, 0xd7, 0x76, 0x67, 0xe1, 0x68, 0xef, 0x98,
	0x61, 0xf1, 0x18, 0xc2, 0x4e, 0x70, 0xec, 0x25, 0x41, 0x1a, 0xda, 0xe1, 0x4e, 0x2d, 0x31, 0x48,
	0x82, 0x34, 0xb2, 0x43, 0x4b, 0x8f, 0x18, 0xba, 0x61, 0x02, 0x7d, 0xc9, 0x6a, 0xc2, 0x7e, 0x12,
	0xa4, 0xa3, 0xf8, 0x04, 0x42, 0xad, 0x5a, 0x8c, 0x92, 0x20, 0x1d, 0x9f, 0xcf, 0xce, 0x9c, 0xef,
	0xd9, 0x42, 0xb5, 0xc2, 0x08, 0x25, 0xe3, 0x29, 0x44, 0x4c, 0x16, 0x15, 0xe1, 0x5e, 0x12, 0xa4,
	0x41, 0x7c, 0x0e, 0xfb, 0xdb, 0x98, 0xd7, 0xa5, 0x5a, 0x5b, 0x4f, 0x1c, 0x38, 0xde, 0x7c, 0xc7,
	0xfb, 0x23, 0x91, 0xdf, 0xb0, 0x12, 0x15, 0x3d, 0x50, 0x85, 0x43, 0xe7, 0xfe, 0x16, 0x86, 0xb6,
	0xc6, 0xa5, 0x68, 0x0d, 0x8e, 0x92, 0x30, 0x1d, 0x9f, 0x1f, 0xef, 0xc8, 0x9f, 0x97, 0x77, 0xb4,
	0x32, 0x17, 0x5d, 0x9e, 0x3b, 0xde, 0x0c, 0x06, 0x6a, 0x2d, 0xa9, 0xc9, 0x38, 0x82, 0x6d, 0x74,
	0xfa, 0x33, 0x82, 0xa3, 0x7f, 0x19, 0xfc, 0x55, 0xfb, 0x00, 0x86, 0x95, 0x90, 0xc5, 0x8d, 0x92,
	0xc5, 0xae, 0x3b, 0x40, 0x50, 0x6a, 0x0c, 0x93, 0x5e, 0x1a, 0xda, 0x2c, 0xa5, 0xbe, 0x62, 0x8f,
	0xd8, 0x77, 0xe3, 0x0c, 0x06, 0x46, 0x98, 0x8a, 0x32, 0x8e, 0x51, 0xd2, 0x4b, 0x23, 0xcb, 0x5e,
	0x13, 0xd3, 0x4a, 0x66, 0x1c, 0xf7, 0x1c, 0x72, 0x08, 0xa3, 0x55, 0xa5, 0x4c, 0x49, 0x6d, 0xc6,
	0x71, 0xe0, 0xa0, 0x7d, 0xd8, 0x6b, 0x04, 0xb7, 0xa4, 0xa1, 0x9f, 0xd7, 0x42, 0x16, 0x19, 0xc7,
	0x91, 0xa7, 0xd8, 0xff, 0x97, 0xae, 0x34, 0x38, 0xe8, 0x08, 0xc6, 0x4b, 0x26, 0x8b, 0x05, 0x13,
	0x9f, 0xec, 0xe5, 0xc7, 0x49, 0x2f, 0x1d, 0x59, 0x77, 0x7d, 0x7f, 0x6d, 0x98, 0x21, 0x9c, 0xb8,
	0x2d, 0x07, 0x7c, 0x65, 0x55, 0x47, 0x38, 0x75, 0xc0, 0x14, 0xa2, 0x56, 0x13, 0x71, 0xdc, 0x77,
	0xe3, 0x04, 0xfa, 0x2b, 0x56, 0x6b, 0x9c, 0xf9, 0xac, 0x86, 0x58, 0xed, 0x04, 0x0f, 0x9c, 0xe0,
	0x01, 0x0c, 0xdb, 0x92, 0xe4, 0x7b, 0x96, 0x71, 0x3c, 0xf4, 0x3b, 0xf6, 0x1a, 0xb7, 0x5d, 0xc6,
	0x31, 0x76, 0x48, 0x0c, 0x90, 0xab, 0xae, 0xf9, 0xa0, 0xf8, 0x47, 0xda, 0xe0, 0x91, 0x4f, 0xb7,
	0x6d, 0xfd, 0x8d, 0xdd, 0x93, 0xc4, 0xff, 0x92, 0x5e, 0x3a, 0xb4, 0xde, 0x0d, 0xb1, 0xaa, 0xc6,
	0x63, 0xcf, 0x6b, 0xb5, 0xea, 0x5a, 0x72, 0x7e, 0xff, 0x3b, 0xbf, 0x63, 0x98, 0xae, 0x89, 0x73,
	0x21, 0x0b, 0xdb, 0xa2, 0x6b, 0xf1, 0x89, 0xaf, 0x51, 0x2b, 0x4e, 0x55, 0xc6, 0x11, 0x1d, 0x30,
	0x86, 0xf0, 0x41, 0x68, 0x7c, 0xea, 0x23, 0x35, 0xf6, 0x81, 0x36, 0x9a, 0x70, 0xee, 0xf7, 0x73,
	0x76, 0xc1, 0x54, 0xc6, 0xf1, 0x99, 0xaf, 0xad, 0xc9, 0x64, 0x1c, 0x4f, 0x3c, 0xe3, 0x51, 0x30,
	0x79, 0x23, 0x32, 0x8e, 0xcf, 0x3d, 0x92, 0x57, 0x9b, 0x85, 0xdb, 0x79, 0xe1, 0x6f, 0x6e, 0xab,
	0xdf, 0x76, 0xb6, 0xd5, 0x4b, 0x2f, 0x2b, 0xda, 0x2b, 0x1b, 0x04, 0x13, 0xd7, 0xc8, 0x01, 0x5f,
	0xd4, 0x52, 0x19, 0x7c, 0xe5, 0x80, 0x43, 0x18, 0xdd, 0x09, 0xba, 0xdd, 0xbe, 0xc9, 0xa9, 0x3f,
	0xe1, 0x0f, 0xab, 0x23, 0x64, 0x81, 0xaf, 0xbd, 0x4c, 0xd1, 0x31, 0xf9, 0xbd, 0x14, 0xf8, 0xc6,
	0x02, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x09, 0xe6, 0x76, 0xb9, 0xa9, 0x03, 0x00, 0x00,
}
