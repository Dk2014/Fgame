// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wing.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type WingInfo struct {
	AdvancedId       *int32          `protobuf:"varint,1,req,name=advancedId" json:"advancedId,omitempty"`
	WingId           *int32          `protobuf:"varint,2,req,name=wingId" json:"wingId,omitempty"`
	UnrealLevel      *int32          `protobuf:"varint,3,req,name=unrealLevel" json:"unrealLevel,omitempty"`
	UnrealPro        *int32          `protobuf:"varint,4,req,name=unrealPro" json:"unrealPro,omitempty"`
	SkinList         []*WingSkinInfo `protobuf:"bytes,5,rep,name=skinList" json:"skinList,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *WingInfo) Reset()                    { *m = WingInfo{} }
func (m *WingInfo) String() string            { return proto.CompactTextString(m) }
func (*WingInfo) ProtoMessage()               {}
func (*WingInfo) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{0} }

func (m *WingInfo) GetAdvancedId() int32 {
	if m != nil && m.AdvancedId != nil {
		return *m.AdvancedId
	}
	return 0
}

func (m *WingInfo) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *WingInfo) GetUnrealLevel() int32 {
	if m != nil && m.UnrealLevel != nil {
		return *m.UnrealLevel
	}
	return 0
}

func (m *WingInfo) GetUnrealPro() int32 {
	if m != nil && m.UnrealPro != nil {
		return *m.UnrealPro
	}
	return 0
}

func (m *WingInfo) GetSkinList() []*WingSkinInfo {
	if m != nil {
		return m.SkinList
	}
	return nil
}

type FeatherInfo struct {
	FeatherId        *int32 `protobuf:"varint,1,req,name=featherId" json:"featherId,omitempty"`
	Progress         *int32 `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *FeatherInfo) Reset()                    { *m = FeatherInfo{} }
func (m *FeatherInfo) String() string            { return proto.CompactTextString(m) }
func (*FeatherInfo) ProtoMessage()               {}
func (*FeatherInfo) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{1} }

func (m *FeatherInfo) GetFeatherId() int32 {
	if m != nil && m.FeatherId != nil {
		return *m.FeatherId
	}
	return 0
}

func (m *FeatherInfo) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

type WingSkinInfo struct {
	WingId           *int32 `protobuf:"varint,1,req,name=wingId" json:"wingId,omitempty"`
	Level            *int32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	Pro              *int32 `protobuf:"varint,3,req,name=pro" json:"pro,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *WingSkinInfo) Reset()                    { *m = WingSkinInfo{} }
func (m *WingSkinInfo) String() string            { return proto.CompactTextString(m) }
func (*WingSkinInfo) ProtoMessage()               {}
func (*WingSkinInfo) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{2} }

func (m *WingSkinInfo) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *WingSkinInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *WingSkinInfo) GetPro() int32 {
	if m != nil && m.Pro != nil {
		return *m.Pro
	}
	return 0
}

type CSWingGet struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSWingGet) Reset()                    { *m = CSWingGet{} }
func (m *CSWingGet) String() string            { return proto.CompactTextString(m) }
func (*CSWingGet) ProtoMessage()               {}
func (*CSWingGet) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{3} }

type SCWingGet struct {
	AdvancedId       *int32          `protobuf:"varint,1,req,name=advancedId" json:"advancedId,omitempty"`
	WingId           *int32          `protobuf:"varint,2,req,name=wingId" json:"wingId,omitempty"`
	UnrealLevel      *int32          `protobuf:"varint,3,req,name=unrealLevel" json:"unrealLevel,omitempty"`
	UnrealPro        *int32          `protobuf:"varint,4,req,name=unrealPro" json:"unrealPro,omitempty"`
	UnrealList       []int32         `protobuf:"varint,5,rep,name=unrealList" json:"unrealList,omitempty"`
	Bless            *int32          `protobuf:"varint,6,opt,name=bless" json:"bless,omitempty"`
	BlessTime        *int64          `protobuf:"varint,7,opt,name=blessTime" json:"blessTime,omitempty"`
	Hidden           *bool           `protobuf:"varint,8,req,name=hidden" json:"hidden,omitempty"`
	TrialOrderId     *int32          `protobuf:"varint,9,opt,name=trialOrderId,def=0" json:"trialOrderId,omitempty"`
	ActiveTime       *int64          `protobuf:"varint,10,opt,name=activeTime,def=0" json:"activeTime,omitempty"`
	WingSkinList     []*WingSkinInfo `protobuf:"bytes,11,rep,name=wingSkinList" json:"wingSkinList,omitempty"`
	FeatherInfo      *FeatherInfo    `protobuf:"bytes,12,req,name=featherInfo" json:"featherInfo,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SCWingGet) Reset()                    { *m = SCWingGet{} }
func (m *SCWingGet) String() string            { return proto.CompactTextString(m) }
func (*SCWingGet) ProtoMessage()               {}
func (*SCWingGet) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{4} }

const Default_SCWingGet_TrialOrderId int32 = 0
const Default_SCWingGet_ActiveTime int64 = 0

func (m *SCWingGet) GetAdvancedId() int32 {
	if m != nil && m.AdvancedId != nil {
		return *m.AdvancedId
	}
	return 0
}

func (m *SCWingGet) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *SCWingGet) GetUnrealLevel() int32 {
	if m != nil && m.UnrealLevel != nil {
		return *m.UnrealLevel
	}
	return 0
}

func (m *SCWingGet) GetUnrealPro() int32 {
	if m != nil && m.UnrealPro != nil {
		return *m.UnrealPro
	}
	return 0
}

func (m *SCWingGet) GetUnrealList() []int32 {
	if m != nil {
		return m.UnrealList
	}
	return nil
}

func (m *SCWingGet) GetBless() int32 {
	if m != nil && m.Bless != nil {
		return *m.Bless
	}
	return 0
}

func (m *SCWingGet) GetBlessTime() int64 {
	if m != nil && m.BlessTime != nil {
		return *m.BlessTime
	}
	return 0
}

func (m *SCWingGet) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

func (m *SCWingGet) GetTrialOrderId() int32 {
	if m != nil && m.TrialOrderId != nil {
		return *m.TrialOrderId
	}
	return Default_SCWingGet_TrialOrderId
}

func (m *SCWingGet) GetActiveTime() int64 {
	if m != nil && m.ActiveTime != nil {
		return *m.ActiveTime
	}
	return Default_SCWingGet_ActiveTime
}

func (m *SCWingGet) GetWingSkinList() []*WingSkinInfo {
	if m != nil {
		return m.WingSkinList
	}
	return nil
}

func (m *SCWingGet) GetFeatherInfo() *FeatherInfo {
	if m != nil {
		return m.FeatherInfo
	}
	return nil
}

type CSWingUnrealDan struct {
	Num              *int32 `protobuf:"varint,1,req,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSWingUnrealDan) Reset()                    { *m = CSWingUnrealDan{} }
func (m *CSWingUnrealDan) String() string            { return proto.CompactTextString(m) }
func (*CSWingUnrealDan) ProtoMessage()               {}
func (*CSWingUnrealDan) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{5} }

func (m *CSWingUnrealDan) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type SCWingUnrealDan struct {
	Level            *int32 `protobuf:"varint,1,req,name=level" json:"level,omitempty"`
	Progress         *int32 `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingUnrealDan) Reset()                    { *m = SCWingUnrealDan{} }
func (m *SCWingUnrealDan) String() string            { return proto.CompactTextString(m) }
func (*SCWingUnrealDan) ProtoMessage()               {}
func (*SCWingUnrealDan) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{6} }

func (m *SCWingUnrealDan) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *SCWingUnrealDan) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

type CSWingUnreal struct {
	WingId           *int32 `protobuf:"varint,1,req,name=wingId" json:"wingId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSWingUnreal) Reset()                    { *m = CSWingUnreal{} }
func (m *CSWingUnreal) String() string            { return proto.CompactTextString(m) }
func (*CSWingUnreal) ProtoMessage()               {}
func (*CSWingUnreal) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{7} }

func (m *CSWingUnreal) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

type SCWingUnreal struct {
	WingId           *int32 `protobuf:"varint,1,opt,name=wingId" json:"wingId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingUnreal) Reset()                    { *m = SCWingUnreal{} }
func (m *SCWingUnreal) String() string            { return proto.CompactTextString(m) }
func (*SCWingUnreal) ProtoMessage()               {}
func (*SCWingUnreal) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{8} }

func (m *SCWingUnreal) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

type CSWingUnload struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSWingUnload) Reset()                    { *m = CSWingUnload{} }
func (m *CSWingUnload) String() string            { return proto.CompactTextString(m) }
func (*CSWingUnload) ProtoMessage()               {}
func (*CSWingUnload) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{9} }

type SCWingUnload struct {
	WingId           *int32 `protobuf:"varint,1,req,name=wingId" json:"wingId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingUnload) Reset()                    { *m = SCWingUnload{} }
func (m *SCWingUnload) String() string            { return proto.CompactTextString(m) }
func (*SCWingUnload) ProtoMessage()               {}
func (*SCWingUnload) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{10} }

func (m *SCWingUnload) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

type CSWingAdvanced struct {
	AutoFlag         *bool  `protobuf:"varint,1,req,name=autoFlag" json:"autoFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSWingAdvanced) Reset()                    { *m = CSWingAdvanced{} }
func (m *CSWingAdvanced) String() string            { return proto.CompactTextString(m) }
func (*CSWingAdvanced) ProtoMessage()               {}
func (*CSWingAdvanced) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{11} }

func (m *CSWingAdvanced) GetAutoFlag() bool {
	if m != nil && m.AutoFlag != nil {
		return *m.AutoFlag
	}
	return false
}

type SCWingAdvanced struct {
	AdvancedId       *int32 `protobuf:"varint,1,req,name=advancedId" json:"advancedId,omitempty"`
	WingId           *int32 `protobuf:"varint,2,req,name=wingId" json:"wingId,omitempty"`
	Bless            *int32 `protobuf:"varint,3,opt,name=bless" json:"bless,omitempty"`
	BlessTime        *int64 `protobuf:"varint,4,opt,name=blessTime" json:"blessTime,omitempty"`
	AdvancedType     *int32 `protobuf:"varint,5,req,name=advancedType" json:"advancedType,omitempty"`
	IsDouble         *bool  `protobuf:"varint,6,opt,name=isDouble,def=0" json:"isDouble,omitempty"`
	TotalBless       *int32 `protobuf:"varint,7,opt,name=totalBless" json:"totalBless,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingAdvanced) Reset()                    { *m = SCWingAdvanced{} }
func (m *SCWingAdvanced) String() string            { return proto.CompactTextString(m) }
func (*SCWingAdvanced) ProtoMessage()               {}
func (*SCWingAdvanced) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{12} }

const Default_SCWingAdvanced_IsDouble bool = false

func (m *SCWingAdvanced) GetAdvancedId() int32 {
	if m != nil && m.AdvancedId != nil {
		return *m.AdvancedId
	}
	return 0
}

func (m *SCWingAdvanced) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *SCWingAdvanced) GetBless() int32 {
	if m != nil && m.Bless != nil {
		return *m.Bless
	}
	return 0
}

func (m *SCWingAdvanced) GetBlessTime() int64 {
	if m != nil && m.BlessTime != nil {
		return *m.BlessTime
	}
	return 0
}

func (m *SCWingAdvanced) GetAdvancedType() int32 {
	if m != nil && m.AdvancedType != nil {
		return *m.AdvancedType
	}
	return 0
}

func (m *SCWingAdvanced) GetIsDouble() bool {
	if m != nil && m.IsDouble != nil {
		return *m.IsDouble
	}
	return Default_SCWingAdvanced_IsDouble
}

func (m *SCWingAdvanced) GetTotalBless() int32 {
	if m != nil && m.TotalBless != nil {
		return *m.TotalBless
	}
	return 0
}

type CSFeatherGet struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSFeatherGet) Reset()                    { *m = CSFeatherGet{} }
func (m *CSFeatherGet) String() string            { return proto.CompactTextString(m) }
func (*CSFeatherGet) ProtoMessage()               {}
func (*CSFeatherGet) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{13} }

type SCFeatherGet struct {
	FeatherId        *int32 `protobuf:"varint,1,req,name=featherId" json:"featherId,omitempty"`
	Progress         *int32 `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCFeatherGet) Reset()                    { *m = SCFeatherGet{} }
func (m *SCFeatherGet) String() string            { return proto.CompactTextString(m) }
func (*SCFeatherGet) ProtoMessage()               {}
func (*SCFeatherGet) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{14} }

func (m *SCFeatherGet) GetFeatherId() int32 {
	if m != nil && m.FeatherId != nil {
		return *m.FeatherId
	}
	return 0
}

func (m *SCFeatherGet) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

type CSFeatherAdvanced struct {
	AutoFlag         *bool  `protobuf:"varint,1,req,name=autoFlag" json:"autoFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSFeatherAdvanced) Reset()                    { *m = CSFeatherAdvanced{} }
func (m *CSFeatherAdvanced) String() string            { return proto.CompactTextString(m) }
func (*CSFeatherAdvanced) ProtoMessage()               {}
func (*CSFeatherAdvanced) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{15} }

func (m *CSFeatherAdvanced) GetAutoFlag() bool {
	if m != nil && m.AutoFlag != nil {
		return *m.AutoFlag
	}
	return false
}

type SCFeatherAdvanced struct {
	FeatherId        *int32 `protobuf:"varint,1,req,name=featherId" json:"featherId,omitempty"`
	Progress         *int32 `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	AdvancedType     *int32 `protobuf:"varint,3,req,name=advancedType" json:"advancedType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCFeatherAdvanced) Reset()                    { *m = SCFeatherAdvanced{} }
func (m *SCFeatherAdvanced) String() string            { return proto.CompactTextString(m) }
func (*SCFeatherAdvanced) ProtoMessage()               {}
func (*SCFeatherAdvanced) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{16} }

func (m *SCFeatherAdvanced) GetFeatherId() int32 {
	if m != nil && m.FeatherId != nil {
		return *m.FeatherId
	}
	return 0
}

func (m *SCFeatherAdvanced) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

func (m *SCFeatherAdvanced) GetAdvancedType() int32 {
	if m != nil && m.AdvancedType != nil {
		return *m.AdvancedType
	}
	return 0
}

type CSWingHidden struct {
	Hidden           *bool  `protobuf:"varint,1,req,name=hidden" json:"hidden,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSWingHidden) Reset()                    { *m = CSWingHidden{} }
func (m *CSWingHidden) String() string            { return proto.CompactTextString(m) }
func (*CSWingHidden) ProtoMessage()               {}
func (*CSWingHidden) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{17} }

func (m *CSWingHidden) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

type SCWingHidden struct {
	Hidden           *bool  `protobuf:"varint,1,req,name=hidden" json:"hidden,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingHidden) Reset()                    { *m = SCWingHidden{} }
func (m *SCWingHidden) String() string            { return proto.CompactTextString(m) }
func (*SCWingHidden) ProtoMessage()               {}
func (*SCWingHidden) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{18} }

func (m *SCWingHidden) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

type SCWingTrialCard struct {
	TrialWingId      *int32 `protobuf:"varint,1,req,name=trialWingId" json:"trialWingId,omitempty"`
	ActiveTime       *int64 `protobuf:"varint,2,req,name=activeTime" json:"activeTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingTrialCard) Reset()                    { *m = SCWingTrialCard{} }
func (m *SCWingTrialCard) String() string            { return proto.CompactTextString(m) }
func (*SCWingTrialCard) ProtoMessage()               {}
func (*SCWingTrialCard) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{19} }

func (m *SCWingTrialCard) GetTrialWingId() int32 {
	if m != nil && m.TrialWingId != nil {
		return *m.TrialWingId
	}
	return 0
}

func (m *SCWingTrialCard) GetActiveTime() int64 {
	if m != nil && m.ActiveTime != nil {
		return *m.ActiveTime
	}
	return 0
}

type SCWingTrialOverdue struct {
	TrialWingId      *int32 `protobuf:"varint,1,req,name=trialWingId" json:"trialWingId,omitempty"`
	BResult          *bool  `protobuf:"varint,2,req,name=bResult" json:"bResult,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingTrialOverdue) Reset()                    { *m = SCWingTrialOverdue{} }
func (m *SCWingTrialOverdue) String() string            { return proto.CompactTextString(m) }
func (*SCWingTrialOverdue) ProtoMessage()               {}
func (*SCWingTrialOverdue) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{20} }

func (m *SCWingTrialOverdue) GetTrialWingId() int32 {
	if m != nil && m.TrialWingId != nil {
		return *m.TrialWingId
	}
	return 0
}

func (m *SCWingTrialOverdue) GetBResult() bool {
	if m != nil && m.BResult != nil {
		return *m.BResult
	}
	return false
}

type CSWingUpstar struct {
	WingId           *int32 `protobuf:"varint,1,req,name=wingId" json:"wingId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSWingUpstar) Reset()                    { *m = CSWingUpstar{} }
func (m *CSWingUpstar) String() string            { return proto.CompactTextString(m) }
func (*CSWingUpstar) ProtoMessage()               {}
func (*CSWingUpstar) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{21} }

func (m *CSWingUpstar) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

type SCWingUpstar struct {
	WingId           *int32 `protobuf:"varint,1,req,name=wingId" json:"wingId,omitempty"`
	Level            *int32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	UpPro            *int32 `protobuf:"varint,3,req,name=upPro" json:"upPro,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCWingUpstar) Reset()                    { *m = SCWingUpstar{} }
func (m *SCWingUpstar) String() string            { return proto.CompactTextString(m) }
func (*SCWingUpstar) ProtoMessage()               {}
func (*SCWingUpstar) Descriptor() ([]byte, []int) { return fileDescriptor130, []int{22} }

func (m *SCWingUpstar) GetWingId() int32 {
	if m != nil && m.WingId != nil {
		return *m.WingId
	}
	return 0
}

func (m *SCWingUpstar) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *SCWingUpstar) GetUpPro() int32 {
	if m != nil && m.UpPro != nil {
		return *m.UpPro
	}
	return 0
}

func init() {
	proto.RegisterType((*WingInfo)(nil), "ui.WingInfo")
	proto.RegisterType((*FeatherInfo)(nil), "ui.FeatherInfo")
	proto.RegisterType((*WingSkinInfo)(nil), "ui.WingSkinInfo")
	proto.RegisterType((*CSWingGet)(nil), "ui.CSWingGet")
	proto.RegisterType((*SCWingGet)(nil), "ui.SCWingGet")
	proto.RegisterType((*CSWingUnrealDan)(nil), "ui.CSWingUnrealDan")
	proto.RegisterType((*SCWingUnrealDan)(nil), "ui.SCWingUnrealDan")
	proto.RegisterType((*CSWingUnreal)(nil), "ui.CSWingUnreal")
	proto.RegisterType((*SCWingUnreal)(nil), "ui.SCWingUnreal")
	proto.RegisterType((*CSWingUnload)(nil), "ui.CSWingUnload")
	proto.RegisterType((*SCWingUnload)(nil), "ui.SCWingUnload")
	proto.RegisterType((*CSWingAdvanced)(nil), "ui.CSWingAdvanced")
	proto.RegisterType((*SCWingAdvanced)(nil), "ui.SCWingAdvanced")
	proto.RegisterType((*CSFeatherGet)(nil), "ui.CSFeatherGet")
	proto.RegisterType((*SCFeatherGet)(nil), "ui.SCFeatherGet")
	proto.RegisterType((*CSFeatherAdvanced)(nil), "ui.CSFeatherAdvanced")
	proto.RegisterType((*SCFeatherAdvanced)(nil), "ui.SCFeatherAdvanced")
	proto.RegisterType((*CSWingHidden)(nil), "ui.CSWingHidden")
	proto.RegisterType((*SCWingHidden)(nil), "ui.SCWingHidden")
	proto.RegisterType((*SCWingTrialCard)(nil), "ui.SCWingTrialCard")
	proto.RegisterType((*SCWingTrialOverdue)(nil), "ui.SCWingTrialOverdue")
	proto.RegisterType((*CSWingUpstar)(nil), "ui.CSWingUpstar")
	proto.RegisterType((*SCWingUpstar)(nil), "ui.SCWingUpstar")
}

func init() { proto.RegisterFile("wing.proto", fileDescriptor130) }

var fileDescriptor130 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4f, 0x6f, 0xd3, 0x4e,
	0x10, 0x95, 0xed, 0xba, 0x71, 0xc6, 0x6e, 0xd2, 0xf8, 0xf7, 0x43, 0xf5, 0xa9, 0xb2, 0x56, 0x80,
	0x7c, 0x8a, 0x50, 0xb8, 0x45, 0x5c, 0x20, 0x55, 0x21, 0x52, 0x45, 0x2b, 0x12, 0xd4, 0xf3, 0xa6,
	0xde, 0xa4, 0xab, 0x6e, 0x6d, 0x6b, 0xbd, 0x4e, 0x05, 0xdf, 0x04, 0xf1, 0x65, 0xd1, 0xee, 0x3a,
	0xf6, 0xa6, 0x49, 0x51, 0x0e, 0x1c, 0x67, 0x67, 0xde, 0xfc, 0x79, 0x6f, 0x66, 0x01, 0x9e, 0x68,
	0xb6, 0x1a, 0x16, 0x3c, 0x17, 0x79, 0x68, 0x57, 0x14, 0xfd, 0x04, 0xef, 0x96, 0x66, 0xab, 0x69,
	0xb6, 0xcc, 0xc3, 0x10, 0x00, 0xa7, 0x6b, 0x9c, 0xdd, 0x91, 0x74, 0x9a, 0x46, 0x56, 0x6c, 0x27,
	0x6e, 0xd8, 0x83, 0x63, 0x89, 0x98, 0xa6, 0x91, 0xad, 0xec, 0xff, 0xc0, 0xaf, 0x32, 0x4e, 0x30,
	0xbb, 0x22, 0x6b, 0xc2, 0x22, 0x47, 0x3d, 0x0e, 0xa0, 0xab, 0x1f, 0x6f, 0x78, 0x1e, 0x1d, 0xa9,
	0x27, 0x04, 0x5e, 0xf9, 0x40, 0xb3, 0x2b, 0x5a, 0x8a, 0xc8, 0x8d, 0x9d, 0xc4, 0x1f, 0x9d, 0x0e,
	0x2b, 0x3a, 0x94, 0xb5, 0x66, 0x0f, 0x34, 0x93, 0xf5, 0xd0, 0x08, 0xfc, 0x4b, 0x82, 0xc5, 0x3d,
	0xe1, 0xaa, 0xfc, 0x00, 0xba, 0xcb, 0xda, 0xdc, 0x54, 0x3f, 0x05, 0xaf, 0xe0, 0xf9, 0x8a, 0x93,
	0xb2, 0xd4, 0xf5, 0xd1, 0x18, 0x02, 0x33, 0x87, 0xd1, 0x9f, 0x46, 0x9c, 0x80, 0xcb, 0x54, 0x67,
	0xba, 0x5d, 0x1f, 0x9c, 0x82, 0xe7, 0xba, 0x4d, 0xe4, 0x43, 0x77, 0x32, 0x93, 0xe8, 0xcf, 0x44,
	0xa0, 0xdf, 0x36, 0x74, 0x67, 0x93, 0xda, 0xfa, 0xa7, 0xa3, 0x87, 0x00, 0x75, 0xdc, 0x66, 0x78,
	0xd5, 0xd6, 0x82, 0xc9, 0x29, 0x8e, 0x63, 0x4b, 0xa3, 0x94, 0x39, 0xa7, 0x8f, 0x24, 0xea, 0xc4,
	0x56, 0xe2, 0xc8, 0x6a, 0xf7, 0x34, 0x4d, 0x49, 0x16, 0x79, 0xb1, 0x9d, 0x78, 0xe1, 0x19, 0x04,
	0x82, 0x53, 0xcc, 0xae, 0x79, 0xaa, 0x08, 0xe9, 0x4a, 0xe0, 0xd8, 0x7a, 0x17, 0xbe, 0x02, 0xc0,
	0x77, 0x82, 0xae, 0x89, 0x02, 0x83, 0x04, 0xcb, 0xe7, 0xb7, 0x10, 0x3c, 0xd5, 0xc4, 0xa8, 0xba,
	0xfe, 0x7e, 0xd2, 0xc3, 0xd7, 0xe0, 0x2f, 0x5b, 0xd2, 0xa3, 0x20, 0xb6, 0x13, 0x7f, 0xd4, 0x97,
	0x61, 0x86, 0x16, 0xe8, 0x1c, 0xfa, 0x9a, 0xaa, 0xef, 0x6a, 0x92, 0x0b, 0x9c, 0x49, 0x2a, 0xb3,
	0xea, 0x51, 0x73, 0x83, 0x46, 0xd0, 0xd7, 0xe4, 0xb5, 0xfe, 0x86, 0xf9, 0x97, 0xa4, 0x3b, 0x87,
	0xc0, 0xcc, 0xf9, 0x5c, 0x3a, 0xe9, 0x37, 0x73, 0x6e, 0xf9, 0xad, 0xc4, 0x45, 0xbd, 0x16, 0xcf,
	0x72, 0x9c, 0x9a, 0xf1, 0xd2, 0xde, 0xc9, 0x87, 0xa0, 0xa7, 0xe3, 0x3f, 0xd6, 0xca, 0xca, 0x9e,
	0x70, 0x25, 0xf2, 0x4b, 0x86, 0x57, 0x2a, 0xc6, 0x43, 0xbf, 0x2c, 0xe8, 0xe9, 0x24, 0x4d, 0xd0,
	0x21, 0xab, 0xd0, 0xc8, 0xe9, 0xec, 0xca, 0x79, 0xa4, 0xe4, 0xfc, 0x1f, 0x82, 0x4d, 0x96, 0xf9,
	0x8f, 0x82, 0x44, 0xae, 0xc2, 0x9d, 0x81, 0x47, 0xcb, 0x8b, 0xbc, 0x5a, 0x30, 0xa2, 0x36, 0xc1,
	0x1b, 0xbb, 0x4b, 0xcc, 0x4a, 0x22, 0x8b, 0x8a, 0x5c, 0x60, 0xf6, 0x49, 0x65, 0xed, 0xb4, 0xf3,
	0xd6, 0xa2, 0xc8, 0x8d, 0x7d, 0x2f, 0xe7, 0x6d, 0xed, 0xc3, 0xee, 0xe5, 0x0d, 0x0c, 0x9a, 0x24,
	0x7f, 0xe1, 0xe1, 0x2b, 0x0c, 0x9a, 0xdc, 0x4d, 0xd8, 0x21, 0x05, 0x76, 0x06, 0x75, 0xb6, 0xb5,
	0xfe, 0xa2, 0x76, 0xda, 0xd8, 0x6e, 0x5d, 0xaf, 0xd1, 0xee, 0x05, 0xff, 0x78, 0xb3, 0x5f, 0x73,
	0x79, 0x03, 0x13, 0xcc, 0x53, 0x79, 0x7e, 0xea, 0x20, 0x6e, 0xcd, 0x73, 0x0f, 0xb7, 0x8e, 0x41,
	0x76, 0xe4, 0xa0, 0x31, 0x84, 0x06, 0xf6, 0x7a, 0x4d, 0x78, 0x5a, 0x91, 0xfd, 0xf0, 0x3e, 0x74,
	0x16, 0xdf, 0x48, 0x59, 0x31, 0xa1, 0xb0, 0x9e, 0xb1, 0xa3, 0x45, 0x29, 0x30, 0xdf, 0xd9, 0xa9,
	0x0f, 0xcd, 0xce, 0xed, 0xf5, 0x3f, 0xff, 0x7e, 0x4e, 0xc0, 0xad, 0x8a, 0x9b, 0xcd, 0x07, 0xf4,
	0x27, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x2e, 0xeb, 0x0a, 0x7d, 0x05, 0x00, 0x00,
}
