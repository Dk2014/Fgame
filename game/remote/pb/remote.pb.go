// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	remote.proto

It has these top-level messages:
	RemoteCommandRequest
	RemoteCommandResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 远程命令
type RemoteCommandRequest struct {
	Typ int32  `protobuf:"varint,1,opt,name=typ" json:"typ,omitempty"`
	Cmd []byte `protobuf:"bytes,2,opt,name=cmd,proto3" json:"cmd,omitempty"`
}

func (m *RemoteCommandRequest) Reset()                    { *m = RemoteCommandRequest{} }
func (m *RemoteCommandRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoteCommandRequest) ProtoMessage()               {}
func (*RemoteCommandRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RemoteCommandRequest) GetTyp() int32 {
	if m != nil {
		return m.Typ
	}
	return 0
}

func (m *RemoteCommandRequest) GetCmd() []byte {
	if m != nil {
		return m.Cmd
	}
	return nil
}

// 远程命令回复
type RemoteCommandResponse struct {
	ErrorCode int32  `protobuf:"varint,1,opt,name=errorCode" json:"errorCode,omitempty"`
	ErrorMsg  string `protobuf:"bytes,2,opt,name=errorMsg" json:"errorMsg,omitempty"`
}

func (m *RemoteCommandResponse) Reset()                    { *m = RemoteCommandResponse{} }
func (m *RemoteCommandResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoteCommandResponse) ProtoMessage()               {}
func (*RemoteCommandResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RemoteCommandResponse) GetErrorCode() int32 {
	if m != nil {
		return m.ErrorCode
	}
	return 0
}

func (m *RemoteCommandResponse) GetErrorMsg() string {
	if m != nil {
		return m.ErrorMsg
	}
	return ""
}

func init() {
	proto.RegisterType((*RemoteCommandRequest)(nil), "pb.RemoteCommandRequest")
	proto.RegisterType((*RemoteCommandResponse)(nil), "pb.RemoteCommandResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Remote service

type RemoteClient interface {
	// 获取
	DoCmd(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (*RemoteCommandResponse, error)
}

type remoteClient struct {
	cc *grpc.ClientConn
}

func NewRemoteClient(cc *grpc.ClientConn) RemoteClient {
	return &remoteClient{cc}
}

func (c *remoteClient) DoCmd(ctx context.Context, in *RemoteCommandRequest, opts ...grpc.CallOption) (*RemoteCommandResponse, error) {
	out := new(RemoteCommandResponse)
	err := grpc.Invoke(ctx, "/pb.Remote/DoCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Remote service

type RemoteServer interface {
	// 获取
	DoCmd(context.Context, *RemoteCommandRequest) (*RemoteCommandResponse, error)
}

func RegisterRemoteServer(s *grpc.Server, srv RemoteServer) {
	s.RegisterService(&_Remote_serviceDesc, srv)
}

func _Remote_DoCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServer).DoCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Remote/DoCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServer).DoCmd(ctx, req.(*RemoteCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Remote_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Remote",
	HandlerType: (*RemoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoCmd",
			Handler:    _Remote_DoCmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote.proto",
}

func init() { proto.RegisterFile("remote.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0xcd, 0xcd,
	0x2f, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0xb2, 0xe2, 0x12,
	0x09, 0x02, 0x8b, 0x39, 0xe7, 0xe7, 0xe6, 0x26, 0xe6, 0xa5, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16,
	0x97, 0x08, 0x09, 0x70, 0x31, 0x97, 0x54, 0x16, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x81,
	0x98, 0x20, 0x91, 0xe4, 0xdc, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x10, 0x53, 0x29,
	0x90, 0x4b, 0x14, 0x4d, 0x6f, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x90, 0x0c, 0x17, 0x67, 0x6a,
	0x51, 0x51, 0x7e, 0x91, 0x73, 0x7e, 0x4a, 0x2a, 0xd4, 0x08, 0x84, 0x80, 0x90, 0x14, 0x17, 0x07,
	0x98, 0xe3, 0x5b, 0x9c, 0x0e, 0x36, 0x8d, 0x33, 0x08, 0xce, 0x37, 0xf2, 0xe0, 0x62, 0x83, 0x18,
	0x29, 0x64, 0xc7, 0xc5, 0xea, 0x92, 0xef, 0x9c, 0x9b, 0x22, 0x24, 0xa1, 0x57, 0x90, 0xa4, 0x87,
	0xcd, 0x8d, 0x52, 0x92, 0x58, 0x64, 0x20, 0x2e, 0x50, 0x62, 0x48, 0x62, 0x03, 0xfb, 0xd1, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x35, 0x31, 0xca, 0x32, 0xf3, 0x00, 0x00, 0x00,
}
