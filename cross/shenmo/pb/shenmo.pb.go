// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shenmo.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	shenmo.proto

It has these top-level messages:
	ShenMoRankInfo
	ShenMoRanInfoData
	ShenMoRankListRequest
	ShenMoRankListResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShenMoRankInfo struct {
	ServerId     int32  `protobuf:"varint,1,opt,name=serverId" json:"serverId,omitempty"`
	AllianceId   int64  `protobuf:"varint,2,opt,name=allianceId" json:"allianceId,omitempty"`
	AllianceName string `protobuf:"bytes,3,opt,name=allianceName" json:"allianceName,omitempty"`
	JiFenNum     int32  `protobuf:"varint,4,opt,name=jiFenNum" json:"jiFenNum,omitempty"`
}

func (m *ShenMoRankInfo) Reset()                    { *m = ShenMoRankInfo{} }
func (m *ShenMoRankInfo) String() string            { return proto.CompactTextString(m) }
func (*ShenMoRankInfo) ProtoMessage()               {}
func (*ShenMoRankInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ShenMoRankInfo) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ShenMoRankInfo) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *ShenMoRankInfo) GetAllianceName() string {
	if m != nil {
		return m.AllianceName
	}
	return ""
}

func (m *ShenMoRankInfo) GetJiFenNum() int32 {
	if m != nil {
		return m.JiFenNum
	}
	return 0
}

type ShenMoRanInfoData struct {
	RankTime     int64             `protobuf:"varint,1,opt,name=rankTime" json:"rankTime,omitempty"`
	RankInfoList []*ShenMoRankInfo `protobuf:"bytes,2,rep,name=rankInfoList" json:"rankInfoList,omitempty"`
}

func (m *ShenMoRanInfoData) Reset()                    { *m = ShenMoRanInfoData{} }
func (m *ShenMoRanInfoData) String() string            { return proto.CompactTextString(m) }
func (*ShenMoRanInfoData) ProtoMessage()               {}
func (*ShenMoRanInfoData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ShenMoRanInfoData) GetRankTime() int64 {
	if m != nil {
		return m.RankTime
	}
	return 0
}

func (m *ShenMoRanInfoData) GetRankInfoList() []*ShenMoRankInfo {
	if m != nil {
		return m.RankInfoList
	}
	return nil
}

// 获取神魔战场排行榜列表
type ShenMoRankListRequest struct {
}

func (m *ShenMoRankListRequest) Reset()                    { *m = ShenMoRankListRequest{} }
func (m *ShenMoRankListRequest) String() string            { return proto.CompactTextString(m) }
func (*ShenMoRankListRequest) ProtoMessage()               {}
func (*ShenMoRankListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 神魔战场排行榜列表回复
type ShenMoRankListResponse struct {
	// 上周排行榜
	LastRankData *ShenMoRanInfoData `protobuf:"bytes,1,opt,name=lastRankData" json:"lastRankData,omitempty"`
	// 本周排行榜
	ThisRankData *ShenMoRanInfoData `protobuf:"bytes,2,opt,name=thisRankData" json:"thisRankData,omitempty"`
}

func (m *ShenMoRankListResponse) Reset()                    { *m = ShenMoRankListResponse{} }
func (m *ShenMoRankListResponse) String() string            { return proto.CompactTextString(m) }
func (*ShenMoRankListResponse) ProtoMessage()               {}
func (*ShenMoRankListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ShenMoRankListResponse) GetLastRankData() *ShenMoRanInfoData {
	if m != nil {
		return m.LastRankData
	}
	return nil
}

func (m *ShenMoRankListResponse) GetThisRankData() *ShenMoRanInfoData {
	if m != nil {
		return m.ThisRankData
	}
	return nil
}

func init() {
	proto.RegisterType((*ShenMoRankInfo)(nil), "pb.ShenMoRankInfo")
	proto.RegisterType((*ShenMoRanInfoData)(nil), "pb.ShenMoRanInfoData")
	proto.RegisterType((*ShenMoRankListRequest)(nil), "pb.ShenMoRankListRequest")
	proto.RegisterType((*ShenMoRankListResponse)(nil), "pb.ShenMoRankListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ShenMo service

type ShenMoClient interface {
	// 获取
	GetShenMoRankList(ctx context.Context, in *ShenMoRankListRequest, opts ...grpc.CallOption) (*ShenMoRankListResponse, error)
}

type shenMoClient struct {
	cc *grpc.ClientConn
}

func NewShenMoClient(cc *grpc.ClientConn) ShenMoClient {
	return &shenMoClient{cc}
}

func (c *shenMoClient) GetShenMoRankList(ctx context.Context, in *ShenMoRankListRequest, opts ...grpc.CallOption) (*ShenMoRankListResponse, error) {
	out := new(ShenMoRankListResponse)
	err := grpc.Invoke(ctx, "/pb.ShenMo/GetShenMoRankList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShenMo service

type ShenMoServer interface {
	// 获取
	GetShenMoRankList(context.Context, *ShenMoRankListRequest) (*ShenMoRankListResponse, error)
}

func RegisterShenMoServer(s *grpc.Server, srv ShenMoServer) {
	s.RegisterService(&_ShenMo_serviceDesc, srv)
}

func _ShenMo_GetShenMoRankList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShenMoRankListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShenMoServer).GetShenMoRankList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ShenMo/GetShenMoRankList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShenMoServer).GetShenMoRankList(ctx, req.(*ShenMoRankListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShenMo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ShenMo",
	HandlerType: (*ShenMoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShenMoRankList",
			Handler:    _ShenMo_GetShenMoRankList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shenmo.proto",
}

func init() { proto.RegisterFile("shenmo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x4b, 0xc3, 0x30,
	0x18, 0xc5, 0x4d, 0xab, 0x43, 0xbf, 0x15, 0x61, 0x81, 0x69, 0xdd, 0x41, 0x4a, 0x4e, 0x3d, 0xed,
	0x50, 0x41, 0xf0, 0x2e, 0x4a, 0x61, 0xee, 0x10, 0xc5, 0x7b, 0xea, 0x3e, 0x6d, 0x5d, 0x9b, 0xd4,
	0x26, 0xf3, 0xaf, 0x10, 0xff, 0x66, 0x49, 0x6b, 0x6b, 0x23, 0xe2, 0xf1, 0xbd, 0xef, 0xbd, 0xf4,
	0xf7, 0xa0, 0x10, 0xe8, 0x1c, 0x65, 0xa5, 0x96, 0x75, 0xa3, 0x8c, 0xa2, 0x5e, 0x9d, 0xb1, 0x0f,
	0x02, 0xc7, 0xf7, 0x39, 0xca, 0x3b, 0xc5, 0x85, 0xdc, 0xa6, 0xf2, 0x59, 0xd1, 0x05, 0x1c, 0x6a,
	0x6c, 0xde, 0xb1, 0x49, 0x37, 0x21, 0x89, 0x48, 0x7c, 0xc0, 0x07, 0x4d, 0xcf, 0x01, 0x44, 0x59,
	0x16, 0x42, 0x3e, 0x61, 0xba, 0x09, 0xbd, 0x88, 0xc4, 0x3e, 0x1f, 0x39, 0x94, 0x41, 0xd0, 0xab,
	0xb5, 0xa8, 0x30, 0xf4, 0x23, 0x12, 0x1f, 0x71, 0xc7, 0xb3, 0xef, 0xbf, 0x16, 0x37, 0x28, 0xd7,
	0xbb, 0x2a, 0xdc, 0xef, 0xde, 0xef, 0x35, 0x7b, 0x81, 0xd9, 0x40, 0x63, 0x61, 0xae, 0x85, 0x11,
	0xb6, 0xd0, 0x08, 0xb9, 0x7d, 0x28, 0x2a, 0x6c, 0x81, 0x7c, 0x3e, 0x68, 0x7a, 0x09, 0x41, 0xf3,
	0x0d, 0xbe, 0x2a, 0xb4, 0x09, 0xbd, 0xc8, 0x8f, 0xa7, 0x09, 0x5d, 0xd6, 0xd9, 0xd2, 0x9d, 0xc5,
	0x9d, 0x1c, 0x3b, 0x85, 0xf9, 0xcf, 0xdd, 0x3a, 0x1c, 0xdf, 0x76, 0xa8, 0x0d, 0xfb, 0x24, 0x70,
	0xf2, 0xfb, 0xa2, 0x6b, 0x25, 0x35, 0xd2, 0x2b, 0x08, 0x4a, 0xa1, 0x8d, 0xf5, 0x2d, 0x57, 0xcb,
	0x32, 0x4d, 0xe6, 0xce, 0xb7, 0x7a, 0x68, 0xee, 0x44, 0x6d, 0xd5, 0xe4, 0x85, 0x1e, 0xaa, 0xde,
	0xbf, 0xd5, 0x71, 0x34, 0x79, 0x84, 0x49, 0x17, 0xa1, 0x2b, 0x98, 0xdd, 0xa2, 0x71, 0xe1, 0xe8,
	0x99, 0x3b, 0x75, 0x34, 0x65, 0xb1, 0xf8, 0xeb, 0xd4, 0x6d, 0x61, 0x7b, 0xd9, 0xa4, 0xfd, 0x09,
	0x2e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x95, 0xe4, 0x6f, 0x10, 0x14, 0x02, 0x00, 0x00,
}
