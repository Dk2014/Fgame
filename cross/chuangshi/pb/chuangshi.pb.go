// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chuangshi.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	chuangshi.proto

It has these top-level messages:
	ChuangShiMemberInfo
	JianSheSkill
	CityJianShe
	ChuangShiCity
	ChuangShiVote
	ChuangShiTarget
	ChuangShiCamp
	ChuangShiWholeInfoRequest
	ChuangShiWholeInfoResponse
	ChuangShiShenWangSignUpRequest
	ChuangShiShenWangSignUpResponse
	ChuangShiShenWangVoteRequest
	ChuangShiShenWangVoteResponse
	ChuangShiCityRenMingRequest
	ChuangShiCityRenMingResponse
	CityPaySchedule
	ChuangShiCityPayScheduleRequest
	ChuangShiCityPayScheduleResponse
	CampPaySchedule
	ChuangShiCampPayScheduleRequest
	ChuangShiCampPayScheduleResponse
	ChuangShiCampPayReceiveRequest
	ChuangShiCampPayReceiveResponse
	ChuangShiCityJianSheRequest
	ChuangShiCityJianSheResponse
	ChuangShiGongChengTargetRequest
	ChuangShiGongChengTargetResponse
	ChuangShiJoinCampRequest
	ChuangShiJoinCampResponse
	ChuangShiCityTianQiSetRequest
	ChuangShiCityTianQiSetResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 创世成员
type ChuangShiMemberInfo struct {
	Platform     int32  `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
	ServerId     int32  `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
	PlayerId     int64  `protobuf:"varint,3,opt,name=playerId" json:"playerId,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Force        int64  `protobuf:"varint,5,opt,name=force" json:"force,omitempty"`
	Pos          int32  `protobuf:"varint,6,opt,name=pos" json:"pos,omitempty"`
	AlPos        int32  `protobuf:"varint,7,opt,name=alPos" json:"alPos,omitempty"`
	AllianceName string `protobuf:"bytes,8,opt,name=allianceName" json:"allianceName,omitempty"`
	AllianceId   int64  `protobuf:"varint,9,opt,name=allianceId" json:"allianceId,omitempty"`
	CampType     int32  `protobuf:"varint,10,opt,name=campType" json:"campType,omitempty"`
}

func (m *ChuangShiMemberInfo) Reset()                    { *m = ChuangShiMemberInfo{} }
func (m *ChuangShiMemberInfo) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiMemberInfo) ProtoMessage()               {}
func (*ChuangShiMemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ChuangShiMemberInfo) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ChuangShiMemberInfo) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ChuangShiMemberInfo) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChuangShiMemberInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChuangShiMemberInfo) GetForce() int64 {
	if m != nil {
		return m.Force
	}
	return 0
}

func (m *ChuangShiMemberInfo) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

func (m *ChuangShiMemberInfo) GetAlPos() int32 {
	if m != nil {
		return m.AlPos
	}
	return 0
}

func (m *ChuangShiMemberInfo) GetAllianceName() string {
	if m != nil {
		return m.AllianceName
	}
	return ""
}

func (m *ChuangShiMemberInfo) GetAllianceId() int64 {
	if m != nil {
		return m.AllianceId
	}
	return 0
}

func (m *ChuangShiMemberInfo) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

type JianSheSkill struct {
	Level        int32 `protobuf:"varint,1,opt,name=level" json:"level,omitempty"`
	ActivateTime int64 `protobuf:"varint,2,opt,name=activateTime" json:"activateTime,omitempty"`
}

func (m *JianSheSkill) Reset()                    { *m = JianSheSkill{} }
func (m *JianSheSkill) String() string            { return proto.CompactTextString(m) }
func (*JianSheSkill) ProtoMessage()               {}
func (*JianSheSkill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *JianSheSkill) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *JianSheSkill) GetActivateTime() int64 {
	if m != nil {
		return m.ActivateTime
	}
	return 0
}

type CityJianShe struct {
	JianSheType   int32           `protobuf:"varint,1,opt,name=jianSheType" json:"jianSheType,omitempty"`
	Level         int32           `protobuf:"varint,2,opt,name=level" json:"level,omitempty"`
	Exp           int32           `protobuf:"varint,3,opt,name=exp" json:"exp,omitempty"`
	SkillLevelSet int32           `protobuf:"varint,4,opt,name=skillLevelSet" json:"skillLevelSet,omitempty"`
	SkillMap      []*JianSheSkill `protobuf:"bytes,5,rep,name=skillMap" json:"skillMap,omitempty"`
}

func (m *CityJianShe) Reset()                    { *m = CityJianShe{} }
func (m *CityJianShe) String() string            { return proto.CompactTextString(m) }
func (*CityJianShe) ProtoMessage()               {}
func (*CityJianShe) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CityJianShe) GetJianSheType() int32 {
	if m != nil {
		return m.JianSheType
	}
	return 0
}

func (m *CityJianShe) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CityJianShe) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *CityJianShe) GetSkillLevelSet() int32 {
	if m != nil {
		return m.SkillLevelSet
	}
	return 0
}

func (m *CityJianShe) GetSkillMap() []*JianSheSkill {
	if m != nil {
		return m.SkillMap
	}
	return nil
}

// 城池
type ChuangShiCity struct {
	Camp        int32                `protobuf:"varint,1,opt,name=camp" json:"camp,omitempty"`
	CityType    int32                `protobuf:"varint,2,opt,name=cityType" json:"cityType,omitempty"`
	Index       int32                `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	KingMember  *ChuangShiMemberInfo `protobuf:"bytes,4,opt,name=kingMember" json:"kingMember,omitempty"`
	CityId      int64                `protobuf:"varint,5,opt,name=cityId" json:"cityId,omitempty"`
	Jifen       int64                `protobuf:"varint,6,opt,name=jifen" json:"jifen,omitempty"`
	Diamonds    int64                `protobuf:"varint,7,opt,name=diamonds" json:"diamonds,omitempty"`
	JianSheList []*CityJianShe       `protobuf:"bytes,8,rep,name=jianSheList" json:"jianSheList,omitempty"`
	OrignalCamp int32                `protobuf:"varint,9,opt,name=orignalCamp" json:"orignalCamp,omitempty"`
}

func (m *ChuangShiCity) Reset()                    { *m = ChuangShiCity{} }
func (m *ChuangShiCity) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCity) ProtoMessage()               {}
func (*ChuangShiCity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ChuangShiCity) GetCamp() int32 {
	if m != nil {
		return m.Camp
	}
	return 0
}

func (m *ChuangShiCity) GetCityType() int32 {
	if m != nil {
		return m.CityType
	}
	return 0
}

func (m *ChuangShiCity) GetIndex() int32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ChuangShiCity) GetKingMember() *ChuangShiMemberInfo {
	if m != nil {
		return m.KingMember
	}
	return nil
}

func (m *ChuangShiCity) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *ChuangShiCity) GetJifen() int64 {
	if m != nil {
		return m.Jifen
	}
	return 0
}

func (m *ChuangShiCity) GetDiamonds() int64 {
	if m != nil {
		return m.Diamonds
	}
	return 0
}

func (m *ChuangShiCity) GetJianSheList() []*CityJianShe {
	if m != nil {
		return m.JianSheList
	}
	return nil
}

func (m *ChuangShiCity) GetOrignalCamp() int32 {
	if m != nil {
		return m.OrignalCamp
	}
	return 0
}

// 投票
type ChuangShiVote struct {
	TicketNum int32                `protobuf:"varint,1,opt,name=ticketNum" json:"ticketNum,omitempty"`
	Member    *ChuangShiMemberInfo `protobuf:"bytes,2,opt,name=member" json:"member,omitempty"`
}

func (m *ChuangShiVote) Reset()                    { *m = ChuangShiVote{} }
func (m *ChuangShiVote) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiVote) ProtoMessage()               {}
func (*ChuangShiVote) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChuangShiVote) GetTicketNum() int32 {
	if m != nil {
		return m.TicketNum
	}
	return 0
}

func (m *ChuangShiVote) GetMember() *ChuangShiMemberInfo {
	if m != nil {
		return m.Member
	}
	return nil
}

// 攻城
type ChuangShiTarget struct {
	CampType int32 `protobuf:"varint,1,opt,name=campType" json:"campType,omitempty"`
	CityName int64 `protobuf:"varint,2,opt,name=cityName" json:"cityName,omitempty"`
}

func (m *ChuangShiTarget) Reset()                    { *m = ChuangShiTarget{} }
func (m *ChuangShiTarget) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiTarget) ProtoMessage()               {}
func (*ChuangShiTarget) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChuangShiTarget) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

func (m *ChuangShiTarget) GetCityName() int64 {
	if m != nil {
		return m.CityName
	}
	return 0
}

type ChuangShiCamp struct {
	CampType       int32                  `protobuf:"varint,1,opt,name=campType" json:"campType,omitempty"`
	KingMember     *ChuangShiMemberInfo   `protobuf:"bytes,2,opt,name=kingMember" json:"kingMember,omitempty"`
	Power          int64                  `protobuf:"varint,3,opt,name=power" json:"power,omitempty"`
	SignList       []*ChuangShiMemberInfo `protobuf:"bytes,4,rep,name=signList" json:"signList,omitempty"`
	VoteList       []*ChuangShiVote       `protobuf:"bytes,5,rep,name=voteList" json:"voteList,omitempty"`
	MemberList     []*ChuangShiMemberInfo `protobuf:"bytes,6,rep,name=memberList" json:"memberList,omitempty"`
	CityList       []*ChuangShiCity       `protobuf:"bytes,7,rep,name=cityList" json:"cityList,omitempty"`
	TargetList     []*ChuangShiTarget     `protobuf:"bytes,8,rep,name=targetList" json:"targetList,omitempty"`
	ShenWangStatus int32                  `protobuf:"varint,9,opt,name=shenWangStatus" json:"shenWangStatus,omitempty"`
	Jifen          int64                  `protobuf:"varint,10,opt,name=jifen" json:"jifen,omitempty"`
	Diamonds       int64                  `protobuf:"varint,11,opt,name=diamonds" json:"diamonds,omitempty"`
}

func (m *ChuangShiCamp) Reset()                    { *m = ChuangShiCamp{} }
func (m *ChuangShiCamp) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCamp) ProtoMessage()               {}
func (*ChuangShiCamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ChuangShiCamp) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

func (m *ChuangShiCamp) GetKingMember() *ChuangShiMemberInfo {
	if m != nil {
		return m.KingMember
	}
	return nil
}

func (m *ChuangShiCamp) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *ChuangShiCamp) GetSignList() []*ChuangShiMemberInfo {
	if m != nil {
		return m.SignList
	}
	return nil
}

func (m *ChuangShiCamp) GetVoteList() []*ChuangShiVote {
	if m != nil {
		return m.VoteList
	}
	return nil
}

func (m *ChuangShiCamp) GetMemberList() []*ChuangShiMemberInfo {
	if m != nil {
		return m.MemberList
	}
	return nil
}

func (m *ChuangShiCamp) GetCityList() []*ChuangShiCity {
	if m != nil {
		return m.CityList
	}
	return nil
}

func (m *ChuangShiCamp) GetTargetList() []*ChuangShiTarget {
	if m != nil {
		return m.TargetList
	}
	return nil
}

func (m *ChuangShiCamp) GetShenWangStatus() int32 {
	if m != nil {
		return m.ShenWangStatus
	}
	return 0
}

func (m *ChuangShiCamp) GetJifen() int64 {
	if m != nil {
		return m.Jifen
	}
	return 0
}

func (m *ChuangShiCamp) GetDiamonds() int64 {
	if m != nil {
		return m.Diamonds
	}
	return 0
}

type ChuangShiWholeInfoRequest struct {
}

func (m *ChuangShiWholeInfoRequest) Reset()                    { *m = ChuangShiWholeInfoRequest{} }
func (m *ChuangShiWholeInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiWholeInfoRequest) ProtoMessage()               {}
func (*ChuangShiWholeInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type ChuangShiWholeInfoResponse struct {
	CampList []*ChuangShiCamp `protobuf:"bytes,1,rep,name=campList" json:"campList,omitempty"`
}

func (m *ChuangShiWholeInfoResponse) Reset()                    { *m = ChuangShiWholeInfoResponse{} }
func (m *ChuangShiWholeInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiWholeInfoResponse) ProtoMessage()               {}
func (*ChuangShiWholeInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ChuangShiWholeInfoResponse) GetCampList() []*ChuangShiCamp {
	if m != nil {
		return m.CampList
	}
	return nil
}

// 神王报名
type ChuangShiShenWangSignUpRequest struct {
	PlayerId int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	Platform int32 `protobuf:"varint,2,opt,name=platform" json:"platform,omitempty"`
	ServerId int32 `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`
	CampType int32 `protobuf:"varint,4,opt,name=campType" json:"campType,omitempty"`
}

func (m *ChuangShiShenWangSignUpRequest) Reset()                    { *m = ChuangShiShenWangSignUpRequest{} }
func (m *ChuangShiShenWangSignUpRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiShenWangSignUpRequest) ProtoMessage()               {}
func (*ChuangShiShenWangSignUpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ChuangShiShenWangSignUpRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChuangShiShenWangSignUpRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ChuangShiShenWangSignUpRequest) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ChuangShiShenWangSignUpRequest) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

type ChuangShiShenWangSignUpResponse struct {
	PlayerId int64                  `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	Success  bool                   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	SignList []*ChuangShiMemberInfo `protobuf:"bytes,3,rep,name=signList" json:"signList,omitempty"`
	CampType int32                  `protobuf:"varint,4,opt,name=campType" json:"campType,omitempty"`
}

func (m *ChuangShiShenWangSignUpResponse) Reset()         { *m = ChuangShiShenWangSignUpResponse{} }
func (m *ChuangShiShenWangSignUpResponse) String() string { return proto.CompactTextString(m) }
func (*ChuangShiShenWangSignUpResponse) ProtoMessage()    {}
func (*ChuangShiShenWangSignUpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{10}
}

func (m *ChuangShiShenWangSignUpResponse) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChuangShiShenWangSignUpResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ChuangShiShenWangSignUpResponse) GetSignList() []*ChuangShiMemberInfo {
	if m != nil {
		return m.SignList
	}
	return nil
}

func (m *ChuangShiShenWangSignUpResponse) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

// 神王投票
type ChuangShiShenWangVoteRequest struct {
	PlayerId  int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	SupportId int64 `protobuf:"varint,2,opt,name=supportId" json:"supportId,omitempty"`
	CampType  int32 `protobuf:"varint,3,opt,name=campType" json:"campType,omitempty"`
}

func (m *ChuangShiShenWangVoteRequest) Reset()                    { *m = ChuangShiShenWangVoteRequest{} }
func (m *ChuangShiShenWangVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiShenWangVoteRequest) ProtoMessage()               {}
func (*ChuangShiShenWangVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ChuangShiShenWangVoteRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChuangShiShenWangVoteRequest) GetSupportId() int64 {
	if m != nil {
		return m.SupportId
	}
	return 0
}

func (m *ChuangShiShenWangVoteRequest) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

type ChuangShiShenWangVoteResponse struct {
	Success  bool             `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	VoteList []*ChuangShiVote `protobuf:"bytes,2,rep,name=voteList" json:"voteList,omitempty"`
	CampType int32            `protobuf:"varint,3,opt,name=campType" json:"campType,omitempty"`
}

func (m *ChuangShiShenWangVoteResponse) Reset()                    { *m = ChuangShiShenWangVoteResponse{} }
func (m *ChuangShiShenWangVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiShenWangVoteResponse) ProtoMessage()               {}
func (*ChuangShiShenWangVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ChuangShiShenWangVoteResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ChuangShiShenWangVoteResponse) GetVoteList() []*ChuangShiVote {
	if m != nil {
		return m.VoteList
	}
	return nil
}

func (m *ChuangShiShenWangVoteResponse) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

// 任命
type ChuangShiCityRenMingRequest struct {
	MemberId   int64 `protobuf:"varint,1,opt,name=memberId" json:"memberId,omitempty"`
	CityId     int64 `protobuf:"varint,2,opt,name=cityId" json:"cityId,omitempty"`
	BeCommitId int64 `protobuf:"varint,3,opt,name=beCommitId" json:"beCommitId,omitempty"`
}

func (m *ChuangShiCityRenMingRequest) Reset()                    { *m = ChuangShiCityRenMingRequest{} }
func (m *ChuangShiCityRenMingRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCityRenMingRequest) ProtoMessage()               {}
func (*ChuangShiCityRenMingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ChuangShiCityRenMingRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *ChuangShiCityRenMingRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *ChuangShiCityRenMingRequest) GetBeCommitId() int64 {
	if m != nil {
		return m.BeCommitId
	}
	return 0
}

type ChuangShiCityRenMingResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ChuangShiCityRenMingResponse) Reset()                    { *m = ChuangShiCityRenMingResponse{} }
func (m *ChuangShiCityRenMingResponse) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCityRenMingResponse) ProtoMessage()               {}
func (*ChuangShiCityRenMingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ChuangShiCityRenMingResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type CityPaySchedule struct {
	AlPos int32 `protobuf:"varint,1,opt,name=alPos" json:"alPos,omitempty"`
	Ratio int32 `protobuf:"varint,2,opt,name=ratio" json:"ratio,omitempty"`
}

func (m *CityPaySchedule) Reset()                    { *m = CityPaySchedule{} }
func (m *CityPaySchedule) String() string            { return proto.CompactTextString(m) }
func (*CityPaySchedule) ProtoMessage()               {}
func (*CityPaySchedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CityPaySchedule) GetAlPos() int32 {
	if m != nil {
		return m.AlPos
	}
	return 0
}

func (m *CityPaySchedule) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

// 城池工资分配
type ChuangShiCityPayScheduleRequest struct {
	ScheduleList []*CityPaySchedule `protobuf:"bytes,1,rep,name=scheduleList" json:"scheduleList,omitempty"`
	PlayerId     int64              `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (m *ChuangShiCityPayScheduleRequest) Reset()         { *m = ChuangShiCityPayScheduleRequest{} }
func (m *ChuangShiCityPayScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*ChuangShiCityPayScheduleRequest) ProtoMessage()    {}
func (*ChuangShiCityPayScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{16}
}

func (m *ChuangShiCityPayScheduleRequest) GetScheduleList() []*CityPaySchedule {
	if m != nil {
		return m.ScheduleList
	}
	return nil
}

func (m *ChuangShiCityPayScheduleRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type ChuangShiCityPayScheduleResponse struct {
	Camp *ChuangShiCamp `protobuf:"bytes,1,opt,name=camp" json:"camp,omitempty"`
}

func (m *ChuangShiCityPayScheduleResponse) Reset()         { *m = ChuangShiCityPayScheduleResponse{} }
func (m *ChuangShiCityPayScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*ChuangShiCityPayScheduleResponse) ProtoMessage()    {}
func (*ChuangShiCityPayScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *ChuangShiCityPayScheduleResponse) GetCamp() *ChuangShiCamp {
	if m != nil {
		return m.Camp
	}
	return nil
}

type CampPaySchedule struct {
	CityId int64 `protobuf:"varint,1,opt,name=cityId" json:"cityId,omitempty"`
	Ratio  int32 `protobuf:"varint,2,opt,name=ratio" json:"ratio,omitempty"`
}

func (m *CampPaySchedule) Reset()                    { *m = CampPaySchedule{} }
func (m *CampPaySchedule) String() string            { return proto.CompactTextString(m) }
func (*CampPaySchedule) ProtoMessage()               {}
func (*CampPaySchedule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *CampPaySchedule) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *CampPaySchedule) GetRatio() int32 {
	if m != nil {
		return m.Ratio
	}
	return 0
}

// 阵营工资分配
type ChuangShiCampPayScheduleRequest struct {
	ScheduleList []*CampPaySchedule `protobuf:"bytes,1,rep,name=scheduleList" json:"scheduleList,omitempty"`
	PlayerId     int64              `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (m *ChuangShiCampPayScheduleRequest) Reset()         { *m = ChuangShiCampPayScheduleRequest{} }
func (m *ChuangShiCampPayScheduleRequest) String() string { return proto.CompactTextString(m) }
func (*ChuangShiCampPayScheduleRequest) ProtoMessage()    {}
func (*ChuangShiCampPayScheduleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{19}
}

func (m *ChuangShiCampPayScheduleRequest) GetScheduleList() []*CampPaySchedule {
	if m != nil {
		return m.ScheduleList
	}
	return nil
}

func (m *ChuangShiCampPayScheduleRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type ChuangShiCampPayScheduleResponse struct {
	Camp *ChuangShiCamp `protobuf:"bytes,1,opt,name=camp" json:"camp,omitempty"`
}

func (m *ChuangShiCampPayScheduleResponse) Reset()         { *m = ChuangShiCampPayScheduleResponse{} }
func (m *ChuangShiCampPayScheduleResponse) String() string { return proto.CompactTextString(m) }
func (*ChuangShiCampPayScheduleResponse) ProtoMessage()    {}
func (*ChuangShiCampPayScheduleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *ChuangShiCampPayScheduleResponse) GetCamp() *ChuangShiCamp {
	if m != nil {
		return m.Camp
	}
	return nil
}

// 阵营工资领取
type ChuangShiCampPayReceiveRequest struct {
	PlayerId int64 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
}

func (m *ChuangShiCampPayReceiveRequest) Reset()                    { *m = ChuangShiCampPayReceiveRequest{} }
func (m *ChuangShiCampPayReceiveRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCampPayReceiveRequest) ProtoMessage()               {}
func (*ChuangShiCampPayReceiveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ChuangShiCampPayReceiveRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type ChuangShiCampPayReceiveResponse struct {
	Camp *ChuangShiCamp `protobuf:"bytes,1,opt,name=camp" json:"camp,omitempty"`
}

func (m *ChuangShiCampPayReceiveResponse) Reset()         { *m = ChuangShiCampPayReceiveResponse{} }
func (m *ChuangShiCampPayReceiveResponse) String() string { return proto.CompactTextString(m) }
func (*ChuangShiCampPayReceiveResponse) ProtoMessage()    {}
func (*ChuangShiCampPayReceiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *ChuangShiCampPayReceiveResponse) GetCamp() *ChuangShiCamp {
	if m != nil {
		return m.Camp
	}
	return nil
}

// 城池建设
type ChuangShiCityJianSheRequest struct {
	PlayerId    int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	Num         int32 `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	CityId      int64 `protobuf:"varint,3,opt,name=cityId" json:"cityId,omitempty"`
	JianSheType int32 `protobuf:"varint,4,opt,name=jianSheType" json:"jianSheType,omitempty"`
}

func (m *ChuangShiCityJianSheRequest) Reset()                    { *m = ChuangShiCityJianSheRequest{} }
func (m *ChuangShiCityJianSheRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCityJianSheRequest) ProtoMessage()               {}
func (*ChuangShiCityJianSheRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *ChuangShiCityJianSheRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChuangShiCityJianSheRequest) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ChuangShiCityJianSheRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *ChuangShiCityJianSheRequest) GetJianSheType() int32 {
	if m != nil {
		return m.JianSheType
	}
	return 0
}

type ChuangShiCityJianSheResponse struct {
	Camp    *ChuangShiCamp `protobuf:"bytes,1,opt,name=camp" json:"camp,omitempty"`
	Success bool           `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *ChuangShiCityJianSheResponse) Reset()                    { *m = ChuangShiCityJianSheResponse{} }
func (m *ChuangShiCityJianSheResponse) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCityJianSheResponse) ProtoMessage()               {}
func (*ChuangShiCityJianSheResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ChuangShiCityJianSheResponse) GetCamp() *ChuangShiCamp {
	if m != nil {
		return m.Camp
	}
	return nil
}

func (m *ChuangShiCityJianSheResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 城池建设
type ChuangShiGongChengTargetRequest struct {
	PlayerId int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	CityId   int64 `protobuf:"varint,2,opt,name=cityId" json:"cityId,omitempty"`
}

func (m *ChuangShiGongChengTargetRequest) Reset()         { *m = ChuangShiGongChengTargetRequest{} }
func (m *ChuangShiGongChengTargetRequest) String() string { return proto.CompactTextString(m) }
func (*ChuangShiGongChengTargetRequest) ProtoMessage()    {}
func (*ChuangShiGongChengTargetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *ChuangShiGongChengTargetRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChuangShiGongChengTargetRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

type ChuangShiGongChengTargetResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ChuangShiGongChengTargetResponse) Reset()         { *m = ChuangShiGongChengTargetResponse{} }
func (m *ChuangShiGongChengTargetResponse) String() string { return proto.CompactTextString(m) }
func (*ChuangShiGongChengTargetResponse) ProtoMessage()    {}
func (*ChuangShiGongChengTargetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *ChuangShiGongChengTargetResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 加入阵营
type ChuangShiJoinCampRequest struct {
	CampType int32                  `protobuf:"varint,1,opt,name=campType" json:"campType,omitempty"`
	MemList  []*ChuangShiMemberInfo `protobuf:"bytes,2,rep,name=memList" json:"memList,omitempty"`
}

func (m *ChuangShiJoinCampRequest) Reset()                    { *m = ChuangShiJoinCampRequest{} }
func (m *ChuangShiJoinCampRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiJoinCampRequest) ProtoMessage()               {}
func (*ChuangShiJoinCampRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ChuangShiJoinCampRequest) GetCampType() int32 {
	if m != nil {
		return m.CampType
	}
	return 0
}

func (m *ChuangShiJoinCampRequest) GetMemList() []*ChuangShiMemberInfo {
	if m != nil {
		return m.MemList
	}
	return nil
}

type ChuangShiJoinCampResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ChuangShiJoinCampResponse) Reset()                    { *m = ChuangShiJoinCampResponse{} }
func (m *ChuangShiJoinCampResponse) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiJoinCampResponse) ProtoMessage()               {}
func (*ChuangShiJoinCampResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ChuangShiJoinCampResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// 城池天气设置
type ChuangShiCityTianQiSetRequest struct {
	PlayerId int64 `protobuf:"varint,1,opt,name=playerId" json:"playerId,omitempty"`
	CityId   int64 `protobuf:"varint,2,opt,name=cityId" json:"cityId,omitempty"`
	Level    int32 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
}

func (m *ChuangShiCityTianQiSetRequest) Reset()                    { *m = ChuangShiCityTianQiSetRequest{} }
func (m *ChuangShiCityTianQiSetRequest) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCityTianQiSetRequest) ProtoMessage()               {}
func (*ChuangShiCityTianQiSetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ChuangShiCityTianQiSetRequest) GetPlayerId() int64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ChuangShiCityTianQiSetRequest) GetCityId() int64 {
	if m != nil {
		return m.CityId
	}
	return 0
}

func (m *ChuangShiCityTianQiSetRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

type ChuangShiCityTianQiSetResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *ChuangShiCityTianQiSetResponse) Reset()                    { *m = ChuangShiCityTianQiSetResponse{} }
func (m *ChuangShiCityTianQiSetResponse) String() string            { return proto.CompactTextString(m) }
func (*ChuangShiCityTianQiSetResponse) ProtoMessage()               {}
func (*ChuangShiCityTianQiSetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ChuangShiCityTianQiSetResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*ChuangShiMemberInfo)(nil), "pb.ChuangShiMemberInfo")
	proto.RegisterType((*JianSheSkill)(nil), "pb.JianSheSkill")
	proto.RegisterType((*CityJianShe)(nil), "pb.CityJianShe")
	proto.RegisterType((*ChuangShiCity)(nil), "pb.ChuangShiCity")
	proto.RegisterType((*ChuangShiVote)(nil), "pb.ChuangShiVote")
	proto.RegisterType((*ChuangShiTarget)(nil), "pb.ChuangShiTarget")
	proto.RegisterType((*ChuangShiCamp)(nil), "pb.ChuangShiCamp")
	proto.RegisterType((*ChuangShiWholeInfoRequest)(nil), "pb.ChuangShiWholeInfoRequest")
	proto.RegisterType((*ChuangShiWholeInfoResponse)(nil), "pb.ChuangShiWholeInfoResponse")
	proto.RegisterType((*ChuangShiShenWangSignUpRequest)(nil), "pb.ChuangShiShenWangSignUpRequest")
	proto.RegisterType((*ChuangShiShenWangSignUpResponse)(nil), "pb.ChuangShiShenWangSignUpResponse")
	proto.RegisterType((*ChuangShiShenWangVoteRequest)(nil), "pb.ChuangShiShenWangVoteRequest")
	proto.RegisterType((*ChuangShiShenWangVoteResponse)(nil), "pb.ChuangShiShenWangVoteResponse")
	proto.RegisterType((*ChuangShiCityRenMingRequest)(nil), "pb.ChuangShiCityRenMingRequest")
	proto.RegisterType((*ChuangShiCityRenMingResponse)(nil), "pb.ChuangShiCityRenMingResponse")
	proto.RegisterType((*CityPaySchedule)(nil), "pb.CityPaySchedule")
	proto.RegisterType((*ChuangShiCityPayScheduleRequest)(nil), "pb.ChuangShiCityPayScheduleRequest")
	proto.RegisterType((*ChuangShiCityPayScheduleResponse)(nil), "pb.ChuangShiCityPayScheduleResponse")
	proto.RegisterType((*CampPaySchedule)(nil), "pb.CampPaySchedule")
	proto.RegisterType((*ChuangShiCampPayScheduleRequest)(nil), "pb.ChuangShiCampPayScheduleRequest")
	proto.RegisterType((*ChuangShiCampPayScheduleResponse)(nil), "pb.ChuangShiCampPayScheduleResponse")
	proto.RegisterType((*ChuangShiCampPayReceiveRequest)(nil), "pb.ChuangShiCampPayReceiveRequest")
	proto.RegisterType((*ChuangShiCampPayReceiveResponse)(nil), "pb.ChuangShiCampPayReceiveResponse")
	proto.RegisterType((*ChuangShiCityJianSheRequest)(nil), "pb.ChuangShiCityJianSheRequest")
	proto.RegisterType((*ChuangShiCityJianSheResponse)(nil), "pb.ChuangShiCityJianSheResponse")
	proto.RegisterType((*ChuangShiGongChengTargetRequest)(nil), "pb.ChuangShiGongChengTargetRequest")
	proto.RegisterType((*ChuangShiGongChengTargetResponse)(nil), "pb.ChuangShiGongChengTargetResponse")
	proto.RegisterType((*ChuangShiJoinCampRequest)(nil), "pb.ChuangShiJoinCampRequest")
	proto.RegisterType((*ChuangShiJoinCampResponse)(nil), "pb.ChuangShiJoinCampResponse")
	proto.RegisterType((*ChuangShiCityTianQiSetRequest)(nil), "pb.ChuangShiCityTianQiSetRequest")
	proto.RegisterType((*ChuangShiCityTianQiSetResponse)(nil), "pb.ChuangShiCityTianQiSetResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chuangshi service

type ChuangshiClient interface {
	// 获取创世信息
	GetChuangShiWholeInfo(ctx context.Context, in *ChuangShiWholeInfoRequest, opts ...grpc.CallOption) (*ChuangShiWholeInfoResponse, error)
	// 神王报名
	ShenWangSignUp(ctx context.Context, in *ChuangShiShenWangSignUpRequest, opts ...grpc.CallOption) (*ChuangShiShenWangSignUpResponse, error)
	// 神王投票
	ShenWangVote(ctx context.Context, in *ChuangShiShenWangVoteRequest, opts ...grpc.CallOption) (*ChuangShiShenWangVoteResponse, error)
	// 任命
	CityRenMing(ctx context.Context, in *ChuangShiCityRenMingRequest, opts ...grpc.CallOption) (*ChuangShiCityRenMingResponse, error)
	// 城池工资分配
	CityPaySchedule(ctx context.Context, in *ChuangShiCityPayScheduleRequest, opts ...grpc.CallOption) (*ChuangShiCityPayScheduleResponse, error)
	// 阵营工资分配
	CampPaySchedule(ctx context.Context, in *ChuangShiCampPayScheduleRequest, opts ...grpc.CallOption) (*ChuangShiCampPayScheduleResponse, error)
	// 阵营工资领取
	CampPayReceive(ctx context.Context, in *ChuangShiCampPayReceiveRequest, opts ...grpc.CallOption) (*ChuangShiCampPayReceiveResponse, error)
	// 城池建设
	CityJianShe(ctx context.Context, in *ChuangShiCityJianSheRequest, opts ...grpc.CallOption) (*ChuangShiCityJianSheResponse, error)
	// 设置攻城目标
	GongChengTargetFuShu(ctx context.Context, in *ChuangShiGongChengTargetRequest, opts ...grpc.CallOption) (*ChuangShiGongChengTargetResponse, error)
	// 加入阵营
	JoinCamp(ctx context.Context, in *ChuangShiJoinCampRequest, opts ...grpc.CallOption) (*ChuangShiJoinCampResponse, error)
	// 城池天气设置
	CityTianQiSet(ctx context.Context, in *ChuangShiCityTianQiSetRequest, opts ...grpc.CallOption) (*ChuangShiCityTianQiSetResponse, error)
}

type chuangshiClient struct {
	cc *grpc.ClientConn
}

func NewChuangshiClient(cc *grpc.ClientConn) ChuangshiClient {
	return &chuangshiClient{cc}
}

func (c *chuangshiClient) GetChuangShiWholeInfo(ctx context.Context, in *ChuangShiWholeInfoRequest, opts ...grpc.CallOption) (*ChuangShiWholeInfoResponse, error) {
	out := new(ChuangShiWholeInfoResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/GetChuangShiWholeInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) ShenWangSignUp(ctx context.Context, in *ChuangShiShenWangSignUpRequest, opts ...grpc.CallOption) (*ChuangShiShenWangSignUpResponse, error) {
	out := new(ChuangShiShenWangSignUpResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/ShenWangSignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) ShenWangVote(ctx context.Context, in *ChuangShiShenWangVoteRequest, opts ...grpc.CallOption) (*ChuangShiShenWangVoteResponse, error) {
	out := new(ChuangShiShenWangVoteResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/ShenWangVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) CityRenMing(ctx context.Context, in *ChuangShiCityRenMingRequest, opts ...grpc.CallOption) (*ChuangShiCityRenMingResponse, error) {
	out := new(ChuangShiCityRenMingResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/CityRenMing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) CityPaySchedule(ctx context.Context, in *ChuangShiCityPayScheduleRequest, opts ...grpc.CallOption) (*ChuangShiCityPayScheduleResponse, error) {
	out := new(ChuangShiCityPayScheduleResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/CityPaySchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) CampPaySchedule(ctx context.Context, in *ChuangShiCampPayScheduleRequest, opts ...grpc.CallOption) (*ChuangShiCampPayScheduleResponse, error) {
	out := new(ChuangShiCampPayScheduleResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/CampPaySchedule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) CampPayReceive(ctx context.Context, in *ChuangShiCampPayReceiveRequest, opts ...grpc.CallOption) (*ChuangShiCampPayReceiveResponse, error) {
	out := new(ChuangShiCampPayReceiveResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/CampPayReceive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) CityJianShe(ctx context.Context, in *ChuangShiCityJianSheRequest, opts ...grpc.CallOption) (*ChuangShiCityJianSheResponse, error) {
	out := new(ChuangShiCityJianSheResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/CityJianShe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) GongChengTargetFuShu(ctx context.Context, in *ChuangShiGongChengTargetRequest, opts ...grpc.CallOption) (*ChuangShiGongChengTargetResponse, error) {
	out := new(ChuangShiGongChengTargetResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/GongChengTargetFuShu", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) JoinCamp(ctx context.Context, in *ChuangShiJoinCampRequest, opts ...grpc.CallOption) (*ChuangShiJoinCampResponse, error) {
	out := new(ChuangShiJoinCampResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/JoinCamp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chuangshiClient) CityTianQiSet(ctx context.Context, in *ChuangShiCityTianQiSetRequest, opts ...grpc.CallOption) (*ChuangShiCityTianQiSetResponse, error) {
	out := new(ChuangShiCityTianQiSetResponse)
	err := grpc.Invoke(ctx, "/pb.Chuangshi/CityTianQiSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chuangshi service

type ChuangshiServer interface {
	// 获取创世信息
	GetChuangShiWholeInfo(context.Context, *ChuangShiWholeInfoRequest) (*ChuangShiWholeInfoResponse, error)
	// 神王报名
	ShenWangSignUp(context.Context, *ChuangShiShenWangSignUpRequest) (*ChuangShiShenWangSignUpResponse, error)
	// 神王投票
	ShenWangVote(context.Context, *ChuangShiShenWangVoteRequest) (*ChuangShiShenWangVoteResponse, error)
	// 任命
	CityRenMing(context.Context, *ChuangShiCityRenMingRequest) (*ChuangShiCityRenMingResponse, error)
	// 城池工资分配
	CityPaySchedule(context.Context, *ChuangShiCityPayScheduleRequest) (*ChuangShiCityPayScheduleResponse, error)
	// 阵营工资分配
	CampPaySchedule(context.Context, *ChuangShiCampPayScheduleRequest) (*ChuangShiCampPayScheduleResponse, error)
	// 阵营工资领取
	CampPayReceive(context.Context, *ChuangShiCampPayReceiveRequest) (*ChuangShiCampPayReceiveResponse, error)
	// 城池建设
	CityJianShe(context.Context, *ChuangShiCityJianSheRequest) (*ChuangShiCityJianSheResponse, error)
	// 设置攻城目标
	GongChengTargetFuShu(context.Context, *ChuangShiGongChengTargetRequest) (*ChuangShiGongChengTargetResponse, error)
	// 加入阵营
	JoinCamp(context.Context, *ChuangShiJoinCampRequest) (*ChuangShiJoinCampResponse, error)
	// 城池天气设置
	CityTianQiSet(context.Context, *ChuangShiCityTianQiSetRequest) (*ChuangShiCityTianQiSetResponse, error)
}

func RegisterChuangshiServer(s *grpc.Server, srv ChuangshiServer) {
	s.RegisterService(&_Chuangshi_serviceDesc, srv)
}

func _Chuangshi_GetChuangShiWholeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiWholeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).GetChuangShiWholeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/GetChuangShiWholeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).GetChuangShiWholeInfo(ctx, req.(*ChuangShiWholeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_ShenWangSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiShenWangSignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).ShenWangSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/ShenWangSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).ShenWangSignUp(ctx, req.(*ChuangShiShenWangSignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_ShenWangVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiShenWangVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).ShenWangVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/ShenWangVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).ShenWangVote(ctx, req.(*ChuangShiShenWangVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_CityRenMing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiCityRenMingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).CityRenMing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/CityRenMing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).CityRenMing(ctx, req.(*ChuangShiCityRenMingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_CityPaySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiCityPayScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).CityPaySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/CityPaySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).CityPaySchedule(ctx, req.(*ChuangShiCityPayScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_CampPaySchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiCampPayScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).CampPaySchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/CampPaySchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).CampPaySchedule(ctx, req.(*ChuangShiCampPayScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_CampPayReceive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiCampPayReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).CampPayReceive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/CampPayReceive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).CampPayReceive(ctx, req.(*ChuangShiCampPayReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_CityJianShe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiCityJianSheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).CityJianShe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/CityJianShe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).CityJianShe(ctx, req.(*ChuangShiCityJianSheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_GongChengTargetFuShu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiGongChengTargetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).GongChengTargetFuShu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/GongChengTargetFuShu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).GongChengTargetFuShu(ctx, req.(*ChuangShiGongChengTargetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_JoinCamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiJoinCampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).JoinCamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/JoinCamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).JoinCamp(ctx, req.(*ChuangShiJoinCampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chuangshi_CityTianQiSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChuangShiCityTianQiSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChuangshiServer).CityTianQiSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Chuangshi/CityTianQiSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChuangshiServer).CityTianQiSet(ctx, req.(*ChuangShiCityTianQiSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chuangshi_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Chuangshi",
	HandlerType: (*ChuangshiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChuangShiWholeInfo",
			Handler:    _Chuangshi_GetChuangShiWholeInfo_Handler,
		},
		{
			MethodName: "ShenWangSignUp",
			Handler:    _Chuangshi_ShenWangSignUp_Handler,
		},
		{
			MethodName: "ShenWangVote",
			Handler:    _Chuangshi_ShenWangVote_Handler,
		},
		{
			MethodName: "CityRenMing",
			Handler:    _Chuangshi_CityRenMing_Handler,
		},
		{
			MethodName: "CityPaySchedule",
			Handler:    _Chuangshi_CityPaySchedule_Handler,
		},
		{
			MethodName: "CampPaySchedule",
			Handler:    _Chuangshi_CampPaySchedule_Handler,
		},
		{
			MethodName: "CampPayReceive",
			Handler:    _Chuangshi_CampPayReceive_Handler,
		},
		{
			MethodName: "CityJianShe",
			Handler:    _Chuangshi_CityJianShe_Handler,
		},
		{
			MethodName: "GongChengTargetFuShu",
			Handler:    _Chuangshi_GongChengTargetFuShu_Handler,
		},
		{
			MethodName: "JoinCamp",
			Handler:    _Chuangshi_JoinCamp_Handler,
		},
		{
			MethodName: "CityTianQiSet",
			Handler:    _Chuangshi_CityTianQiSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chuangshi.proto",
}

func init() { proto.RegisterFile("chuangshi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0xdb, 0x6e, 0x1b, 0x45,
	0x18, 0xee, 0x7a, 0xe3, 0xc4, 0xfe, 0x93, 0x36, 0x61, 0x1a, 0x60, 0x71, 0x93, 0xd4, 0x9d, 0x14,
	0x94, 0x0b, 0x08, 0x6a, 0x22, 0x54, 0x84, 0x8a, 0xb8, 0xb0, 0x44, 0xeb, 0xd2, 0x54, 0x65, 0x9d,
	0xd0, 0x4a, 0x48, 0x45, 0x1b, 0x7b, 0x62, 0x4f, 0xe3, 0x3d, 0xd4, 0xbb, 0x36, 0xcd, 0x3d, 0xdc,
	0x73, 0xcf, 0x0b, 0x20, 0x21, 0x1e, 0x87, 0x77, 0xe0, 0x31, 0xd0, 0xcc, 0xec, 0x8e, 0x67, 0x66,
	0x0f, 0x76, 0xe0, 0x6e, 0xff, 0x99, 0xff, 0xf8, 0xfd, 0xa7, 0xb1, 0x61, 0xb3, 0x3f, 0x9a, 0x7a,
	0xc1, 0x30, 0x1e, 0xd1, 0xc3, 0x68, 0x12, 0x26, 0x21, 0xaa, 0x45, 0xe7, 0xf8, 0xf7, 0x1a, 0xdc,
	0xee, 0xf0, 0xf3, 0xde, 0x88, 0x9e, 0x10, 0xff, 0x9c, 0x4c, 0xba, 0xc1, 0x45, 0x88, 0x5a, 0xd0,
	0x88, 0xc6, 0x5e, 0x72, 0x11, 0x4e, 0x7c, 0xc7, 0x6a, 0x5b, 0x07, 0x75, 0x57, 0xd2, 0xec, 0x2e,
	0x26, 0x93, 0x19, 0x99, 0x74, 0x07, 0x4e, 0x4d, 0xdc, 0x65, 0x74, 0x2a, 0x77, 0xc5, 0xef, 0xec,
	0xb6, 0x75, 0x60, 0xbb, 0x92, 0x46, 0x08, 0x56, 0x02, 0xcf, 0x27, 0xce, 0x4a, 0xdb, 0x3a, 0x68,
	0xba, 0xfc, 0x1b, 0x6d, 0x43, 0xfd, 0x22, 0x9c, 0xf4, 0x89, 0x53, 0xe7, 0xcc, 0x82, 0x40, 0x5b,
	0x60, 0x47, 0x61, 0xec, 0xac, 0x72, 0xe5, 0xec, 0x93, 0xf1, 0x79, 0xe3, 0x17, 0x61, 0xec, 0xac,
	0xf1, 0x33, 0x41, 0x20, 0x0c, 0x1b, 0xde, 0x78, 0x4c, 0xbd, 0xa0, 0x4f, 0x9e, 0x33, 0xcd, 0x0d,
	0xae, 0x59, 0x3b, 0x43, 0x7b, 0x00, 0x19, 0xdd, 0x1d, 0x38, 0x4d, 0x6e, 0x46, 0x39, 0x61, 0x1e,
	0xf7, 0x3d, 0x3f, 0x3a, 0xbd, 0x8a, 0x88, 0x03, 0x22, 0x9a, 0x8c, 0xc6, 0x4f, 0x60, 0xe3, 0x29,
	0xf5, 0x82, 0xde, 0x88, 0xf4, 0x2e, 0xe9, 0x78, 0xcc, 0xbc, 0x18, 0x93, 0x19, 0x19, 0xa7, 0x90,
	0x08, 0x82, 0x7b, 0xd1, 0x4f, 0xe8, 0xcc, 0x4b, 0xc8, 0x29, 0xf5, 0x09, 0xc7, 0xc4, 0x76, 0xb5,
	0x33, 0xfc, 0xa7, 0x05, 0xeb, 0x1d, 0x9a, 0x5c, 0xa5, 0xea, 0x50, 0x1b, 0xd6, 0xdf, 0x88, 0x4f,
	0x6e, 0x58, 0xe8, 0x53, 0x8f, 0xe6, 0xb6, 0x6a, 0xaa, 0xad, 0x2d, 0xb0, 0xc9, 0xbb, 0x88, 0x43,
	0x5b, 0x77, 0xd9, 0x27, 0xba, 0x0f, 0x37, 0x63, 0xe6, 0xdc, 0x33, 0x76, 0xdf, 0x23, 0x09, 0x87,
	0xb7, 0xee, 0xea, 0x87, 0xe8, 0x53, 0x68, 0xf0, 0x83, 0x13, 0x2f, 0x72, 0xea, 0x6d, 0xfb, 0x60,
	0xfd, 0x68, 0xeb, 0x30, 0x3a, 0x3f, 0x54, 0xa3, 0x73, 0x25, 0x07, 0xfe, 0xab, 0x06, 0x37, 0x65,
	0x55, 0x30, 0xb7, 0x59, 0xee, 0x18, 0x2a, 0xa9, 0xa3, 0xfc, 0x9b, 0x23, 0x47, 0x93, 0x2b, 0x1e,
	0x40, 0x5a, 0x07, 0x19, 0xcd, 0xbc, 0xa7, 0xc1, 0x80, 0xbc, 0x4b, 0x3d, 0x15, 0x04, 0x7a, 0x08,
	0x70, 0x49, 0x83, 0xa1, 0xa8, 0x33, 0xee, 0xe8, 0xfa, 0xd1, 0x87, 0xcc, 0x8f, 0x82, 0x12, 0x74,
	0x15, 0x56, 0xf4, 0x01, 0xac, 0x32, 0xd5, 0xdd, 0x41, 0x5a, 0x27, 0x29, 0xc5, 0xcc, 0xbc, 0xa1,
	0x17, 0x24, 0xe0, 0xa5, 0x62, 0xbb, 0x82, 0x60, 0x8e, 0x0d, 0xa8, 0xe7, 0x87, 0xc1, 0x40, 0xd4,
	0x8b, 0xed, 0x4a, 0x1a, 0x3d, 0x90, 0xc0, 0x3f, 0xa3, 0x71, 0xe2, 0x34, 0x38, 0x16, 0x9b, 0xdc,
	0x87, 0x79, 0x7a, 0x5c, 0x95, 0x87, 0xe5, 0x2a, 0x9c, 0xd0, 0x61, 0xe0, 0x8d, 0x3b, 0x0c, 0x82,
	0xa6, 0xc8, 0x95, 0x72, 0x84, 0x5f, 0x2b, 0x70, 0xfd, 0x10, 0x26, 0x04, 0xed, 0x40, 0x33, 0xa1,
	0xfd, 0x4b, 0x92, 0x3c, 0x9f, 0x66, 0xfd, 0x33, 0x3f, 0x40, 0x9f, 0xc3, 0xaa, 0x2f, 0x20, 0xa8,
	0x55, 0x43, 0x90, 0xb2, 0xe1, 0x2e, 0x6c, 0xca, 0xeb, 0x53, 0x6f, 0x32, 0x24, 0x89, 0x56, 0xb6,
	0x96, 0x5e, 0xb6, 0x59, 0x62, 0x78, 0x4b, 0x88, 0x62, 0x94, 0x34, 0xfe, 0xdb, 0x56, 0x53, 0x9b,
	0xa5, 0xb1, 0x4c, 0x93, 0x9e, 0xb0, 0xda, 0xf2, 0x09, 0xdb, 0x86, 0x7a, 0x14, 0xfe, 0x4c, 0x26,
	0xe9, 0x10, 0x10, 0x04, 0x3a, 0x86, 0x46, 0x4c, 0x87, 0x01, 0x47, 0x7e, 0x85, 0x23, 0x5f, 0xaa,
	0x4c, 0x32, 0xa2, 0xcf, 0xa0, 0x31, 0x0b, 0x13, 0x91, 0x2e, 0x51, 0xba, 0xef, 0x69, 0x42, 0x0c,
	0x70, 0x57, 0xb2, 0x30, 0x97, 0x05, 0x6a, 0x5c, 0x60, 0xb5, 0xda, 0x8a, 0xc2, 0xca, 0xec, 0x30,
	0x94, 0xb8, 0xd8, 0x5a, 0x81, 0x1d, 0x56, 0x1f, 0xae, 0x64, 0x41, 0xc7, 0x00, 0x09, 0x4f, 0x85,
	0x52, 0x47, 0xb7, 0x35, 0x01, 0x91, 0x29, 0x57, 0x61, 0x43, 0x9f, 0xc0, 0xad, 0x78, 0x44, 0x82,
	0x97, 0x8c, 0x21, 0xf1, 0x92, 0x69, 0x9c, 0x56, 0x93, 0x71, 0x3a, 0xaf, 0x6b, 0x28, 0xab, 0xeb,
	0x75, 0xbd, 0xae, 0xf1, 0x1d, 0xf8, 0x48, 0x1a, 0x7e, 0x39, 0x0a, 0xc7, 0x84, 0xc7, 0x47, 0xde,
	0x4e, 0x49, 0x9c, 0xe0, 0xef, 0xa0, 0x55, 0x74, 0x19, 0x47, 0x61, 0x10, 0x13, 0x1e, 0xb8, 0xe7,
	0x47, 0x3c, 0x0e, 0xab, 0x28, 0x70, 0xcf, 0x8f, 0x5c, 0xc9, 0x82, 0x7f, 0xb3, 0x60, 0x4f, 0xde,
	0xf5, 0x32, 0xbf, 0xe9, 0x30, 0x38, 0x8b, 0x52, 0x7b, 0xda, 0x16, 0xb0, 0x8c, 0x2d, 0xa0, 0x6e,
	0x96, 0x5a, 0xc5, 0x66, 0xb1, 0xf3, 0x9b, 0x45, 0x96, 0xe9, 0x8a, 0x31, 0xa7, 0xff, 0xb0, 0xe0,
	0x6e, 0xa9, 0x4b, 0x69, 0x94, 0x55, 0x3e, 0x39, 0xb0, 0x16, 0x4f, 0xfb, 0x7d, 0x12, 0xc7, 0xdc,
	0xa5, 0x86, 0x9b, 0x91, 0x5a, 0xc5, 0xda, 0xcb, 0x56, 0x6c, 0x95, 0xab, 0x09, 0xec, 0xe4, 0x3c,
	0xe5, 0x15, 0xbc, 0x04, 0x74, 0x3b, 0xd0, 0x8c, 0xa7, 0x51, 0x14, 0x4e, 0x92, 0x74, 0xf3, 0xda,
	0xee, 0xfc, 0x40, 0xb3, 0x6a, 0x1b, 0x56, 0x7f, 0xb1, 0x60, 0xb7, 0xc4, 0x6c, 0x0a, 0x8f, 0x02,
	0x81, 0xa5, 0x43, 0xa0, 0xf6, 0x5f, 0x6d, 0x71, 0xff, 0x55, 0xb9, 0xf1, 0x16, 0xee, 0xe8, 0xed,
	0x44, 0x82, 0x13, 0x1a, 0x0c, 0x95, 0xd8, 0x45, 0x3f, 0xce, 0x63, 0xcf, 0x68, 0x65, 0x03, 0xd4,
	0xb4, 0x0d, 0xb0, 0x07, 0x70, 0x4e, 0x3a, 0xa1, 0xef, 0xd3, 0x44, 0x3e, 0x39, 0x94, 0x13, 0xfc,
	0xa5, 0x82, 0xb7, 0x66, 0x72, 0x51, 0xdc, 0xf8, 0x6b, 0xd8, 0x64, 0x02, 0x2f, 0xbc, 0xab, 0x5e,
	0x7f, 0x44, 0x06, 0xd3, 0x31, 0x99, 0xbf, 0x42, 0x2c, 0xf5, 0x15, 0xb2, 0x0d, 0xf5, 0x89, 0x97,
	0xd0, 0x30, 0xdb, 0xd4, 0x9c, 0xc0, 0x33, 0xa5, 0x24, 0x0d, 0x3d, 0x59, 0xbc, 0x0f, 0x61, 0x23,
	0x4e, 0x8f, 0x94, 0xe6, 0xbb, 0x9d, 0x2d, 0x23, 0x55, 0x42, 0x63, 0xd4, 0x8a, 0xa4, 0xa6, 0x17,
	0x09, 0xee, 0x42, 0xbb, 0xdc, 0x6e, 0x1a, 0xf4, 0xc7, 0xca, 0x36, 0x2f, 0xec, 0x76, 0x7e, 0x8d,
	0xbf, 0x81, 0x4d, 0x46, 0xa9, 0x08, 0xcc, 0xd3, 0x60, 0x99, 0x8b, 0x78, 0x11, 0x06, 0xba, 0xa6,
	0x65, 0x30, 0x30, 0x24, 0xfe, 0x23, 0x06, 0xa6, 0xdd, 0xeb, 0x61, 0xf0, 0x48, 0x19, 0x76, 0xa9,
	0x2a, 0x97, 0xf4, 0x09, 0x9d, 0x15, 0x76, 0xac, 0xe9, 0xc8, 0x93, 0x3c, 0x00, 0x52, 0xfa, 0x7a,
	0x7e, 0xfc, 0x6a, 0x19, 0xbd, 0x93, 0x3d, 0x55, 0x96, 0x98, 0x1b, 0x5b, 0x60, 0x07, 0xd3, 0x6c,
	0xda, 0xb2, 0x4f, 0x25, 0x8d, 0xb6, 0x96, 0x46, 0xe3, 0x59, 0xba, 0x92, 0x7b, 0x96, 0xe2, 0x9f,
	0x8c, 0x7e, 0x92, 0x6e, 0x5c, 0x2b, 0x9c, 0xf2, 0x89, 0x8b, 0xcf, 0x14, 0xc8, 0x1e, 0x87, 0xc1,
	0xb0, 0x33, 0x22, 0xc1, 0x30, 0x5d, 0xa5, 0x4b, 0xc4, 0x5a, 0x32, 0x27, 0xf0, 0x23, 0xa5, 0x24,
	0x72, 0x6a, 0x17, 0xce, 0x02, 0x0a, 0x8e, 0x94, 0x7e, 0x1a, 0xd2, 0x80, 0x47, 0x32, 0xf7, 0xa6,
	0xf4, 0xfd, 0xf4, 0x00, 0xd6, 0x7c, 0xe2, 0x2b, 0xa3, 0xb3, 0x74, 0x7b, 0x64, 0x7c, 0xf8, 0x0b,
	0x65, 0x91, 0xcf, 0x4d, 0x2d, 0xe1, 0xe1, 0xae, 0x96, 0x97, 0x53, 0xea, 0x05, 0xdf, 0xd3, 0xde,
	0xff, 0x02, 0x6d, 0xfe, 0x1b, 0xc4, 0x56, 0x7e, 0x83, 0xe0, 0xaf, 0xd4, 0x96, 0xd0, 0x4d, 0x2d,
	0x72, 0xf3, 0xe8, 0x9f, 0x35, 0x68, 0x76, 0xb2, 0xdf, 0xa1, 0xe8, 0x15, 0xbc, 0xff, 0x98, 0x24,
	0xf9, 0xa7, 0x09, 0xda, 0xd5, 0x60, 0x32, 0xdf, 0x33, 0xad, 0xbd, 0xb2, 0x6b, 0x61, 0x1f, 0xdf,
	0x40, 0x3f, 0xc2, 0x2d, 0xfd, 0x1d, 0x80, 0xb0, 0x26, 0x53, 0xf8, 0x6e, 0x69, 0xed, 0x57, 0xf2,
	0x48, 0xe5, 0x67, 0xb0, 0xa1, 0xee, 0x50, 0xd4, 0x2e, 0x14, 0x53, 0xb6, 0x7a, 0xeb, 0x5e, 0x05,
	0x87, 0x54, 0xeb, 0x8a, 0x9f, 0x88, 0xe9, 0x86, 0x42, 0x77, 0xf3, 0xaf, 0x4f, 0x6d, 0x5d, 0xb6,
	0xda, 0xe5, 0x0c, 0x52, 0xe7, 0xeb, 0xfc, 0x12, 0xdb, 0xcf, 0x89, 0xe5, 0xc7, 0x72, 0xeb, 0x7e,
	0x35, 0x93, 0xa6, 0xdf, 0x58, 0x11, 0xfb, 0xb9, 0x9e, 0x5f, 0xac, 0xbf, 0x78, 0x46, 0x8b, 0x3c,
	0xea, 0x73, 0xd3, 0xc8, 0x63, 0xe1, 0x48, 0x6e, 0xed, 0x57, 0xf2, 0x98, 0x80, 0x67, 0xbf, 0xc9,
	0xf3, 0x80, 0xeb, 0x33, 0xb6, 0x00, 0x70, 0x63, 0xfa, 0xe1, 0x1b, 0xa8, 0x0f, 0xdb, 0xc6, 0x78,
	0xf9, 0x76, 0xda, 0x1b, 0x4d, 0x0d, 0x54, 0x8a, 0x07, 0x9b, 0x81, 0x4a, 0xc9, 0x98, 0xc2, 0x37,
	0x50, 0x17, 0x1a, 0xd9, 0x68, 0x40, 0x3b, 0x9a, 0x8c, 0x31, 0x9c, 0x5a, 0xbb, 0x25, 0xb7, 0x52,
	0xd5, 0x2b, 0xb8, 0xa9, 0xf5, 0x30, 0xba, 0x97, 0x0b, 0xd2, 0x1c, 0x25, 0x2d, 0x5c, 0xc5, 0x92,
	0x69, 0x3e, 0x5f, 0xe5, 0xff, 0x32, 0x1d, 0xff, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xb9, 0x82, 0x80,
	0xc4, 0x78, 0x12, 0x00, 0x00,
}
