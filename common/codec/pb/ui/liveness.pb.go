// Code generated by protoc-gen-go. DO NOT EDIT.
// source: liveness.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type LivenessInfo struct {
	QuestId          *int32 `protobuf:"varint,1,req,name=questId" json:"questId,omitempty"`
	Num              *int32 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *LivenessInfo) Reset()                    { *m = LivenessInfo{} }
func (m *LivenessInfo) String() string            { return proto.CompactTextString(m) }
func (*LivenessInfo) ProtoMessage()               {}
func (*LivenessInfo) Descriptor() ([]byte, []int) { return fileDescriptor63, []int{0} }

func (m *LivenessInfo) GetQuestId() int32 {
	if m != nil && m.QuestId != nil {
		return *m.QuestId
	}
	return 0
}

func (m *LivenessInfo) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type CSLivenessGet struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSLivenessGet) Reset()                    { *m = CSLivenessGet{} }
func (m *CSLivenessGet) String() string            { return proto.CompactTextString(m) }
func (*CSLivenessGet) ProtoMessage()               {}
func (*CSLivenessGet) Descriptor() ([]byte, []int) { return fileDescriptor63, []int{1} }

type SCLivenessGet struct {
	LivenessList     []*LivenessInfo `protobuf:"bytes,1,rep,name=livenessList" json:"livenessList,omitempty"`
	Liveness         *int64          `protobuf:"varint,2,req,name=liveness" json:"liveness,omitempty"`
	OpenBoxList      []int32         `protobuf:"varint,3,rep,name=openBoxList" json:"openBoxList,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SCLivenessGet) Reset()                    { *m = SCLivenessGet{} }
func (m *SCLivenessGet) String() string            { return proto.CompactTextString(m) }
func (*SCLivenessGet) ProtoMessage()               {}
func (*SCLivenessGet) Descriptor() ([]byte, []int) { return fileDescriptor63, []int{2} }

func (m *SCLivenessGet) GetLivenessList() []*LivenessInfo {
	if m != nil {
		return m.LivenessList
	}
	return nil
}

func (m *SCLivenessGet) GetLiveness() int64 {
	if m != nil && m.Liveness != nil {
		return *m.Liveness
	}
	return 0
}

func (m *SCLivenessGet) GetOpenBoxList() []int32 {
	if m != nil {
		return m.OpenBoxList
	}
	return nil
}

type SCLivenessNumChanged struct {
	LivenessInfo     *LivenessInfo `protobuf:"bytes,1,req,name=LivenessInfo" json:"LivenessInfo,omitempty"`
	Liveness         *int64        `protobuf:"varint,2,req,name=liveness" json:"liveness,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *SCLivenessNumChanged) Reset()                    { *m = SCLivenessNumChanged{} }
func (m *SCLivenessNumChanged) String() string            { return proto.CompactTextString(m) }
func (*SCLivenessNumChanged) ProtoMessage()               {}
func (*SCLivenessNumChanged) Descriptor() ([]byte, []int) { return fileDescriptor63, []int{3} }

func (m *SCLivenessNumChanged) GetLivenessInfo() *LivenessInfo {
	if m != nil {
		return m.LivenessInfo
	}
	return nil
}

func (m *SCLivenessNumChanged) GetLiveness() int64 {
	if m != nil && m.Liveness != nil {
		return *m.Liveness
	}
	return 0
}

type CSLivenessOpen struct {
	BoxId            *int32 `protobuf:"varint,1,req,name=boxId" json:"boxId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSLivenessOpen) Reset()                    { *m = CSLivenessOpen{} }
func (m *CSLivenessOpen) String() string            { return proto.CompactTextString(m) }
func (*CSLivenessOpen) ProtoMessage()               {}
func (*CSLivenessOpen) Descriptor() ([]byte, []int) { return fileDescriptor63, []int{4} }

func (m *CSLivenessOpen) GetBoxId() int32 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

type SCLivenessOpen struct {
	Liveness         *int64  `protobuf:"varint,1,req,name=liveness" json:"liveness,omitempty"`
	OpenBoxList      []int32 `protobuf:"varint,2,rep,name=openBoxList" json:"openBoxList,omitempty"`
	BoxId            *int32  `protobuf:"varint,3,req,name=boxId" json:"boxId,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SCLivenessOpen) Reset()                    { *m = SCLivenessOpen{} }
func (m *SCLivenessOpen) String() string            { return proto.CompactTextString(m) }
func (*SCLivenessOpen) ProtoMessage()               {}
func (*SCLivenessOpen) Descriptor() ([]byte, []int) { return fileDescriptor63, []int{5} }

func (m *SCLivenessOpen) GetLiveness() int64 {
	if m != nil && m.Liveness != nil {
		return *m.Liveness
	}
	return 0
}

func (m *SCLivenessOpen) GetOpenBoxList() []int32 {
	if m != nil {
		return m.OpenBoxList
	}
	return nil
}

func (m *SCLivenessOpen) GetBoxId() int32 {
	if m != nil && m.BoxId != nil {
		return *m.BoxId
	}
	return 0
}

func init() {
	proto.RegisterType((*LivenessInfo)(nil), "ui.LivenessInfo")
	proto.RegisterType((*CSLivenessGet)(nil), "ui.CSLivenessGet")
	proto.RegisterType((*SCLivenessGet)(nil), "ui.SCLivenessGet")
	proto.RegisterType((*SCLivenessNumChanged)(nil), "ui.SCLivenessNumChanged")
	proto.RegisterType((*CSLivenessOpen)(nil), "ui.CSLivenessOpen")
	proto.RegisterType((*SCLivenessOpen)(nil), "ui.SCLivenessOpen")
}

func init() { proto.RegisterFile("liveness.proto", fileDescriptor63) }

var fileDescriptor63 = []byte{
	// 219 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8f, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x69, 0x42, 0x51, 0x6e, 0x7f, 0x89, 0x2e, 0xba, 0xb3, 0x64, 0x21, 0x5d, 0x48, 0x17,
	0x3e, 0x82, 0x05, 0xa5, 0x50, 0x54, 0xe8, 0x5e, 0x50, 0x1a, 0x35, 0x60, 0x93, 0x3a, 0x49, 0x86,
	0x3e, 0xfe, 0x90, 0x30, 0x21, 0x1d, 0x98, 0xc5, 0x2c, 0x73, 0x39, 0xf9, 0xbe, 0x73, 0x20, 0xff,
	0xe3, 0x7b, 0x26, 0x98, 0x52, 0xed, 0xb2, 0x93, 0x5a, 0x12, 0x64, 0x38, 0x7d, 0x80, 0x74, 0x38,
	0x5e, 0x7b, 0xf1, 0x2d, 0x49, 0x01, 0x57, 0xff, 0x86, 0x29, 0xdd, 0x4f, 0x55, 0x54, 0xa3, 0x26,
	0x26, 0x09, 0x60, 0x61, 0xe6, 0x0a, 0xd9, 0x07, 0x2d, 0x20, 0xeb, 0x46, 0x9f, 0x7f, 0x61, 0x9a,
	0x7e, 0x40, 0x36, 0x76, 0x9b, 0x03, 0xb9, 0x87, 0xd4, 0x5b, 0x06, 0xae, 0x74, 0x15, 0xd5, 0xb8,
	0x49, 0x1e, 0xcb, 0xd6, 0xf0, 0xf6, 0xc4, 0x53, 0xc2, 0xb5, 0xcf, 0x39, 0x36, 0x26, 0x37, 0x90,
	0xc8, 0x85, 0x89, 0x27, 0xb9, 0xba, 0x8f, 0xb8, 0xc6, 0x4d, 0x4c, 0xdf, 0xe1, 0x36, 0xf0, 0x5f,
	0xcd, 0xdc, 0xfd, 0x7e, 0x8a, 0x1f, 0x36, 0x59, 0xcd, 0x16, 0xe7, 0xba, 0x5e, 0xa4, 0xa1, 0x77,
	0x90, 0x87, 0x09, 0x6f, 0x0b, 0x13, 0x24, 0x83, 0xf8, 0x4b, 0xae, 0x7e, 0x30, 0x7d, 0x86, 0x3c,
	0x28, 0x5d, 0x60, 0x0b, 0x89, 0xce, 0x75, 0x45, 0xb6, 0x6b, 0xe0, 0x60, 0xcb, 0x39, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xe2, 0x6c, 0x43, 0x2a, 0x6e, 0x01, 0x00, 0x00,
}
