// Code generated by protoc-gen-go. DO NOT EDIT.
// source: forbid_manage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 获取封禁ip列表
type ForbidIpListRequest struct {
}

func (m *ForbidIpListRequest) Reset()                    { *m = ForbidIpListRequest{} }
func (m *ForbidIpListRequest) String() string            { return proto.CompactTextString(m) }
func (*ForbidIpListRequest) ProtoMessage()               {}
func (*ForbidIpListRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type ForbidIpListResponse struct {
	IpList []string `protobuf:"bytes,1,rep,name=ipList" json:"ipList,omitempty"`
}

func (m *ForbidIpListResponse) Reset()                    { *m = ForbidIpListResponse{} }
func (m *ForbidIpListResponse) String() string            { return proto.CompactTextString(m) }
func (*ForbidIpListResponse) ProtoMessage()               {}
func (*ForbidIpListResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ForbidIpListResponse) GetIpList() []string {
	if m != nil {
		return m.IpList
	}
	return nil
}

// 查找封禁ip
type ForbidIpSearchRequest struct {
	Ip string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
}

func (m *ForbidIpSearchRequest) Reset()                    { *m = ForbidIpSearchRequest{} }
func (m *ForbidIpSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*ForbidIpSearchRequest) ProtoMessage()               {}
func (*ForbidIpSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ForbidIpSearchRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ForbidIpSearchResponse struct {
	Ip     string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Forbid bool   `protobuf:"varint,2,opt,name=forbid" json:"forbid,omitempty"`
}

func (m *ForbidIpSearchResponse) Reset()                    { *m = ForbidIpSearchResponse{} }
func (m *ForbidIpSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*ForbidIpSearchResponse) ProtoMessage()               {}
func (*ForbidIpSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *ForbidIpSearchResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ForbidIpSearchResponse) GetForbid() bool {
	if m != nil {
		return m.Forbid
	}
	return false
}

// 封禁ip
type ForbidIpRequest struct {
	Ip     string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Forbid bool   `protobuf:"varint,2,opt,name=forbid" json:"forbid,omitempty"`
}

func (m *ForbidIpRequest) Reset()                    { *m = ForbidIpRequest{} }
func (m *ForbidIpRequest) String() string            { return proto.CompactTextString(m) }
func (*ForbidIpRequest) ProtoMessage()               {}
func (*ForbidIpRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ForbidIpRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ForbidIpRequest) GetForbid() bool {
	if m != nil {
		return m.Forbid
	}
	return false
}

type ForbidIpResponse struct {
	Ip     string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Forbid bool   `protobuf:"varint,2,opt,name=forbid" json:"forbid,omitempty"`
}

func (m *ForbidIpResponse) Reset()                    { *m = ForbidIpResponse{} }
func (m *ForbidIpResponse) String() string            { return proto.CompactTextString(m) }
func (*ForbidIpResponse) ProtoMessage()               {}
func (*ForbidIpResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ForbidIpResponse) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ForbidIpResponse) GetForbid() bool {
	if m != nil {
		return m.Forbid
	}
	return false
}

// 封禁用户
type ForbidUserRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Forbid bool  `protobuf:"varint,2,opt,name=forbid" json:"forbid,omitempty"`
}

func (m *ForbidUserRequest) Reset()                    { *m = ForbidUserRequest{} }
func (m *ForbidUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ForbidUserRequest) ProtoMessage()               {}
func (*ForbidUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ForbidUserRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ForbidUserRequest) GetForbid() bool {
	if m != nil {
		return m.Forbid
	}
	return false
}

type ForbidUserResponse struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Forbid bool  `protobuf:"varint,2,opt,name=forbid" json:"forbid,omitempty"`
}

func (m *ForbidUserResponse) Reset()                    { *m = ForbidUserResponse{} }
func (m *ForbidUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ForbidUserResponse) ProtoMessage()               {}
func (*ForbidUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ForbidUserResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ForbidUserResponse) GetForbid() bool {
	if m != nil {
		return m.Forbid
	}
	return false
}

// 封禁用户
type ForbidUserSearchRequest struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
}

func (m *ForbidUserSearchRequest) Reset()                    { *m = ForbidUserSearchRequest{} }
func (m *ForbidUserSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*ForbidUserSearchRequest) ProtoMessage()               {}
func (*ForbidUserSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *ForbidUserSearchRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type ForbidUserSearchResponse struct {
	UserId int64 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	Forbid bool  `protobuf:"varint,2,opt,name=forbid" json:"forbid,omitempty"`
}

func (m *ForbidUserSearchResponse) Reset()                    { *m = ForbidUserSearchResponse{} }
func (m *ForbidUserSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*ForbidUserSearchResponse) ProtoMessage()               {}
func (*ForbidUserSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *ForbidUserSearchResponse) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ForbidUserSearchResponse) GetForbid() bool {
	if m != nil {
		return m.Forbid
	}
	return false
}

func init() {
	proto.RegisterType((*ForbidIpListRequest)(nil), "pb.ForbidIpListRequest")
	proto.RegisterType((*ForbidIpListResponse)(nil), "pb.ForbidIpListResponse")
	proto.RegisterType((*ForbidIpSearchRequest)(nil), "pb.ForbidIpSearchRequest")
	proto.RegisterType((*ForbidIpSearchResponse)(nil), "pb.ForbidIpSearchResponse")
	proto.RegisterType((*ForbidIpRequest)(nil), "pb.ForbidIpRequest")
	proto.RegisterType((*ForbidIpResponse)(nil), "pb.ForbidIpResponse")
	proto.RegisterType((*ForbidUserRequest)(nil), "pb.ForbidUserRequest")
	proto.RegisterType((*ForbidUserResponse)(nil), "pb.ForbidUserResponse")
	proto.RegisterType((*ForbidUserSearchRequest)(nil), "pb.ForbidUserSearchRequest")
	proto.RegisterType((*ForbidUserSearchResponse)(nil), "pb.ForbidUserSearchResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ForbidManage service

type ForbidManageClient interface {
	// 获取封禁用ip列表
	GetForbidIpList(ctx context.Context, in *ForbidIpListRequest, opts ...grpc.CallOption) (*ForbidIpListResponse, error)
	// 封禁ip
	ForbidIp(ctx context.Context, in *ForbidIpRequest, opts ...grpc.CallOption) (*ForbidIpResponse, error)
	// 封禁ip
	ForbidSearch(ctx context.Context, in *ForbidIpSearchRequest, opts ...grpc.CallOption) (*ForbidIpSearchResponse, error)
	// 封禁用户
	ForbidUser(ctx context.Context, in *ForbidUserRequest, opts ...grpc.CallOption) (*ForbidUserResponse, error)
	// 封禁用户查找
	ForbidUserSearch(ctx context.Context, in *ForbidUserSearchRequest, opts ...grpc.CallOption) (*ForbidUserSearchResponse, error)
}

type forbidManageClient struct {
	cc *grpc.ClientConn
}

func NewForbidManageClient(cc *grpc.ClientConn) ForbidManageClient {
	return &forbidManageClient{cc}
}

func (c *forbidManageClient) GetForbidIpList(ctx context.Context, in *ForbidIpListRequest, opts ...grpc.CallOption) (*ForbidIpListResponse, error) {
	out := new(ForbidIpListResponse)
	err := grpc.Invoke(ctx, "/pb.ForbidManage/GetForbidIpList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forbidManageClient) ForbidIp(ctx context.Context, in *ForbidIpRequest, opts ...grpc.CallOption) (*ForbidIpResponse, error) {
	out := new(ForbidIpResponse)
	err := grpc.Invoke(ctx, "/pb.ForbidManage/ForbidIp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forbidManageClient) ForbidSearch(ctx context.Context, in *ForbidIpSearchRequest, opts ...grpc.CallOption) (*ForbidIpSearchResponse, error) {
	out := new(ForbidIpSearchResponse)
	err := grpc.Invoke(ctx, "/pb.ForbidManage/ForbidSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forbidManageClient) ForbidUser(ctx context.Context, in *ForbidUserRequest, opts ...grpc.CallOption) (*ForbidUserResponse, error) {
	out := new(ForbidUserResponse)
	err := grpc.Invoke(ctx, "/pb.ForbidManage/ForbidUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forbidManageClient) ForbidUserSearch(ctx context.Context, in *ForbidUserSearchRequest, opts ...grpc.CallOption) (*ForbidUserSearchResponse, error) {
	out := new(ForbidUserSearchResponse)
	err := grpc.Invoke(ctx, "/pb.ForbidManage/ForbidUserSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ForbidManage service

type ForbidManageServer interface {
	// 获取封禁用ip列表
	GetForbidIpList(context.Context, *ForbidIpListRequest) (*ForbidIpListResponse, error)
	// 封禁ip
	ForbidIp(context.Context, *ForbidIpRequest) (*ForbidIpResponse, error)
	// 封禁ip
	ForbidSearch(context.Context, *ForbidIpSearchRequest) (*ForbidIpSearchResponse, error)
	// 封禁用户
	ForbidUser(context.Context, *ForbidUserRequest) (*ForbidUserResponse, error)
	// 封禁用户查找
	ForbidUserSearch(context.Context, *ForbidUserSearchRequest) (*ForbidUserSearchResponse, error)
}

func RegisterForbidManageServer(s *grpc.Server, srv ForbidManageServer) {
	s.RegisterService(&_ForbidManage_serviceDesc, srv)
}

func _ForbidManage_GetForbidIpList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidIpListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForbidManageServer).GetForbidIpList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ForbidManage/GetForbidIpList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForbidManageServer).GetForbidIpList(ctx, req.(*ForbidIpListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForbidManage_ForbidIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidIpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForbidManageServer).ForbidIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ForbidManage/ForbidIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForbidManageServer).ForbidIp(ctx, req.(*ForbidIpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForbidManage_ForbidSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidIpSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForbidManageServer).ForbidSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ForbidManage/ForbidSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForbidManageServer).ForbidSearch(ctx, req.(*ForbidIpSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForbidManage_ForbidUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForbidManageServer).ForbidUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ForbidManage/ForbidUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForbidManageServer).ForbidUser(ctx, req.(*ForbidUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForbidManage_ForbidUserSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForbidUserSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForbidManageServer).ForbidUserSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ForbidManage/ForbidUserSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForbidManageServer).ForbidUserSearch(ctx, req.(*ForbidUserSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForbidManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ForbidManage",
	HandlerType: (*ForbidManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetForbidIpList",
			Handler:    _ForbidManage_GetForbidIpList_Handler,
		},
		{
			MethodName: "ForbidIp",
			Handler:    _ForbidManage_ForbidIp_Handler,
		},
		{
			MethodName: "ForbidSearch",
			Handler:    _ForbidManage_ForbidSearch_Handler,
		},
		{
			MethodName: "ForbidUser",
			Handler:    _ForbidManage_ForbidUser_Handler,
		},
		{
			MethodName: "ForbidUserSearch",
			Handler:    _ForbidManage_ForbidUserSearch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "forbid_manage.proto",
}

func init() { proto.RegisterFile("forbid_manage.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0x85, 0x26, 0xa4, 0x9d, 0x18, 0xab, 0x43, 0xa1, 0x88, 0x1e, 0xc8, 0x5e, 0xe4, 0x44,
	0xa2, 0x1e, 0x8c, 0x26, 0x26, 0x26, 0x9a, 0x36, 0x35, 0x1a, 0x13, 0x8c, 0x67, 0x03, 0x76, 0x55,
	0x0e, 0x96, 0x95, 0xa5, 0xef, 0xec, 0x63, 0x18, 0x81, 0x65, 0x59, 0x0a, 0x87, 0x7a, 0x9c, 0x99,
	0xff, 0xff, 0x66, 0x18, 0x66, 0xc1, 0x7c, 0x4f, 0xb3, 0x38, 0x59, 0xbe, 0x7e, 0x45, 0xab, 0xe8,
	0x83, 0x06, 0x2c, 0x4b, 0xf3, 0x14, 0x75, 0x16, 0x13, 0x0b, 0xcc, 0x59, 0x51, 0x5a, 0xb0, 0x87,
	0x84, 0xe7, 0x21, 0xfd, 0x5e, 0x53, 0x9e, 0x93, 0x00, 0x26, 0x6a, 0x9a, 0xb3, 0x74, 0xc5, 0x29,
	0xda, 0x60, 0x24, 0x45, 0xc6, 0xd1, 0xbc, 0x81, 0x3f, 0x0a, 0xab, 0x88, 0x9c, 0x80, 0x25, 0xf4,
	0xcf, 0x34, 0xca, 0xde, 0x3e, 0x2b, 0x10, 0xee, 0x81, 0x9e, 0x30, 0x47, 0xf3, 0x34, 0x7f, 0x14,
	0xea, 0x09, 0x23, 0x37, 0x60, 0xb7, 0x85, 0x15, 0xba, 0xa5, 0xfc, 0x6b, 0x55, 0x0e, 0xed, 0xe8,
	0x9e, 0xe6, 0x0f, 0xc3, 0x2a, 0x22, 0x97, 0x30, 0x16, 0x84, 0x9e, 0x26, 0xbd, 0xd6, 0x2b, 0xd8,
	0x97, 0xd6, 0x2d, 0xdb, 0xde, 0xc2, 0x41, 0xe9, 0x7d, 0xe1, 0x34, 0x13, 0x8d, 0x6d, 0x30, 0xd6,
	0x9c, 0x66, 0x8b, 0x65, 0x01, 0x18, 0x84, 0x55, 0xd4, 0x0b, 0xb9, 0x03, 0x6c, 0x42, 0xe4, 0x52,
	0xb7, 0xa2, 0x9c, 0xc2, 0x54, 0x52, 0xd4, 0x75, 0xf7, 0xa0, 0xc8, 0x3d, 0x38, 0x9b, 0x96, 0xff,
	0xb5, 0x3f, 0xfb, 0xd1, 0x61, 0xb7, 0x84, 0x3d, 0x16, 0xd7, 0x84, 0x33, 0x18, 0xcf, 0x69, 0xde,
	0xbc, 0x17, 0x9c, 0x06, 0x2c, 0x0e, 0x3a, 0x0e, 0xcb, 0x75, 0x36, 0x0b, 0xe5, 0x18, 0x64, 0x07,
	0x2f, 0x60, 0x28, 0x2a, 0x68, 0x36, 0x75, 0xc2, 0x3c, 0x51, 0x93, 0xb5, 0x71, 0x2e, 0x06, 0x2a,
	0xbf, 0x0c, 0x0f, 0x9b, 0x3a, 0x65, 0x41, 0xae, 0xdb, 0x55, 0xaa, 0x41, 0xd7, 0x00, 0x72, 0x4d,
	0x68, 0x49, 0x6d, 0xe3, 0xa7, 0xbb, 0x76, 0x3b, 0x5d, 0xdb, 0x9f, 0xc4, 0x7d, 0xc9, 0x2d, 0xe3,
	0x91, 0xaa, 0x56, 0xa7, 0x39, 0xee, 0x2e, 0x0a, 0x60, 0x6c, 0x14, 0x0f, 0xf5, 0xfc, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xa4, 0x53, 0x7a, 0x58, 0xbf, 0x03, 0x00, 0x00,
}
