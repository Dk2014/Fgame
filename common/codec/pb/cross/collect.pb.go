// Code generated by protoc-gen-go. DO NOT EDIT.
// source: collect.proto

package cross

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ISCollectFinish struct {
	BiologyId        *int32 `protobuf:"varint,1,req,name=biologyId" json:"biologyId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISCollectFinish) Reset()                    { *m = ISCollectFinish{} }
func (m *ISCollectFinish) String() string            { return proto.CompactTextString(m) }
func (*ISCollectFinish) ProtoMessage()               {}
func (*ISCollectFinish) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *ISCollectFinish) GetBiologyId() int32 {
	if m != nil && m.BiologyId != nil {
		return *m.BiologyId
	}
	return 0
}

type SICollectFinish struct {
	ItemList         []*ItemInfo `protobuf:"bytes,1,rep,name=itemList" json:"itemList,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SICollectFinish) Reset()                    { *m = SICollectFinish{} }
func (m *SICollectFinish) String() string            { return proto.CompactTextString(m) }
func (*SICollectFinish) ProtoMessage()               {}
func (*SICollectFinish) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *SICollectFinish) GetItemList() []*ItemInfo {
	if m != nil {
		return m.ItemList
	}
	return nil
}

type ISCollectMiZangFinish struct {
	NpcId            *int64 `protobuf:"varint,1,req,name=npcId" json:"npcId,omitempty"`
	BiologyId        *int32 `protobuf:"varint,2,req,name=biologyId" json:"biologyId,omitempty"`
	MiZangId         *int32 `protobuf:"varint,3,req,name=miZangId" json:"miZangId,omitempty"`
	OpenType         *int32 `protobuf:"varint,4,req,name=openType" json:"openType,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISCollectMiZangFinish) Reset()                    { *m = ISCollectMiZangFinish{} }
func (m *ISCollectMiZangFinish) String() string            { return proto.CompactTextString(m) }
func (*ISCollectMiZangFinish) ProtoMessage()               {}
func (*ISCollectMiZangFinish) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *ISCollectMiZangFinish) GetNpcId() int64 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *ISCollectMiZangFinish) GetBiologyId() int32 {
	if m != nil && m.BiologyId != nil {
		return *m.BiologyId
	}
	return 0
}

func (m *ISCollectMiZangFinish) GetMiZangId() int32 {
	if m != nil && m.MiZangId != nil {
		return *m.MiZangId
	}
	return 0
}

func (m *ISCollectMiZangFinish) GetOpenType() int32 {
	if m != nil && m.OpenType != nil {
		return *m.OpenType
	}
	return 0
}

type SICollectMiZangFinish struct {
	NpcId            *int64      `protobuf:"varint,1,req,name=npcId" json:"npcId,omitempty"`
	ItemList         []*ItemInfo `protobuf:"bytes,2,rep,name=itemList" json:"itemList,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SICollectMiZangFinish) Reset()                    { *m = SICollectMiZangFinish{} }
func (m *SICollectMiZangFinish) String() string            { return proto.CompactTextString(m) }
func (*SICollectMiZangFinish) ProtoMessage()               {}
func (*SICollectMiZangFinish) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *SICollectMiZangFinish) GetNpcId() int64 {
	if m != nil && m.NpcId != nil {
		return *m.NpcId
	}
	return 0
}

func (m *SICollectMiZangFinish) GetItemList() []*ItemInfo {
	if m != nil {
		return m.ItemList
	}
	return nil
}

func init() {
	proto.RegisterType((*ISCollectFinish)(nil), "cross.ISCollectFinish")
	proto.RegisterType((*SICollectFinish)(nil), "cross.SICollectFinish")
	proto.RegisterType((*ISCollectMiZangFinish)(nil), "cross.ISCollectMiZangFinish")
	proto.RegisterType((*SICollectMiZangFinish)(nil), "cross.SICollectMiZangFinish")
}

func init() { proto.RegisterFile("collect.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0xcf, 0xc9,
	0x49, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2e, 0xca, 0x2f, 0x2e,
	0x96, 0xe2, 0xca, 0x2c, 0x49, 0xcd, 0x85, 0x08, 0x29, 0xa9, 0x70, 0xf1, 0x7b, 0x06, 0x3b, 0x43,
	0x54, 0xb9, 0x65, 0xe6, 0x65, 0x16, 0x67, 0x08, 0x09, 0x72, 0x71, 0x26, 0x65, 0xe6, 0xe7, 0xe4,
	0xa7, 0x57, 0x7a, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x69, 0xb0, 0x2a, 0x99, 0x70, 0xf1, 0x07, 0x7b,
	0xa2, 0xaa, 0x52, 0xe4, 0xe2, 0x00, 0x19, 0xe3, 0x93, 0x59, 0x5c, 0x22, 0xc1, 0xa8, 0xc0, 0xac,
	0xc1, 0x6d, 0xc4, 0xaf, 0x07, 0x36, 0x5e, 0xcf, 0xb3, 0x24, 0x35, 0xd7, 0x33, 0x2f, 0x2d, 0x5f,
	0x29, 0x96, 0x4b, 0x14, 0x6e, 0xb6, 0x6f, 0x66, 0x54, 0x62, 0x5e, 0x3a, 0x54, 0x2f, 0x2f, 0x17,
	0x6b, 0x5e, 0x41, 0x32, 0xd4, 0x74, 0x66, 0x54, 0x0b, 0x99, 0x40, 0x16, 0x0a, 0x09, 0x70, 0x71,
	0xe4, 0x82, 0x75, 0x78, 0xa6, 0x48, 0x30, 0xc3, 0x44, 0xf2, 0x0b, 0x52, 0xf3, 0x42, 0x2a, 0x0b,
	0x52, 0x25, 0x58, 0xc0, 0x8e, 0xf2, 0xe4, 0x12, 0x85, 0x3b, 0x0a, 0x9f, 0xf1, 0xc8, 0x2e, 0x65,
	0xc2, 0xea, 0x52, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x37, 0x9e, 0xe2, 0x36, 0x28, 0x01, 0x00,
	0x00,
}
