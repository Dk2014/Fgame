// Code generated by protoc-gen-go. DO NOT EDIT.
// source: synthesis.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CSSynthesisStart struct {
	SynthesisId      *int32 `protobuf:"varint,1,req,name=synthesisId" json:"synthesisId,omitempty"`
	Num              *int32 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`
	IsAvoidBomb      *bool  `protobuf:"varint,3,req,name=isAvoidBomb" json:"isAvoidBomb,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSSynthesisStart) Reset()                    { *m = CSSynthesisStart{} }
func (m *CSSynthesisStart) String() string            { return proto.CompactTextString(m) }
func (*CSSynthesisStart) ProtoMessage()               {}
func (*CSSynthesisStart) Descriptor() ([]byte, []int) { return fileDescriptor110, []int{0} }

func (m *CSSynthesisStart) GetSynthesisId() int32 {
	if m != nil && m.SynthesisId != nil {
		return *m.SynthesisId
	}
	return 0
}

func (m *CSSynthesisStart) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *CSSynthesisStart) GetIsAvoidBomb() bool {
	if m != nil && m.IsAvoidBomb != nil {
		return *m.IsAvoidBomb
	}
	return false
}

type SCSynthesisStart struct {
	SynthesisId      *int32 `protobuf:"varint,1,req,name=synthesisId" json:"synthesisId,omitempty"`
	Num              *int32 `protobuf:"varint,2,req,name=num" json:"num,omitempty"`
	IsSuccess        []bool `protobuf:"varint,3,rep,name=isSuccess" json:"isSuccess,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCSynthesisStart) Reset()                    { *m = SCSynthesisStart{} }
func (m *SCSynthesisStart) String() string            { return proto.CompactTextString(m) }
func (*SCSynthesisStart) ProtoMessage()               {}
func (*SCSynthesisStart) Descriptor() ([]byte, []int) { return fileDescriptor110, []int{1} }

func (m *SCSynthesisStart) GetSynthesisId() int32 {
	if m != nil && m.SynthesisId != nil {
		return *m.SynthesisId
	}
	return 0
}

func (m *SCSynthesisStart) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *SCSynthesisStart) GetIsSuccess() []bool {
	if m != nil {
		return m.IsSuccess
	}
	return nil
}

func init() {
	proto.RegisterType((*CSSynthesisStart)(nil), "ui.CSSynthesisStart")
	proto.RegisterType((*SCSynthesisStart)(nil), "ui.SCSynthesisStart")
}

func init() { proto.RegisterFile("synthesis.proto", fileDescriptor110) }

var fileDescriptor110 = []byte{
	// 130 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xae, 0xcc, 0x2b,
	0xc9, 0x48, 0x2d, 0xce, 0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0xcd, 0x54,
	0xf2, 0xe4, 0x12, 0x70, 0x0e, 0x0e, 0x86, 0x49, 0x04, 0x97, 0x24, 0x16, 0x95, 0x08, 0x09, 0x73,
	0x71, 0xc3, 0x95, 0x7a, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x69, 0xb0, 0x0a, 0x71, 0x73, 0x31, 0xe7,
	0x95, 0xe6, 0x4a, 0x30, 0x81, 0x39, 0xc2, 0x5c, 0xdc, 0x99, 0xc5, 0x8e, 0x65, 0xf9, 0x99, 0x29,
	0x4e, 0xf9, 0xb9, 0x49, 0x12, 0xcc, 0x0a, 0x4c, 0x1a, 0x1c, 0x4a, 0xee, 0x5c, 0x02, 0xc1, 0xce,
	0x24, 0x1b, 0x25, 0xc8, 0xc5, 0x99, 0x59, 0x1c, 0x5c, 0x9a, 0x9c, 0x9c, 0x5a, 0x5c, 0x2c, 0xc1,
	0xac, 0xc0, 0xac, 0xc1, 0x01, 0x08, 0x00, 0x00, 0xff, 0xff, 0x25, 0xe2, 0x20, 0xce, 0xa9, 0x00,
	0x00, 0x00,
}
