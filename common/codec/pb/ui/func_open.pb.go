// Code generated by protoc-gen-go. DO NOT EDIT.
// source: func_open.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type SCFuncOpenList struct {
	FuncOpenList     []int32 `protobuf:"varint,1,rep,name=funcOpenList" json:"funcOpenList,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SCFuncOpenList) Reset()                    { *m = SCFuncOpenList{} }
func (m *SCFuncOpenList) String() string            { return proto.CompactTextString(m) }
func (*SCFuncOpenList) ProtoMessage()               {}
func (*SCFuncOpenList) Descriptor() ([]byte, []int) { return fileDescriptor40, []int{0} }

func (m *SCFuncOpenList) GetFuncOpenList() []int32 {
	if m != nil {
		return m.FuncOpenList
	}
	return nil
}

type SCFuncOpenUpdateList struct {
	FuncOpenList     []int32 `protobuf:"varint,1,rep,name=funcOpenList" json:"funcOpenList,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SCFuncOpenUpdateList) Reset()                    { *m = SCFuncOpenUpdateList{} }
func (m *SCFuncOpenUpdateList) String() string            { return proto.CompactTextString(m) }
func (*SCFuncOpenUpdateList) ProtoMessage()               {}
func (*SCFuncOpenUpdateList) Descriptor() ([]byte, []int) { return fileDescriptor40, []int{1} }

func (m *SCFuncOpenUpdateList) GetFuncOpenList() []int32 {
	if m != nil {
		return m.FuncOpenList
	}
	return nil
}

type CSFuncOpenManualActive struct {
	ModuleId         *int32 `protobuf:"varint,1,req,name=moduleId" json:"moduleId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSFuncOpenManualActive) Reset()                    { *m = CSFuncOpenManualActive{} }
func (m *CSFuncOpenManualActive) String() string            { return proto.CompactTextString(m) }
func (*CSFuncOpenManualActive) ProtoMessage()               {}
func (*CSFuncOpenManualActive) Descriptor() ([]byte, []int) { return fileDescriptor40, []int{2} }

func (m *CSFuncOpenManualActive) GetModuleId() int32 {
	if m != nil && m.ModuleId != nil {
		return *m.ModuleId
	}
	return 0
}

type SCFuncOpenManualActive struct {
	FuncOpenList     []int32 `protobuf:"varint,1,rep,name=funcOpenList" json:"funcOpenList,omitempty"`
	Result           *int32  `protobuf:"varint,2,req,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SCFuncOpenManualActive) Reset()                    { *m = SCFuncOpenManualActive{} }
func (m *SCFuncOpenManualActive) String() string            { return proto.CompactTextString(m) }
func (*SCFuncOpenManualActive) ProtoMessage()               {}
func (*SCFuncOpenManualActive) Descriptor() ([]byte, []int) { return fileDescriptor40, []int{3} }

func (m *SCFuncOpenManualActive) GetFuncOpenList() []int32 {
	if m != nil {
		return m.FuncOpenList
	}
	return nil
}

func (m *SCFuncOpenManualActive) GetResult() int32 {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*SCFuncOpenList)(nil), "ui.SCFuncOpenList")
	proto.RegisterType((*SCFuncOpenUpdateList)(nil), "ui.SCFuncOpenUpdateList")
	proto.RegisterType((*CSFuncOpenManualActive)(nil), "ui.CSFuncOpenManualActive")
	proto.RegisterType((*SCFuncOpenManualActive)(nil), "ui.SCFuncOpenManualActive")
}

func init() { proto.RegisterFile("func_open.proto", fileDescriptor40) }

var fileDescriptor40 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x2b, 0xcd, 0x4b,
	0x8e, 0xcf, 0x2f, 0x48, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0xcd, 0x54,
	0x52, 0xe3, 0xe2, 0x0b, 0x76, 0x76, 0x2b, 0xcd, 0x4b, 0xf6, 0x2f, 0x48, 0xcd, 0xf3, 0xc9, 0x2c,
	0x2e, 0x11, 0x12, 0xe1, 0xe2, 0x49, 0x43, 0xe2, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0xb0, 0x2a, 0xe9,
	0x70, 0x89, 0x20, 0xd4, 0x85, 0x16, 0xa4, 0x24, 0x96, 0xa4, 0xe2, 0x51, 0xad, 0xc5, 0x25, 0xe6,
	0x1c, 0x0c, 0x53, 0xed, 0x9b, 0x98, 0x57, 0x9a, 0x98, 0xe3, 0x98, 0x5c, 0x92, 0x59, 0x96, 0x2a,
	0x24, 0xc0, 0xc5, 0x91, 0x9b, 0x9f, 0x52, 0x9a, 0x93, 0xea, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa4,
	0xc1, 0xaa, 0x64, 0xc7, 0x25, 0x86, 0x30, 0x19, 0x45, 0x2d, 0x56, 0xb3, 0x85, 0xf8, 0xb8, 0xd8,
	0x8a, 0x52, 0x8b, 0x4b, 0x73, 0x4a, 0x24, 0x98, 0x40, 0xfa, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x30, 0xae, 0xe8, 0xb0, 0xd7, 0x00, 0x00, 0x00,
}
