// Code generated by protoc-gen-go.
// source: proxy.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	proxy.proto

It has these top-level messages:
	Message
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Message)(nil), "pb.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Proxy service

type ProxyClient interface {
	Forward(ctx context.Context, opts ...grpc.CallOption) (Proxy_ForwardClient, error)
}

type proxyClient struct {
	cc *grpc.ClientConn
}

func NewProxyClient(cc *grpc.ClientConn) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) Forward(ctx context.Context, opts ...grpc.CallOption) (Proxy_ForwardClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Proxy_serviceDesc.Streams[0], c.cc, "/pb.Proxy/Forward", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyForwardClient{stream}
	return x, nil
}

type Proxy_ForwardClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type proxyForwardClient struct {
	grpc.ClientStream
}

func (x *proxyForwardClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyForwardClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Proxy service

type ProxyServer interface {
	Forward(Proxy_ForwardServer) error
}

func RegisterProxyServer(s *grpc.Server, srv ProxyServer) {
	s.RegisterService(&_Proxy_serviceDesc, srv)
}

func _Proxy_Forward_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyServer).Forward(&proxyForwardServer{stream})
}

type Proxy_ForwardServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type proxyForwardServer struct {
	grpc.ServerStream
}

func (x *proxyForwardServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyForwardServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Forward",
			Handler:       _Proxy_Forward_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("proxy.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x28, 0xca, 0xaf,
	0xa8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x92, 0xe5, 0x62, 0xf7,
	0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x15, 0x12, 0xe2, 0x62, 0x49, 0xca, 0x4f, 0xa9, 0x94, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x8d, 0x8c, 0xb8, 0x58, 0x03, 0x40, 0x3a, 0x84, 0x34,
	0xb9, 0xd8, 0xdd, 0xf2, 0x8b, 0xca, 0x13, 0x8b, 0x52, 0x84, 0xb8, 0xf5, 0x0a, 0x92, 0xf4, 0xa0,
	0x9a, 0xa4, 0x90, 0x39, 0x4a, 0x0c, 0x1a, 0x8c, 0x06, 0x8c, 0x49, 0x6c, 0x60, 0xd3, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x96, 0x07, 0x79, 0x40, 0x6c, 0x00, 0x00, 0x00,
}
