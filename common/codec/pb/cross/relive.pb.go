// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relive.proto

package cross

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PlayerReliveData struct {
	CulTime          *int32 `protobuf:"varint,1,req,name=culTime" json:"culTime,omitempty"`
	LastReliveTime   *int64 `protobuf:"varint,2,req,name=lastReliveTime" json:"lastReliveTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerReliveData) Reset()                    { *m = PlayerReliveData{} }
func (m *PlayerReliveData) String() string            { return proto.CompactTextString(m) }
func (*PlayerReliveData) ProtoMessage()               {}
func (*PlayerReliveData) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{0} }

func (m *PlayerReliveData) GetCulTime() int32 {
	if m != nil && m.CulTime != nil {
		return *m.CulTime
	}
	return 0
}

func (m *PlayerReliveData) GetLastReliveTime() int64 {
	if m != nil && m.LastReliveTime != nil {
		return *m.LastReliveTime
	}
	return 0
}

type ISPlayerReliveSync struct {
	PlayerReliveData *PlayerReliveData `protobuf:"bytes,1,req,name=playerReliveData" json:"playerReliveData,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *ISPlayerReliveSync) Reset()                    { *m = ISPlayerReliveSync{} }
func (m *ISPlayerReliveSync) String() string            { return proto.CompactTextString(m) }
func (*ISPlayerReliveSync) ProtoMessage()               {}
func (*ISPlayerReliveSync) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{1} }

func (m *ISPlayerReliveSync) GetPlayerReliveData() *PlayerReliveData {
	if m != nil {
		return m.PlayerReliveData
	}
	return nil
}

type SIPlayerReliveSync struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SIPlayerReliveSync) Reset()                    { *m = SIPlayerReliveSync{} }
func (m *SIPlayerReliveSync) String() string            { return proto.CompactTextString(m) }
func (*SIPlayerReliveSync) ProtoMessage()               {}
func (*SIPlayerReliveSync) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{2} }

type ISPlayerRelive struct {
	ReliveTime       *int32 `protobuf:"varint,1,req,name=reliveTime" json:"reliveTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISPlayerRelive) Reset()                    { *m = ISPlayerRelive{} }
func (m *ISPlayerRelive) String() string            { return proto.CompactTextString(m) }
func (*ISPlayerRelive) ProtoMessage()               {}
func (*ISPlayerRelive) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{3} }

func (m *ISPlayerRelive) GetReliveTime() int32 {
	if m != nil && m.ReliveTime != nil {
		return *m.ReliveTime
	}
	return 0
}

type SIPlayerRelive struct {
	Success          *bool  `protobuf:"varint,1,req,name=success" json:"success,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SIPlayerRelive) Reset()                    { *m = SIPlayerRelive{} }
func (m *SIPlayerRelive) String() string            { return proto.CompactTextString(m) }
func (*SIPlayerRelive) ProtoMessage()               {}
func (*SIPlayerRelive) Descriptor() ([]byte, []int) { return fileDescriptor24, []int{4} }

func (m *SIPlayerRelive) GetSuccess() bool {
	if m != nil && m.Success != nil {
		return *m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*PlayerReliveData)(nil), "cross.PlayerReliveData")
	proto.RegisterType((*ISPlayerReliveSync)(nil), "cross.ISPlayerReliveSync")
	proto.RegisterType((*SIPlayerReliveSync)(nil), "cross.SIPlayerReliveSync")
	proto.RegisterType((*ISPlayerRelive)(nil), "cross.ISPlayerRelive")
	proto.RegisterType((*SIPlayerRelive)(nil), "cross.SIPlayerRelive")
}

func init() { proto.RegisterFile("relive.proto", fileDescriptor24) }

var fileDescriptor24 = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4a, 0xcd, 0xc9,
	0x2c, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4d, 0x2e, 0xca, 0x2f, 0x2e, 0x56,
	0xb2, 0xe6, 0x12, 0x08, 0xc8, 0x49, 0xac, 0x4c, 0x2d, 0x0a, 0x02, 0x4b, 0xba, 0x24, 0x96, 0x24,
	0x0a, 0xf1, 0x73, 0xb1, 0x27, 0x97, 0xe6, 0x84, 0x64, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x69,
	0xb0, 0x0a, 0x89, 0x71, 0xf1, 0xe5, 0x24, 0x16, 0x97, 0x40, 0x94, 0x80, 0xc5, 0x99, 0x14, 0x98,
	0x34, 0x98, 0x95, 0xdc, 0xb9, 0x84, 0x3c, 0x83, 0x91, 0xb5, 0x07, 0x57, 0xe6, 0x25, 0x0b, 0x19,
	0x72, 0x09, 0x14, 0xa0, 0x19, 0x09, 0x36, 0x87, 0xdb, 0x48, 0x5c, 0x0f, 0x6c, 0xa9, 0x1e, 0xba,
	0x8d, 0x4a, 0x22, 0x5c, 0x42, 0xc1, 0x9e, 0xe8, 0x06, 0x29, 0xa9, 0x70, 0xf1, 0xa1, 0x1a, 0x2f,
	0x24, 0xc4, 0xc5, 0x55, 0x84, 0x70, 0x04, 0xd8, 0x71, 0x4a, 0x8a, 0x5c, 0x7c, 0xa8, 0x7a, 0x41,
	0xee, 0x2f, 0x2e, 0x4d, 0x4e, 0x4e, 0x2d, 0x2e, 0x06, 0x2b, 0xe1, 0x00, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xa9, 0xbe, 0x3e, 0xba, 0xfa, 0x00, 0x00, 0x00,
}
