// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server_manage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PlatformSetting struct {
	MarryKindType    int32 `protobuf:"varint,1,opt,name=marryKindType" json:"marryKindType,omitempty"`
	AllianceFlag     int32 `protobuf:"varint,2,opt,name=allianceFlag" json:"allianceFlag,omitempty"`
	TradeFlag        int32 `protobuf:"varint,3,opt,name=tradeFlag" json:"tradeFlag,omitempty"`
	XianJinFlag      int32 `protobuf:"varint,4,opt,name=xianJinFlag" json:"xianJinFlag,omitempty"`
	NeiWanJiaoYiFlag int32 `protobuf:"varint,5,opt,name=neiWanJiaoYiFlag" json:"neiWanJiaoYiFlag,omitempty"`
	ZhiZuanFlag      int32 `protobuf:"varint,6,opt,name=zhiZuanFlag" json:"zhiZuanFlag,omitempty"`
}

func (m *PlatformSetting) Reset()                    { *m = PlatformSetting{} }
func (m *PlatformSetting) String() string            { return proto.CompactTextString(m) }
func (*PlatformSetting) ProtoMessage()               {}
func (*PlatformSetting) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *PlatformSetting) GetMarryKindType() int32 {
	if m != nil {
		return m.MarryKindType
	}
	return 0
}

func (m *PlatformSetting) GetAllianceFlag() int32 {
	if m != nil {
		return m.AllianceFlag
	}
	return 0
}

func (m *PlatformSetting) GetTradeFlag() int32 {
	if m != nil {
		return m.TradeFlag
	}
	return 0
}

func (m *PlatformSetting) GetXianJinFlag() int32 {
	if m != nil {
		return m.XianJinFlag
	}
	return 0
}

func (m *PlatformSetting) GetNeiWanJiaoYiFlag() int32 {
	if m != nil {
		return m.NeiWanJiaoYiFlag
	}
	return 0
}

func (m *PlatformSetting) GetZhiZuanFlag() int32 {
	if m != nil {
		return m.ZhiZuanFlag
	}
	return 0
}

type PlatformChatSetting struct {
	MinVip              int32 `protobuf:"varint,1,opt,name=minVip" json:"minVip,omitempty"`
	MinPlayerLevel      int32 `protobuf:"varint,2,opt,name=minPlayerLevel" json:"minPlayerLevel,omitempty"`
	WorldVip            int32 `protobuf:"varint,3,opt,name=worldVip" json:"worldVip,omitempty"`
	WorldPlayerLevel    int32 `protobuf:"varint,4,opt,name=worldPlayerLevel" json:"worldPlayerLevel,omitempty"`
	AllianceVip         int32 `protobuf:"varint,5,opt,name=allianceVip" json:"allianceVip,omitempty"`
	AlliancePlayerLevel int32 `protobuf:"varint,6,opt,name=alliancePlayerLevel" json:"alliancePlayerLevel,omitempty"`
	TeamVip             int32 `protobuf:"varint,7,opt,name=teamVip" json:"teamVip,omitempty"`
	TeamPlayerLevel     int32 `protobuf:"varint,8,opt,name=teamPlayerLevel" json:"teamPlayerLevel,omitempty"`
	PVip                int32 `protobuf:"varint,9,opt,name=pVip" json:"pVip,omitempty"`
	PPlayerLevel        int32 `protobuf:"varint,10,opt,name=pPlayerLevel" json:"pPlayerLevel,omitempty"`
}

func (m *PlatformChatSetting) Reset()                    { *m = PlatformChatSetting{} }
func (m *PlatformChatSetting) String() string            { return proto.CompactTextString(m) }
func (*PlatformChatSetting) ProtoMessage()               {}
func (*PlatformChatSetting) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *PlatformChatSetting) GetMinVip() int32 {
	if m != nil {
		return m.MinVip
	}
	return 0
}

func (m *PlatformChatSetting) GetMinPlayerLevel() int32 {
	if m != nil {
		return m.MinPlayerLevel
	}
	return 0
}

func (m *PlatformChatSetting) GetWorldVip() int32 {
	if m != nil {
		return m.WorldVip
	}
	return 0
}

func (m *PlatformChatSetting) GetWorldPlayerLevel() int32 {
	if m != nil {
		return m.WorldPlayerLevel
	}
	return 0
}

func (m *PlatformChatSetting) GetAllianceVip() int32 {
	if m != nil {
		return m.AllianceVip
	}
	return 0
}

func (m *PlatformChatSetting) GetAlliancePlayerLevel() int32 {
	if m != nil {
		return m.AlliancePlayerLevel
	}
	return 0
}

func (m *PlatformChatSetting) GetTeamVip() int32 {
	if m != nil {
		return m.TeamVip
	}
	return 0
}

func (m *PlatformChatSetting) GetTeamPlayerLevel() int32 {
	if m != nil {
		return m.TeamPlayerLevel
	}
	return 0
}

func (m *PlatformChatSetting) GetPVip() int32 {
	if m != nil {
		return m.PVip
	}
	return 0
}

func (m *PlatformChatSetting) GetPPlayerLevel() int32 {
	if m != nil {
		return m.PPlayerLevel
	}
	return 0
}

// 服务器注册
type ServerRegisterRequest struct {
	ServerType int32  `protobuf:"varint,1,opt,name=serverType" json:"serverType,omitempty"`
	Platform   int32  `protobuf:"varint,2,opt,name=platform" json:"platform,omitempty"`
	ServerId   int32  `protobuf:"varint,3,opt,name=serverId" json:"serverId,omitempty"`
	ServerIp   string `protobuf:"bytes,4,opt,name=serverIp" json:"serverIp,omitempty"`
	ServerPort int32  `protobuf:"varint,5,opt,name=serverPort" json:"serverPort,omitempty"`
}

func (m *ServerRegisterRequest) Reset()                    { *m = ServerRegisterRequest{} }
func (m *ServerRegisterRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerRegisterRequest) ProtoMessage()               {}
func (*ServerRegisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *ServerRegisterRequest) GetServerType() int32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *ServerRegisterRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ServerRegisterRequest) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *ServerRegisterRequest) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *ServerRegisterRequest) GetServerPort() int32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

// 服务器注册回复
type ServerRegisterResponse struct {
	Id                  int32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	StartTime           int64                `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	MarryKindType       int32                `protobuf:"varint,3,opt,name=marryKindType" json:"marryKindType,omitempty"`
	TradeServerIp       string               `protobuf:"bytes,4,opt,name=tradeServerIp" json:"tradeServerIp,omitempty"`
	SdkList             []int32              `protobuf:"varint,5,rep,packed,name=sdkList" json:"sdkList,omitempty"`
	PlatformSetting     *PlatformSetting     `protobuf:"bytes,6,opt,name=platformSetting" json:"platformSetting,omitempty"`
	PlatformChatSetting *PlatformChatSetting `protobuf:"bytes,7,opt,name=platformChatSetting" json:"platformChatSetting,omitempty"`
}

func (m *ServerRegisterResponse) Reset()                    { *m = ServerRegisterResponse{} }
func (m *ServerRegisterResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerRegisterResponse) ProtoMessage()               {}
func (*ServerRegisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *ServerRegisterResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServerRegisterResponse) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *ServerRegisterResponse) GetMarryKindType() int32 {
	if m != nil {
		return m.MarryKindType
	}
	return 0
}

func (m *ServerRegisterResponse) GetTradeServerIp() string {
	if m != nil {
		return m.TradeServerIp
	}
	return ""
}

func (m *ServerRegisterResponse) GetSdkList() []int32 {
	if m != nil {
		return m.SdkList
	}
	return nil
}

func (m *ServerRegisterResponse) GetPlatformSetting() *PlatformSetting {
	if m != nil {
		return m.PlatformSetting
	}
	return nil
}

func (m *ServerRegisterResponse) GetPlatformChatSetting() *PlatformChatSetting {
	if m != nil {
		return m.PlatformChatSetting
	}
	return nil
}

// 服务器下线
type ServerUnregisterRequest struct {
	ServerId int32 `protobuf:"varint,1,opt,name=serverId" json:"serverId,omitempty"`
}

func (m *ServerUnregisterRequest) Reset()                    { *m = ServerUnregisterRequest{} }
func (m *ServerUnregisterRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerUnregisterRequest) ProtoMessage()               {}
func (*ServerUnregisterRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *ServerUnregisterRequest) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

// 服务器下线回复
type ServerUnregisterResponse struct {
	ServerId int32 `protobuf:"varint,1,opt,name=serverId" json:"serverId,omitempty"`
}

func (m *ServerUnregisterResponse) Reset()                    { *m = ServerUnregisterResponse{} }
func (m *ServerUnregisterResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerUnregisterResponse) ProtoMessage()               {}
func (*ServerUnregisterResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *ServerUnregisterResponse) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

// 获取跨服列表
type ServerCrossListRequest struct {
	ServerId int32 `protobuf:"varint,1,opt,name=serverId" json:"serverId,omitempty"`
}

func (m *ServerCrossListRequest) Reset()                    { *m = ServerCrossListRequest{} }
func (m *ServerCrossListRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerCrossListRequest) ProtoMessage()               {}
func (*ServerCrossListRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *ServerCrossListRequest) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type CrossServerInfo struct {
	ServerType int32  `protobuf:"varint,1,opt,name=serverType" json:"serverType,omitempty"`
	ServerIp   string `protobuf:"bytes,2,opt,name=serverIp" json:"serverIp,omitempty"`
	ServerPort int32  `protobuf:"varint,3,opt,name=serverPort" json:"serverPort,omitempty"`
}

func (m *CrossServerInfo) Reset()                    { *m = CrossServerInfo{} }
func (m *CrossServerInfo) String() string            { return proto.CompactTextString(m) }
func (*CrossServerInfo) ProtoMessage()               {}
func (*CrossServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *CrossServerInfo) GetServerType() int32 {
	if m != nil {
		return m.ServerType
	}
	return 0
}

func (m *CrossServerInfo) GetServerIp() string {
	if m != nil {
		return m.ServerIp
	}
	return ""
}

func (m *CrossServerInfo) GetServerPort() int32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

// 获取跨服列表回复
type ServerCrossListResponse struct {
	ServerInfoList []*CrossServerInfo `protobuf:"bytes,1,rep,name=serverInfoList" json:"serverInfoList,omitempty"`
}

func (m *ServerCrossListResponse) Reset()                    { *m = ServerCrossListResponse{} }
func (m *ServerCrossListResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerCrossListResponse) ProtoMessage()               {}
func (*ServerCrossListResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *ServerCrossListResponse) GetServerInfoList() []*CrossServerInfo {
	if m != nil {
		return m.ServerInfoList
	}
	return nil
}

// 获取
type ServerInfo struct {
	Id       int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip" json:"ip,omitempty"`
	Tag      int32  `protobuf:"varint,4,opt,name=tag" json:"tag,omitempty"`
	Status   int32  `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	RemoteIp string `protobuf:"bytes,6,opt,name=remoteIp" json:"remoteIp,omitempty"`
}

func (m *ServerInfo) Reset()                    { *m = ServerInfo{} }
func (m *ServerInfo) String() string            { return proto.CompactTextString(m) }
func (*ServerInfo) ProtoMessage()               {}
func (*ServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *ServerInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ServerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServerInfo) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *ServerInfo) GetTag() int32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

func (m *ServerInfo) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ServerInfo) GetRemoteIp() string {
	if m != nil {
		return m.RemoteIp
	}
	return ""
}

type ServerInfoListRequest struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
	Gm       int32 `protobuf:"varint,2,opt,name=gm" json:"gm,omitempty"`
}

func (m *ServerInfoListRequest) Reset()                    { *m = ServerInfoListRequest{} }
func (m *ServerInfoListRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoListRequest) ProtoMessage()               {}
func (*ServerInfoListRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *ServerInfoListRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ServerInfoListRequest) GetGm() int32 {
	if m != nil {
		return m.Gm
	}
	return 0
}

type ServerInfoListResponse struct {
	ServerInfoList []*ServerInfo `protobuf:"bytes,1,rep,name=serverInfoList" json:"serverInfoList,omitempty"`
}

func (m *ServerInfoListResponse) Reset()                    { *m = ServerInfoListResponse{} }
func (m *ServerInfoListResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoListResponse) ProtoMessage()               {}
func (*ServerInfoListResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *ServerInfoListResponse) GetServerInfoList() []*ServerInfo {
	if m != nil {
		return m.ServerInfoList
	}
	return nil
}

type RefreshServerInfoListRequest struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
}

func (m *RefreshServerInfoListRequest) Reset()                    { *m = RefreshServerInfoListRequest{} }
func (m *RefreshServerInfoListRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshServerInfoListRequest) ProtoMessage()               {}
func (*RefreshServerInfoListRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *RefreshServerInfoListRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

type RefreshServerInfoListResponse struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
}

func (m *RefreshServerInfoListResponse) Reset()                    { *m = RefreshServerInfoListResponse{} }
func (m *RefreshServerInfoListResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshServerInfoListResponse) ProtoMessage()               {}
func (*RefreshServerInfoListResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *RefreshServerInfoListResponse) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

type RefreshSDKListRequest struct {
}

func (m *RefreshSDKListRequest) Reset()                    { *m = RefreshSDKListRequest{} }
func (m *RefreshSDKListRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshSDKListRequest) ProtoMessage()               {}
func (*RefreshSDKListRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

type RefreshSDKListResponse struct {
}

func (m *RefreshSDKListResponse) Reset()                    { *m = RefreshSDKListResponse{} }
func (m *RefreshSDKListResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshSDKListResponse) ProtoMessage()               {}
func (*RefreshSDKListResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

type ServerInfoRequest struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
	ServerId int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
}

func (m *ServerInfoRequest) Reset()                    { *m = ServerInfoRequest{} }
func (m *ServerInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoRequest) ProtoMessage()               {}
func (*ServerInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *ServerInfoRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ServerInfoRequest) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type ServerInfoResponse struct {
	ServerInfo *ServerInfo `protobuf:"bytes,1,opt,name=serverInfo" json:"serverInfo,omitempty"`
}

func (m *ServerInfoResponse) Reset()                    { *m = ServerInfoResponse{} }
func (m *ServerInfoResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoResponse) ProtoMessage()               {}
func (*ServerInfoResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *ServerInfoResponse) GetServerInfo() *ServerInfo {
	if m != nil {
		return m.ServerInfo
	}
	return nil
}

type ServerInfoByPlatformRequest struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
	ServerId int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
}

func (m *ServerInfoByPlatformRequest) Reset()                    { *m = ServerInfoByPlatformRequest{} }
func (m *ServerInfoByPlatformRequest) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoByPlatformRequest) ProtoMessage()               {}
func (*ServerInfoByPlatformRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *ServerInfoByPlatformRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *ServerInfoByPlatformRequest) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

type ServerInfoByPlatformResponse struct {
	ServerInfo *ServerInfo `protobuf:"bytes,1,opt,name=serverInfo" json:"serverInfo,omitempty"`
}

func (m *ServerInfoByPlatformResponse) Reset()                    { *m = ServerInfoByPlatformResponse{} }
func (m *ServerInfoByPlatformResponse) String() string            { return proto.CompactTextString(m) }
func (*ServerInfoByPlatformResponse) ProtoMessage()               {}
func (*ServerInfoByPlatformResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *ServerInfoByPlatformResponse) GetServerInfo() *ServerInfo {
	if m != nil {
		return m.ServerInfo
	}
	return nil
}

type RefreshMarryPriceListRequest struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
}

func (m *RefreshMarryPriceListRequest) Reset()                    { *m = RefreshMarryPriceListRequest{} }
func (m *RefreshMarryPriceListRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshMarryPriceListRequest) ProtoMessage()               {}
func (*RefreshMarryPriceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *RefreshMarryPriceListRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

type RefreshMarryPriceListResponse struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
}

func (m *RefreshMarryPriceListResponse) Reset()                    { *m = RefreshMarryPriceListResponse{} }
func (m *RefreshMarryPriceListResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshMarryPriceListResponse) ProtoMessage()               {}
func (*RefreshMarryPriceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

func (m *RefreshMarryPriceListResponse) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func init() {
	proto.RegisterType((*PlatformSetting)(nil), "pb.PlatformSetting")
	proto.RegisterType((*PlatformChatSetting)(nil), "pb.PlatformChatSetting")
	proto.RegisterType((*ServerRegisterRequest)(nil), "pb.ServerRegisterRequest")
	proto.RegisterType((*ServerRegisterResponse)(nil), "pb.ServerRegisterResponse")
	proto.RegisterType((*ServerUnregisterRequest)(nil), "pb.ServerUnregisterRequest")
	proto.RegisterType((*ServerUnregisterResponse)(nil), "pb.ServerUnregisterResponse")
	proto.RegisterType((*ServerCrossListRequest)(nil), "pb.ServerCrossListRequest")
	proto.RegisterType((*CrossServerInfo)(nil), "pb.CrossServerInfo")
	proto.RegisterType((*ServerCrossListResponse)(nil), "pb.ServerCrossListResponse")
	proto.RegisterType((*ServerInfo)(nil), "pb.ServerInfo")
	proto.RegisterType((*ServerInfoListRequest)(nil), "pb.ServerInfoListRequest")
	proto.RegisterType((*ServerInfoListResponse)(nil), "pb.ServerInfoListResponse")
	proto.RegisterType((*RefreshServerInfoListRequest)(nil), "pb.RefreshServerInfoListRequest")
	proto.RegisterType((*RefreshServerInfoListResponse)(nil), "pb.RefreshServerInfoListResponse")
	proto.RegisterType((*RefreshSDKListRequest)(nil), "pb.RefreshSDKListRequest")
	proto.RegisterType((*RefreshSDKListResponse)(nil), "pb.RefreshSDKListResponse")
	proto.RegisterType((*ServerInfoRequest)(nil), "pb.ServerInfoRequest")
	proto.RegisterType((*ServerInfoResponse)(nil), "pb.ServerInfoResponse")
	proto.RegisterType((*ServerInfoByPlatformRequest)(nil), "pb.ServerInfoByPlatformRequest")
	proto.RegisterType((*ServerInfoByPlatformResponse)(nil), "pb.ServerInfoByPlatformResponse")
	proto.RegisterType((*RefreshMarryPriceListRequest)(nil), "pb.RefreshMarryPriceListRequest")
	proto.RegisterType((*RefreshMarryPriceListResponse)(nil), "pb.RefreshMarryPriceListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServerManage service

type ServerManageClient interface {
	// 注册
	Register(ctx context.Context, in *ServerRegisterRequest, opts ...grpc.CallOption) (*ServerRegisterResponse, error)
	// 下线
	Unregister(ctx context.Context, in *ServerUnregisterRequest, opts ...grpc.CallOption) (*ServerUnregisterResponse, error)
	// 获取
	GetCrossList(ctx context.Context, in *ServerCrossListRequest, opts ...grpc.CallOption) (*ServerCrossListResponse, error)
	// 获取游戏服务器列表
	GetServerList(ctx context.Context, in *ServerInfoListRequest, opts ...grpc.CallOption) (*ServerInfoListResponse, error)
	// 刷新服务器列表
	Refresh(ctx context.Context, in *RefreshServerInfoListRequest, opts ...grpc.CallOption) (*RefreshServerInfoListResponse, error)
	// 刷新渠道
	RefreshSDK(ctx context.Context, in *RefreshSDKListRequest, opts ...grpc.CallOption) (*RefreshSDKListResponse, error)
	// 获取单服数据
	GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error)
	// 获取单服数据
	GetServerInfoByPlatform(ctx context.Context, in *ServerInfoByPlatformRequest, opts ...grpc.CallOption) (*ServerInfoByPlatformResponse, error)
	// 刷新结婚配置
	RefreshMarryPrice(ctx context.Context, in *RefreshMarryPriceListRequest, opts ...grpc.CallOption) (*RefreshMarryPriceListResponse, error)
}

type serverManageClient struct {
	cc *grpc.ClientConn
}

func NewServerManageClient(cc *grpc.ClientConn) ServerManageClient {
	return &serverManageClient{cc}
}

func (c *serverManageClient) Register(ctx context.Context, in *ServerRegisterRequest, opts ...grpc.CallOption) (*ServerRegisterResponse, error) {
	out := new(ServerRegisterResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) Unregister(ctx context.Context, in *ServerUnregisterRequest, opts ...grpc.CallOption) (*ServerUnregisterResponse, error) {
	out := new(ServerUnregisterResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/Unregister", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) GetCrossList(ctx context.Context, in *ServerCrossListRequest, opts ...grpc.CallOption) (*ServerCrossListResponse, error) {
	out := new(ServerCrossListResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/GetCrossList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) GetServerList(ctx context.Context, in *ServerInfoListRequest, opts ...grpc.CallOption) (*ServerInfoListResponse, error) {
	out := new(ServerInfoListResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/GetServerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) Refresh(ctx context.Context, in *RefreshServerInfoListRequest, opts ...grpc.CallOption) (*RefreshServerInfoListResponse, error) {
	out := new(RefreshServerInfoListResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/Refresh", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) RefreshSDK(ctx context.Context, in *RefreshSDKListRequest, opts ...grpc.CallOption) (*RefreshSDKListResponse, error) {
	out := new(RefreshSDKListResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/RefreshSDK", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) GetServerInfo(ctx context.Context, in *ServerInfoRequest, opts ...grpc.CallOption) (*ServerInfoResponse, error) {
	out := new(ServerInfoResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/GetServerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) GetServerInfoByPlatform(ctx context.Context, in *ServerInfoByPlatformRequest, opts ...grpc.CallOption) (*ServerInfoByPlatformResponse, error) {
	out := new(ServerInfoByPlatformResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/GetServerInfoByPlatform", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverManageClient) RefreshMarryPrice(ctx context.Context, in *RefreshMarryPriceListRequest, opts ...grpc.CallOption) (*RefreshMarryPriceListResponse, error) {
	out := new(RefreshMarryPriceListResponse)
	err := grpc.Invoke(ctx, "/pb.ServerManage/RefreshMarryPrice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServerManage service

type ServerManageServer interface {
	// 注册
	Register(context.Context, *ServerRegisterRequest) (*ServerRegisterResponse, error)
	// 下线
	Unregister(context.Context, *ServerUnregisterRequest) (*ServerUnregisterResponse, error)
	// 获取
	GetCrossList(context.Context, *ServerCrossListRequest) (*ServerCrossListResponse, error)
	// 获取游戏服务器列表
	GetServerList(context.Context, *ServerInfoListRequest) (*ServerInfoListResponse, error)
	// 刷新服务器列表
	Refresh(context.Context, *RefreshServerInfoListRequest) (*RefreshServerInfoListResponse, error)
	// 刷新渠道
	RefreshSDK(context.Context, *RefreshSDKListRequest) (*RefreshSDKListResponse, error)
	// 获取单服数据
	GetServerInfo(context.Context, *ServerInfoRequest) (*ServerInfoResponse, error)
	// 获取单服数据
	GetServerInfoByPlatform(context.Context, *ServerInfoByPlatformRequest) (*ServerInfoByPlatformResponse, error)
	// 刷新结婚配置
	RefreshMarryPrice(context.Context, *RefreshMarryPriceListRequest) (*RefreshMarryPriceListResponse, error)
}

func RegisterServerManageServer(s *grpc.Server, srv ServerManageServer) {
	s.RegisterService(&_ServerManage_serviceDesc, srv)
}

func _ServerManage_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).Register(ctx, req.(*ServerRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerUnregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).Unregister(ctx, req.(*ServerUnregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_GetCrossList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerCrossListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).GetCrossList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/GetCrossList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).GetCrossList(ctx, req.(*ServerCrossListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_GetServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).GetServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/GetServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).GetServerList(ctx, req.(*ServerInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshServerInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).Refresh(ctx, req.(*RefreshServerInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_RefreshSDK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshSDKListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).RefreshSDK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/RefreshSDK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).RefreshSDK(ctx, req.(*RefreshSDKListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/GetServerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).GetServerInfo(ctx, req.(*ServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_GetServerInfoByPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerInfoByPlatformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).GetServerInfoByPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/GetServerInfoByPlatform",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).GetServerInfoByPlatform(ctx, req.(*ServerInfoByPlatformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerManage_RefreshMarryPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshMarryPriceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerManageServer).RefreshMarryPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServerManage/RefreshMarryPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerManageServer).RefreshMarryPrice(ctx, req.(*RefreshMarryPriceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServerManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServerManage",
	HandlerType: (*ServerManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ServerManage_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _ServerManage_Unregister_Handler,
		},
		{
			MethodName: "GetCrossList",
			Handler:    _ServerManage_GetCrossList_Handler,
		},
		{
			MethodName: "GetServerList",
			Handler:    _ServerManage_GetServerList_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _ServerManage_Refresh_Handler,
		},
		{
			MethodName: "RefreshSDK",
			Handler:    _ServerManage_RefreshSDK_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _ServerManage_GetServerInfo_Handler,
		},
		{
			MethodName: "GetServerInfoByPlatform",
			Handler:    _ServerManage_GetServerInfoByPlatform_Handler,
		},
		{
			MethodName: "RefreshMarryPrice",
			Handler:    _ServerManage_RefreshMarryPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_manage.proto",
}

func init() { proto.RegisterFile("server_manage.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 947 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xae, 0xf3, 0xe7, 0x93, 0xc4, 0x69, 0xc7, 0x4a, 0xec, 0x6e, 0x0c, 0x98, 0x55, 0x85,
	0x2a, 0x2e, 0x2c, 0x14, 0xa0, 0x17, 0x54, 0x48, 0x08, 0x17, 0x8a, 0x49, 0x8b, 0xac, 0x4d, 0x5b,
	0x44, 0x2f, 0x40, 0x93, 0x7a, 0xe2, 0x8c, 0xf0, 0xfe, 0x30, 0x3b, 0x29, 0x98, 0x07, 0xe0, 0x65,
	0xb8, 0xe7, 0x21, 0x78, 0x13, 0x2e, 0x78, 0x07, 0x34, 0x7f, 0xbb, 0xb3, 0xb3, 0x6b, 0x93, 0xc0,
	0x55, 0x67, 0xce, 0x39, 0xf3, 0xed, 0x39, 0xdf, 0xf9, 0xce, 0x71, 0x03, 0xdd, 0x9c, 0xb0, 0x37,
	0x84, 0xfd, 0x10, 0xe3, 0x04, 0xcf, 0xc9, 0x28, 0x63, 0x29, 0x4f, 0x91, 0x9f, 0x5d, 0x84, 0x7f,
	0x79, 0x70, 0x38, 0x5d, 0x60, 0x7e, 0x99, 0xb2, 0xf8, 0x9c, 0x70, 0x4e, 0x93, 0x39, 0xba, 0x0f,
	0x07, 0x31, 0x66, 0x6c, 0x79, 0x46, 0x93, 0xd9, 0xf3, 0x65, 0x46, 0xfa, 0xde, 0xd0, 0x7b, 0xb0,
	0x15, 0x55, 0x8d, 0x28, 0x84, 0x7d, 0xbc, 0x58, 0x50, 0x9c, 0xbc, 0x26, 0x5f, 0x2e, 0xf0, 0xbc,
	0xef, 0xcb, 0xa0, 0x8a, 0x0d, 0x0d, 0xa0, 0xcd, 0x19, 0x9e, 0xa9, 0x80, 0x96, 0x0c, 0x28, 0x0d,
	0x68, 0x08, 0x7b, 0xbf, 0x50, 0x9c, 0x7c, 0x4d, 0x13, 0xe9, 0xdf, 0x94, 0x7e, 0xdb, 0x84, 0xde,
	0x87, 0x3b, 0x09, 0xa1, 0xdf, 0x0a, 0x03, 0x4e, 0xbf, 0xa3, 0x32, 0x6c, 0x4b, 0x86, 0xd5, 0xec,
	0x02, 0xed, 0xd7, 0x2b, 0xfa, 0xea, 0x1a, 0x2b, 0xb4, 0x6d, 0x85, 0x66, 0x99, 0xc2, 0xbf, 0x7d,
	0xe8, 0x9a, 0x5a, 0xc7, 0x57, 0x98, 0x9b, 0x7a, 0x8f, 0x61, 0x3b, 0xa6, 0xc9, 0x4b, 0x9a, 0xe9,
	0x42, 0xf5, 0x0d, 0xbd, 0x07, 0x9d, 0x98, 0x26, 0xd3, 0x05, 0x5e, 0x12, 0xf6, 0x94, 0xbc, 0x21,
	0x0b, 0x5d, 0xa3, 0x63, 0x45, 0x01, 0xec, 0xfe, 0x9c, 0xb2, 0xc5, 0x4c, 0x20, 0xa8, 0x22, 0x8b,
	0xbb, 0xa8, 0x40, 0x9e, 0x6d, 0x14, 0x55, 0x68, 0xcd, 0x2e, 0x2a, 0x30, 0xec, 0x09, 0x28, 0x55,
	0xa8, 0x6d, 0x42, 0x1f, 0x40, 0xd7, 0x5c, 0x6d, 0x40, 0x55, 0x6b, 0x93, 0x0b, 0xf5, 0x61, 0x87,
	0x13, 0x1c, 0x0b, 0xbc, 0x1d, 0x19, 0x65, 0xae, 0xe8, 0x01, 0x1c, 0x8a, 0xa3, 0x8d, 0xb3, 0x2b,
	0x23, 0x5c, 0x33, 0x42, 0xb0, 0x99, 0x09, 0x80, 0xb6, 0x74, 0xcb, 0xb3, 0xe8, 0x7e, 0x66, 0x3f,
	0x05, 0xd5, 0x7d, 0xdb, 0x16, 0xfe, 0xee, 0xc1, 0xd1, 0xb9, 0xd4, 0x5d, 0x44, 0xe6, 0x34, 0xe7,
	0xe2, 0xdf, 0x9f, 0xae, 0x49, 0xce, 0xd1, 0xdb, 0x00, 0x4a, 0x90, 0x96, 0xbc, 0x2c, 0x8b, 0x60,
	0x34, 0xd3, 0x8d, 0xd2, 0x9c, 0x17, 0x77, 0xe1, 0x53, 0x91, 0x93, 0x99, 0x61, 0xdb, 0xdc, 0x2d,
	0x5f, 0x26, 0x59, 0x6e, 0x17, 0xbe, 0xac, 0xfc, 0xe6, 0x34, 0x65, 0x5c, 0x93, 0x6b, 0x59, 0xc2,
	0x3f, 0x7c, 0x38, 0x76, 0xb3, 0xcd, 0xb3, 0x34, 0xc9, 0x09, 0xea, 0x80, 0x4f, 0x67, 0x3a, 0x4d,
	0x9f, 0xce, 0x84, 0xac, 0x73, 0x8e, 0x19, 0x7f, 0x4e, 0x63, 0x22, 0xf3, 0x6b, 0x45, 0xa5, 0xa1,
	0x3e, 0x3e, 0xad, 0xa6, 0xf1, 0xb9, 0x0f, 0x07, 0x72, 0x12, 0xce, 0xab, 0xf9, 0x56, 0x8d, 0xa2,
	0x7d, 0xf9, 0xec, 0xc7, 0xa7, 0x34, 0x17, 0x19, 0xb7, 0x44, 0xfb, 0xf4, 0x15, 0x7d, 0x0a, 0x87,
	0x59, 0x75, 0x6e, 0xa5, 0x0c, 0xf6, 0x4e, 0xbb, 0xa3, 0xec, 0x62, 0xe4, 0x8c, 0x74, 0xe4, 0xc6,
	0xa2, 0x09, 0x74, 0xb3, 0xfa, 0x28, 0x48, 0x8d, 0xec, 0x9d, 0xf6, 0x6c, 0x08, 0xcb, 0x1d, 0x35,
	0xbd, 0x09, 0x3f, 0x86, 0x9e, 0xca, 0xf7, 0x45, 0xc2, 0x9c, 0x3e, 0xdb, 0xbd, 0xf2, 0xaa, 0xbd,
	0x0a, 0x1f, 0x42, 0xbf, 0xfe, 0x4c, 0x13, 0xbe, 0xee, 0xdd, 0x47, 0xa6, 0x4d, 0x63, 0x96, 0xe6,
	0xb9, 0xe0, 0xe2, 0x26, 0x5f, 0x8b, 0xe1, 0x50, 0xc6, 0x6b, 0x66, 0x93, 0xcb, 0xf4, 0x26, 0x22,
	0x2c, 0xc4, 0xe4, 0xaf, 0x15, 0x53, 0xab, 0x26, 0xa6, 0x97, 0x86, 0x13, 0x2b, 0x49, 0x5d, 0xdb,
	0x23, 0xe8, 0xe4, 0x45, 0x12, 0xb2, 0xb3, 0xde, 0xb0, 0x65, 0xfa, 0xe6, 0xe4, 0x18, 0x39, 0xa1,
	0xe1, 0x6f, 0x1e, 0x80, 0x55, 0x82, 0x2b, 0x4c, 0x04, 0x9b, 0x09, 0xd6, 0x9a, 0x6c, 0x47, 0xf2,
	0x2c, 0x63, 0xd4, 0x5e, 0x6a, 0x47, 0x3e, 0xcd, 0xd0, 0x1d, 0x68, 0xf1, 0x62, 0xdb, 0x8a, 0xa3,
	0xd8, 0x7f, 0x39, 0xc7, 0xfc, 0x3a, 0xd7, 0x53, 0xa1, 0x6f, 0x82, 0x00, 0x46, 0xe2, 0x94, 0x93,
	0x49, 0x26, 0xb5, 0xd5, 0x8e, 0x8a, 0x7b, 0x38, 0x36, 0xa3, 0x6d, 0x52, 0xb3, 0x9a, 0x50, 0x8c,
	0xae, 0xe7, 0x8c, 0x6e, 0x07, 0xfc, 0xb9, 0x19, 0x68, 0x7f, 0x1e, 0x87, 0x53, 0xd3, 0xca, 0x12,
	0x44, 0x93, 0xf4, 0x70, 0x05, 0x49, 0x1d, 0x41, 0xd2, 0x1a, 0x7e, 0x3e, 0x81, 0x41, 0x44, 0x2e,
	0x19, 0xc9, 0xaf, 0x6e, 0x9d, 0x5d, 0xf8, 0x08, 0xde, 0x5a, 0xf1, 0xb6, 0x54, 0xe5, 0xca, 0xc7,
	0x3d, 0x38, 0x32, 0x8f, 0x1f, 0x9f, 0x59, 0x5f, 0x0c, 0xfb, 0x70, 0xec, 0x3a, 0x14, 0x5c, 0x78,
	0x06, 0x77, 0xad, 0x4a, 0x6e, 0x40, 0x9f, 0xad, 0x6f, 0xdf, 0xd1, 0xf7, 0x63, 0x40, 0x36, 0x98,
	0xce, 0x78, 0x64, 0x64, 0x2a, 0xac, 0x12, 0xaf, 0x4e, 0xa1, 0x15, 0x11, 0xbe, 0x80, 0x93, 0xd2,
	0xf3, 0xf9, 0xd2, 0xac, 0x80, 0xff, 0x9b, 0xdc, 0x37, 0x30, 0x68, 0x86, 0xfd, 0x8f, 0x69, 0x96,
	0x5d, 0x7e, 0x26, 0x76, 0xea, 0x94, 0xd1, 0xd7, 0xe4, 0xf6, 0x5d, 0x76, 0xdf, 0xfe, 0x7b, 0x97,
	0x4f, 0xff, 0xdc, 0x82, 0x7d, 0x95, 0xd3, 0x33, 0xf9, 0x1f, 0x29, 0x34, 0x86, 0x5d, 0xf3, 0x6b,
	0x81, 0xee, 0x95, 0x19, 0x3b, 0xbf, 0x77, 0x41, 0xd0, 0xe4, 0xd2, 0x32, 0xd8, 0x40, 0x13, 0x80,
	0x72, 0x07, 0xa2, 0x93, 0x32, 0xb6, 0xb6, 0x50, 0x83, 0x41, 0xb3, 0xd3, 0x82, 0xda, 0x7f, 0x42,
	0x78, 0xb1, 0x74, 0x90, 0xf5, 0x61, 0x77, 0x5d, 0x06, 0x27, 0x8d, 0xbe, 0x02, 0xea, 0x2b, 0x38,
	0x78, 0x42, 0xb8, 0xf2, 0x4b, 0xac, 0x7b, 0xd5, 0x8e, 0xd8, 0x50, 0x41, 0x93, 0xab, 0x40, 0x9a,
	0xc2, 0x8e, 0xa6, 0x1c, 0x0d, 0x45, 0xe0, 0xba, 0x09, 0x0d, 0xde, 0x5d, 0x13, 0x51, 0x20, 0x7e,
	0x01, 0x50, 0x0e, 0x95, 0x4a, 0xac, 0x71, 0xfa, 0x54, 0x62, 0x2b, 0xe6, 0x6f, 0x03, 0x7d, 0x66,
	0x95, 0x28, 0xf7, 0xe9, 0x91, 0x23, 0x3a, 0x8d, 0x72, 0xec, 0x9a, 0x0b, 0x84, 0xef, 0xa1, 0x57,
	0x41, 0x28, 0xc5, 0x8d, 0xde, 0xa9, 0x3e, 0xaa, 0x4d, 0x53, 0x30, 0x5c, 0x1d, 0x50, 0xe0, 0xbf,
	0x82, 0xbb, 0x35, 0xb5, 0x56, 0x48, 0x6c, 0x1c, 0x80, 0x0a, 0x89, 0xcd, 0x32, 0x0f, 0x37, 0x2e,
	0xb6, 0xe5, 0x5f, 0x01, 0x1f, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xfe, 0x54, 0xa4, 0x1c,
	0x0c, 0x00, 0x00,
}
