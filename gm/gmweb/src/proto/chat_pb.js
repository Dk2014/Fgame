/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var basic_pb = require('./basic_pb.js');
goog.exportSymbol('proto.pb.CGChatMinitor', null, global);
goog.exportSymbol('proto.pb.GCChatMinitor', null, global);
goog.exportSymbol('proto.pb.GCChatMinitorMsg', null, global);
goog.exportSymbol('proto.pb.cgchatminitor', null, global);
goog.exportSymbol('proto.pb.gcchatminitor', null, global);
goog.exportSymbol('proto.pb.gcchatminitormsg', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.CGChatMinitor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.pb.CGChatMinitor.repeatedFields_, null);
};
goog.inherits(proto.pb.CGChatMinitor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.CGChatMinitor.displayName = 'proto.pb.CGChatMinitor';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.pb.CGChatMinitor.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.CGChatMinitor.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.CGChatMinitor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.CGChatMinitor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CGChatMinitor.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverlistList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.CGChatMinitor}
 */
proto.pb.CGChatMinitor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.CGChatMinitor;
  return proto.pb.CGChatMinitor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.CGChatMinitor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.CGChatMinitor}
 */
proto.pb.CGChatMinitor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addServerlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.CGChatMinitor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.CGChatMinitor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.CGChatMinitor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.CGChatMinitor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerlistList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
};


/**
 * repeated int32 serverlist = 1;
 * @return {!Array.<number>}
 */
proto.pb.CGChatMinitor.prototype.getServerlistList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.pb.CGChatMinitor.prototype.setServerlistList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.pb.CGChatMinitor.prototype.addServerlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.pb.CGChatMinitor.prototype.clearServerlistList = function() {
  this.setServerlistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GCChatMinitor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GCChatMinitor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.GCChatMinitor.displayName = 'proto.pb.GCChatMinitor';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GCChatMinitor.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GCChatMinitor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GCChatMinitor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GCChatMinitor.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GCChatMinitor}
 */
proto.pb.GCChatMinitor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GCChatMinitor;
  return proto.pb.GCChatMinitor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GCChatMinitor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GCChatMinitor}
 */
proto.pb.GCChatMinitor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPlayerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GCChatMinitor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GCChatMinitor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GCChatMinitor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GCChatMinitor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * required int64 playerId = 1;
 * @return {number}
 */
proto.pb.GCChatMinitor.prototype.getPlayerid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitor.prototype.setPlayerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.GCChatMinitor.prototype.clearPlayerid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitor.prototype.hasPlayerid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.pb.GCChatMinitorMsg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.pb.GCChatMinitorMsg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.pb.GCChatMinitorMsg.displayName = 'proto.pb.GCChatMinitorMsg';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.pb.GCChatMinitorMsg.prototype.toObject = function(opt_includeInstance) {
  return proto.pb.GCChatMinitorMsg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.pb.GCChatMinitorMsg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GCChatMinitorMsg.toObject = function(includeInstance, msg) {
  var f, obj = {
    playerid: jspb.Message.getField(msg, 1),
    playername: jspb.Message.getField(msg, 2),
    viplevel: jspb.Message.getField(msg, 3),
    gamelevel: jspb.Message.getField(msg, 4),
    chattype: jspb.Message.getField(msg, 5),
    chatmethod: jspb.Message.getField(msg, 6),
    chatmsg: jspb.Message.getField(msg, 7),
    chattime: jspb.Message.getField(msg, 8),
    toplayerid: jspb.Message.getField(msg, 9),
    toplayername: jspb.Message.getField(msg, 10),
    ip: jspb.Message.getField(msg, 11),
    centerplatformid: jspb.Message.getField(msg, 12),
    centerserverid: jspb.Message.getField(msg, 13),
    userid: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.pb.GCChatMinitorMsg}
 */
proto.pb.GCChatMinitorMsg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.pb.GCChatMinitorMsg;
  return proto.pb.GCChatMinitorMsg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.pb.GCChatMinitorMsg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.pb.GCChatMinitorMsg}
 */
proto.pb.GCChatMinitorMsg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayerid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlayername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setViplevel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGamelevel(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChattype(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChatmethod(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatmsg(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChattime(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setToplayerid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setToplayername(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCenterplatformid(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCenterserverid(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.pb.GCChatMinitorMsg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.pb.GCChatMinitorMsg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.pb.GCChatMinitorMsg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.pb.GCChatMinitorMsg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeString(
      14,
      f
    );
  }
};


/**
 * required string playerId = 1;
 * @return {string}
 */
proto.pb.GCChatMinitorMsg.prototype.getPlayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.pb.GCChatMinitorMsg.prototype.setPlayerid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearPlayerid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasPlayerid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string playerName = 2;
 * @return {string}
 */
proto.pb.GCChatMinitorMsg.prototype.getPlayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.pb.GCChatMinitorMsg.prototype.setPlayername = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearPlayername = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasPlayername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 vipLevel = 3;
 * @return {number}
 */
proto.pb.GCChatMinitorMsg.prototype.getViplevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitorMsg.prototype.setViplevel = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearViplevel = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasViplevel = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 gameLevel = 4;
 * @return {number}
 */
proto.pb.GCChatMinitorMsg.prototype.getGamelevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitorMsg.prototype.setGamelevel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearGamelevel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasGamelevel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 chatType = 5;
 * @return {number}
 */
proto.pb.GCChatMinitorMsg.prototype.getChattype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitorMsg.prototype.setChattype = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearChattype = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasChattype = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required int32 chatMethod = 6;
 * @return {number}
 */
proto.pb.GCChatMinitorMsg.prototype.getChatmethod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitorMsg.prototype.setChatmethod = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearChatmethod = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasChatmethod = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required string chatMsg = 7;
 * @return {string}
 */
proto.pb.GCChatMinitorMsg.prototype.getChatmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.pb.GCChatMinitorMsg.prototype.setChatmsg = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearChatmsg = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasChatmsg = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required int64 chatTime = 8;
 * @return {number}
 */
proto.pb.GCChatMinitorMsg.prototype.getChattime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitorMsg.prototype.setChattime = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearChattime = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasChattime = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string toPlayerId = 9;
 * @return {string}
 */
proto.pb.GCChatMinitorMsg.prototype.getToplayerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.pb.GCChatMinitorMsg.prototype.setToplayerid = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearToplayerid = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasToplayerid = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string toPlayerName = 10;
 * @return {string}
 */
proto.pb.GCChatMinitorMsg.prototype.getToplayername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.pb.GCChatMinitorMsg.prototype.setToplayername = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearToplayername = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasToplayername = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string ip = 11;
 * @return {string}
 */
proto.pb.GCChatMinitorMsg.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.pb.GCChatMinitorMsg.prototype.setIp = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearIp = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasIp = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required int32 centerPlatformId = 12;
 * @return {number}
 */
proto.pb.GCChatMinitorMsg.prototype.getCenterplatformid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitorMsg.prototype.setCenterplatformid = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearCenterplatformid = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasCenterplatformid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * required int32 centerServerId = 13;
 * @return {number}
 */
proto.pb.GCChatMinitorMsg.prototype.getCenterserverid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.pb.GCChatMinitorMsg.prototype.setCenterserverid = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearCenterserverid = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasCenterserverid = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * required string userId = 14;
 * @return {string}
 */
proto.pb.GCChatMinitorMsg.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/** @param {string} value */
proto.pb.GCChatMinitorMsg.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.pb.GCChatMinitorMsg.prototype.clearUserid = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.pb.GCChatMinitorMsg.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `cgchatminitor`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.pb.CGChatMinitor>}
 */
proto.pb.cgchatminitor = new jspb.ExtensionFieldInfo(
    4001,
    {cgchatminitor: 0},
    proto.pb.CGChatMinitor,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.pb.CGChatMinitor.toObject),
    0);

basic_pb.Message.extensionsBinary[4001] = new jspb.ExtensionFieldBinaryInfo(
    proto.pb.cgchatminitor,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.pb.CGChatMinitor.serializeBinaryToWriter,
    proto.pb.CGChatMinitor.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
basic_pb.Message.extensions[4001] = proto.pb.cgchatminitor;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `gcchatminitor`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.pb.GCChatMinitor>}
 */
proto.pb.gcchatminitor = new jspb.ExtensionFieldInfo(
    4002,
    {gcchatminitor: 0},
    proto.pb.GCChatMinitor,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.pb.GCChatMinitor.toObject),
    0);

basic_pb.Message.extensionsBinary[4002] = new jspb.ExtensionFieldBinaryInfo(
    proto.pb.gcchatminitor,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.pb.GCChatMinitor.serializeBinaryToWriter,
    proto.pb.GCChatMinitor.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
basic_pb.Message.extensions[4002] = proto.pb.gcchatminitor;


/**
 * A tuple of {field number, class constructor} for the extension
 * field named `gcchatminitormsg`.
 * @type {!jspb.ExtensionFieldInfo.<!proto.pb.GCChatMinitorMsg>}
 */
proto.pb.gcchatminitormsg = new jspb.ExtensionFieldInfo(
    4003,
    {gcchatminitormsg: 0},
    proto.pb.GCChatMinitorMsg,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.pb.GCChatMinitorMsg.toObject),
    0);

basic_pb.Message.extensionsBinary[4003] = new jspb.ExtensionFieldBinaryInfo(
    proto.pb.gcchatminitormsg,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.pb.GCChatMinitorMsg.serializeBinaryToWriter,
    proto.pb.GCChatMinitorMsg.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
basic_pb.Message.extensions[4003] = proto.pb.gcchatminitormsg;

goog.object.extend(exports, proto.pb);
