// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chess.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ChessBreifInfo struct {
	ChessDropId      *int32 `protobuf:"varint,1,req,name=chessDropId" json:"chessDropId,omitempty"`
	Typ              *int32 `protobuf:"varint,2,req,name=typ" json:"typ,omitempty"`
	UseTimes         *int32 `protobuf:"varint,3,req,name=useTimes" json:"useTimes,omitempty"`
	TotalUseTimes    *int32 `protobuf:"varint,4,req,name=totalUseTimes" json:"totalUseTimes,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ChessBreifInfo) Reset()                    { *m = ChessBreifInfo{} }
func (m *ChessBreifInfo) String() string            { return proto.CompactTextString(m) }
func (*ChessBreifInfo) ProtoMessage()               {}
func (*ChessBreifInfo) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{0} }

func (m *ChessBreifInfo) GetChessDropId() int32 {
	if m != nil && m.ChessDropId != nil {
		return *m.ChessDropId
	}
	return 0
}

func (m *ChessBreifInfo) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

func (m *ChessBreifInfo) GetUseTimes() int32 {
	if m != nil && m.UseTimes != nil {
		return *m.UseTimes
	}
	return 0
}

func (m *ChessBreifInfo) GetTotalUseTimes() int32 {
	if m != nil && m.TotalUseTimes != nil {
		return *m.TotalUseTimes
	}
	return 0
}

type ChessLog struct {
	CreateTime       *int64  `protobuf:"varint,1,req,name=createTime" json:"createTime,omitempty"`
	PlayerName       *string `protobuf:"bytes,2,req,name=playerName" json:"playerName,omitempty"`
	ItemId           *int32  `protobuf:"varint,3,req,name=itemId" json:"itemId,omitempty"`
	ItemNum          *int32  `protobuf:"varint,4,req,name=itemNum" json:"itemNum,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ChessLog) Reset()                    { *m = ChessLog{} }
func (m *ChessLog) String() string            { return proto.CompactTextString(m) }
func (*ChessLog) ProtoMessage()               {}
func (*ChessLog) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{1} }

func (m *ChessLog) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *ChessLog) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *ChessLog) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ChessLog) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

type CSChessInfoGet struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSChessInfoGet) Reset()                    { *m = CSChessInfoGet{} }
func (m *CSChessInfoGet) String() string            { return proto.CompactTextString(m) }
func (*CSChessInfoGet) ProtoMessage()               {}
func (*CSChessInfoGet) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{2} }

type SCChessInfoGet struct {
	ChessInfo        []*ChessBreifInfo `protobuf:"bytes,1,rep,name=chessInfo" json:"chessInfo,omitempty"`
	LogList          []*ChessLog       `protobuf:"bytes,2,rep,name=logList" json:"logList,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *SCChessInfoGet) Reset()                    { *m = SCChessInfoGet{} }
func (m *SCChessInfoGet) String() string            { return proto.CompactTextString(m) }
func (*SCChessInfoGet) ProtoMessage()               {}
func (*SCChessInfoGet) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{3} }

func (m *SCChessInfoGet) GetChessInfo() []*ChessBreifInfo {
	if m != nil {
		return m.ChessInfo
	}
	return nil
}

func (m *SCChessInfoGet) GetLogList() []*ChessLog {
	if m != nil {
		return m.LogList
	}
	return nil
}

type CSChessLogIncr struct {
	LogTime          *int64 `protobuf:"varint,1,req,name=logTime" json:"logTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSChessLogIncr) Reset()                    { *m = CSChessLogIncr{} }
func (m *CSChessLogIncr) String() string            { return proto.CompactTextString(m) }
func (*CSChessLogIncr) ProtoMessage()               {}
func (*CSChessLogIncr) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{4} }

func (m *CSChessLogIncr) GetLogTime() int64 {
	if m != nil && m.LogTime != nil {
		return *m.LogTime
	}
	return 0
}

type SCChessLogIncr struct {
	LogList          []*ChessLog `protobuf:"bytes,1,rep,name=logList" json:"logList,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SCChessLogIncr) Reset()                    { *m = SCChessLogIncr{} }
func (m *SCChessLogIncr) String() string            { return proto.CompactTextString(m) }
func (*SCChessLogIncr) ProtoMessage()               {}
func (*SCChessLogIncr) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{5} }

func (m *SCChessLogIncr) GetLogList() []*ChessLog {
	if m != nil {
		return m.LogList
	}
	return nil
}

type CSChessAttend struct {
	Typ              *int32 `protobuf:"varint,1,req,name=typ" json:"typ,omitempty"`
	LogTime          *int64 `protobuf:"varint,2,req,name=logTime" json:"logTime,omitempty"`
	AutoFlag         *bool  `protobuf:"varint,3,req,name=autoFlag" json:"autoFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSChessAttend) Reset()                    { *m = CSChessAttend{} }
func (m *CSChessAttend) String() string            { return proto.CompactTextString(m) }
func (*CSChessAttend) ProtoMessage()               {}
func (*CSChessAttend) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{6} }

func (m *CSChessAttend) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

func (m *CSChessAttend) GetLogTime() int64 {
	if m != nil && m.LogTime != nil {
		return *m.LogTime
	}
	return 0
}

func (m *CSChessAttend) GetAutoFlag() bool {
	if m != nil && m.AutoFlag != nil {
		return *m.AutoFlag
	}
	return false
}

type SCChessAttend struct {
	Typ              *int32      `protobuf:"varint,1,req,name=typ" json:"typ,omitempty"`
	DropInfo         []*DropInfo `protobuf:"bytes,2,rep,name=dropInfo" json:"dropInfo,omitempty"`
	LogList          []*ChessLog `protobuf:"bytes,3,rep,name=logList" json:"logList,omitempty"`
	AutoFlag         *bool       `protobuf:"varint,4,req,name=autoFlag" json:"autoFlag,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SCChessAttend) Reset()                    { *m = SCChessAttend{} }
func (m *SCChessAttend) String() string            { return proto.CompactTextString(m) }
func (*SCChessAttend) ProtoMessage()               {}
func (*SCChessAttend) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{7} }

func (m *SCChessAttend) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

func (m *SCChessAttend) GetDropInfo() []*DropInfo {
	if m != nil {
		return m.DropInfo
	}
	return nil
}

func (m *SCChessAttend) GetLogList() []*ChessLog {
	if m != nil {
		return m.LogList
	}
	return nil
}

func (m *SCChessAttend) GetAutoFlag() bool {
	if m != nil && m.AutoFlag != nil {
		return *m.AutoFlag
	}
	return false
}

type CSChessAttendBatch struct {
	Typ              *int32 `protobuf:"varint,1,req,name=typ" json:"typ,omitempty"`
	AttendNum        *int32 `protobuf:"varint,2,req,name=attendNum" json:"attendNum,omitempty"`
	LogTime          *int64 `protobuf:"varint,3,req,name=logTime" json:"logTime,omitempty"`
	AutoFlag         *bool  `protobuf:"varint,4,req,name=autoFlag" json:"autoFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSChessAttendBatch) Reset()                    { *m = CSChessAttendBatch{} }
func (m *CSChessAttendBatch) String() string            { return proto.CompactTextString(m) }
func (*CSChessAttendBatch) ProtoMessage()               {}
func (*CSChessAttendBatch) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{8} }

func (m *CSChessAttendBatch) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

func (m *CSChessAttendBatch) GetAttendNum() int32 {
	if m != nil && m.AttendNum != nil {
		return *m.AttendNum
	}
	return 0
}

func (m *CSChessAttendBatch) GetLogTime() int64 {
	if m != nil && m.LogTime != nil {
		return *m.LogTime
	}
	return 0
}

func (m *CSChessAttendBatch) GetAutoFlag() bool {
	if m != nil && m.AutoFlag != nil {
		return *m.AutoFlag
	}
	return false
}

type SCChessAttendBatch struct {
	Typ              *int32      `protobuf:"varint,1,req,name=typ" json:"typ,omitempty"`
	DropList         []*DropInfo `protobuf:"bytes,2,rep,name=dropList" json:"dropList,omitempty"`
	LogList          []*ChessLog `protobuf:"bytes,3,rep,name=logList" json:"logList,omitempty"`
	AutoFlag         *bool       `protobuf:"varint,4,req,name=autoFlag" json:"autoFlag,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SCChessAttendBatch) Reset()                    { *m = SCChessAttendBatch{} }
func (m *SCChessAttendBatch) String() string            { return proto.CompactTextString(m) }
func (*SCChessAttendBatch) ProtoMessage()               {}
func (*SCChessAttendBatch) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{9} }

func (m *SCChessAttendBatch) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

func (m *SCChessAttendBatch) GetDropList() []*DropInfo {
	if m != nil {
		return m.DropList
	}
	return nil
}

func (m *SCChessAttendBatch) GetLogList() []*ChessLog {
	if m != nil {
		return m.LogList
	}
	return nil
}

func (m *SCChessAttendBatch) GetAutoFlag() bool {
	if m != nil && m.AutoFlag != nil {
		return *m.AutoFlag
	}
	return false
}

type CSChessChanged struct {
	Typ              *int32 `protobuf:"varint,1,req,name=typ" json:"typ,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSChessChanged) Reset()                    { *m = CSChessChanged{} }
func (m *CSChessChanged) String() string            { return proto.CompactTextString(m) }
func (*CSChessChanged) ProtoMessage()               {}
func (*CSChessChanged) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{10} }

func (m *CSChessChanged) GetTyp() int32 {
	if m != nil && m.Typ != nil {
		return *m.Typ
	}
	return 0
}

type SCChessChanged struct {
	ChessDropId      *int32 `protobuf:"varint,1,req,name=chessDropId" json:"chessDropId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCChessChanged) Reset()                    { *m = SCChessChanged{} }
func (m *SCChessChanged) String() string            { return proto.CompactTextString(m) }
func (*SCChessChanged) ProtoMessage()               {}
func (*SCChessChanged) Descriptor() ([]byte, []int) { return fileDescriptor16, []int{11} }

func (m *SCChessChanged) GetChessDropId() int32 {
	if m != nil && m.ChessDropId != nil {
		return *m.ChessDropId
	}
	return 0
}

func init() {
	proto.RegisterType((*ChessBreifInfo)(nil), "ui.ChessBreifInfo")
	proto.RegisterType((*ChessLog)(nil), "ui.ChessLog")
	proto.RegisterType((*CSChessInfoGet)(nil), "ui.CSChessInfoGet")
	proto.RegisterType((*SCChessInfoGet)(nil), "ui.SCChessInfoGet")
	proto.RegisterType((*CSChessLogIncr)(nil), "ui.CSChessLogIncr")
	proto.RegisterType((*SCChessLogIncr)(nil), "ui.SCChessLogIncr")
	proto.RegisterType((*CSChessAttend)(nil), "ui.CSChessAttend")
	proto.RegisterType((*SCChessAttend)(nil), "ui.SCChessAttend")
	proto.RegisterType((*CSChessAttendBatch)(nil), "ui.CSChessAttendBatch")
	proto.RegisterType((*SCChessAttendBatch)(nil), "ui.SCChessAttendBatch")
	proto.RegisterType((*CSChessChanged)(nil), "ui.CSChessChanged")
	proto.RegisterType((*SCChessChanged)(nil), "ui.SCChessChanged")
}

func init() { proto.RegisterFile("chess.proto", fileDescriptor16) }

var fileDescriptor16 = []byte{
	// 379 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4f, 0x6b, 0xab, 0x40,
	0x14, 0xc5, 0x51, 0xf3, 0x5e, 0xcc, 0xcd, 0x8b, 0x2f, 0x9d, 0x52, 0x90, 0x42, 0x4a, 0x2a, 0x04,
	0xb2, 0x4a, 0xa1, 0x5f, 0xa0, 0x34, 0x86, 0x16, 0x41, 0xb2, 0x49, 0xff, 0x2c, 0xba, 0x1a, 0x74,
	0x62, 0x04, 0x75, 0x64, 0x1c, 0x17, 0xf9, 0xf6, 0x65, 0x26, 0x33, 0x56, 0x13, 0x57, 0x5d, 0xde,
	0x33, 0xd7, 0xdf, 0xb9, 0xe7, 0x5e, 0x84, 0x71, 0x74, 0x20, 0x55, 0xb5, 0x2a, 0x19, 0xe5, 0x14,
	0x99, 0x75, 0x7a, 0x0b, 0x31, 0xa3, 0xe5, 0xa9, 0xf6, 0xbe, 0xc0, 0xf1, 0xc5, 0xf3, 0x9a, 0x91,
	0x74, 0x1f, 0x14, 0x7b, 0x8a, 0xae, 0xd5, 0x07, 0x1b, 0x46, 0xcb, 0x20, 0x76, 0x8d, 0xb9, 0xb9,
	0xfc, 0x83, 0xc6, 0x60, 0xf1, 0x63, 0xe9, 0x9a, 0xb2, 0x98, 0x82, 0x5d, 0x57, 0xe4, 0x2d, 0xcd,
	0x49, 0xe5, 0x5a, 0x52, 0xb9, 0x81, 0x09, 0xa7, 0x1c, 0x67, 0xef, 0x5a, 0x1e, 0x08, 0xd9, 0xdb,
	0x81, 0x2d, 0xe1, 0x21, 0x4d, 0x10, 0x02, 0x88, 0x18, 0xc1, 0x5c, 0x36, 0x48, 0xaa, 0x25, 0xb4,
	0x32, 0xc3, 0x47, 0xc2, 0xb6, 0x38, 0x27, 0x12, 0x3e, 0x42, 0x0e, 0xfc, 0x4d, 0x39, 0xc9, 0x83,
	0x58, 0xa1, 0xff, 0xc3, 0x50, 0xd4, 0xdb, 0x3a, 0x57, 0xd0, 0x29, 0x38, 0xfe, 0x4e, 0x62, 0xc5,
	0xb8, 0xaf, 0x84, 0x7b, 0x1f, 0xe0, 0xec, 0xfc, 0xb6, 0x82, 0x16, 0x30, 0x8a, 0x74, 0xed, 0x1a,
	0x73, 0x6b, 0x39, 0x7e, 0x44, 0xab, 0x3a, 0x5d, 0x9d, 0x45, 0x9d, 0xc1, 0x30, 0xa3, 0x49, 0x98,
	0x56, 0xdc, 0x35, 0x65, 0xd3, 0xbf, 0xa6, 0x29, 0xa4, 0x89, 0x77, 0xdf, 0x38, 0x85, 0x34, 0x09,
	0x8a, 0x88, 0x89, 0x61, 0x32, 0x9a, 0xfc, 0x24, 0xf0, 0x1e, 0x1a, 0x6b, 0xdd, 0xd2, 0x62, 0x1a,
	0x3d, 0xcc, 0x27, 0x98, 0x28, 0xe6, 0x33, 0xe7, 0xa4, 0x88, 0xf5, 0x66, 0x0d, 0x1d, 0x56, 0xf3,
	0x4d, 0xb9, 0xa1, 0x29, 0xd8, 0xb8, 0xe6, 0xf4, 0x25, 0xc3, 0x89, 0xdc, 0x87, 0xed, 0xe5, 0x30,
	0x51, 0x8e, 0x7d, 0x80, 0x3b, 0xb0, 0xc5, 0x71, 0x65, 0xee, 0x56, 0xa4, 0x8d, 0xd2, 0xda, 0xd3,
	0x59, 0x97, 0xd3, 0x75, 0xec, 0x06, 0xd2, 0xee, 0x13, 0x50, 0x67, 0xde, 0x35, 0xe6, 0xd1, 0xa1,
	0xeb, 0x79, 0x05, 0x23, 0x2c, 0xdf, 0xc4, 0x8d, 0xcc, 0xf3, 0x1c, 0xd6, 0x45, 0x8e, 0x13, 0x98,
	0x01, 0xea, 0xe4, 0xe8, 0x01, 0xab, 0x30, 0xe7, 0xf7, 0xf9, 0x7d, 0x98, 0x59, 0x73, 0x50, 0xff,
	0x80, 0x8b, 0x84, 0x74, 0x97, 0xe7, 0x2d, 0x9a, 0x63, 0xea, 0xe7, 0xbe, 0x7f, 0xe1, 0x3b, 0x00,
	0x00, 0xff, 0xff, 0x56, 0x53, 0x1f, 0xa4, 0x50, 0x03, 0x00, 0x00,
}
