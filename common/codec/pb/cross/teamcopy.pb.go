// Code generated by protoc-gen-go. DO NOT EDIT.
// source: teamcopy.proto

package cross

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TeamPlayer struct {
	PlayerId           *int64        `protobuf:"varint,1,req,name=playerId" json:"playerId,omitempty"`
	Force              *int64        `protobuf:"varint,2,req,name=force" json:"force,omitempty"`
	Online             *bool         `protobuf:"varint,3,req,name=online" json:"online,omitempty"`
	Name               *string       `protobuf:"bytes,4,req,name=name" json:"name,omitempty"`
	Level              *int32        `protobuf:"varint,5,req,name=level" json:"level,omitempty"`
	Role               *int32        `protobuf:"varint,6,req,name=role" json:"role,omitempty"`
	Sex                *int32        `protobuf:"varint,7,req,name=sex" json:"sex,omitempty"`
	FashionId          *int32        `protobuf:"varint,8,req,name=fashionId" json:"fashionId,omitempty"`
	ServerId           *int32        `protobuf:"varint,9,req,name=serverId" json:"serverId,omitempty"`
	BattlePropertyData *PropertyData `protobuf:"bytes,10,req,name=battlePropertyData" json:"battlePropertyData,omitempty"`
	SkillList          []*SkillData  `protobuf:"bytes,11,rep,name=skillList" json:"skillList,omitempty"`
	Purpose            *int32        `protobuf:"varint,12,req,name=purpose" json:"purpose,omitempty"`
	XXX_unrecognized   []byte        `json:"-"`
}

func (m *TeamPlayer) Reset()                    { *m = TeamPlayer{} }
func (m *TeamPlayer) String() string            { return proto.CompactTextString(m) }
func (*TeamPlayer) ProtoMessage()               {}
func (*TeamPlayer) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{0} }

func (m *TeamPlayer) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *TeamPlayer) GetForce() int64 {
	if m != nil && m.Force != nil {
		return *m.Force
	}
	return 0
}

func (m *TeamPlayer) GetOnline() bool {
	if m != nil && m.Online != nil {
		return *m.Online
	}
	return false
}

func (m *TeamPlayer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *TeamPlayer) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *TeamPlayer) GetRole() int32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

func (m *TeamPlayer) GetSex() int32 {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return 0
}

func (m *TeamPlayer) GetFashionId() int32 {
	if m != nil && m.FashionId != nil {
		return *m.FashionId
	}
	return 0
}

func (m *TeamPlayer) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *TeamPlayer) GetBattlePropertyData() *PropertyData {
	if m != nil {
		return m.BattlePropertyData
	}
	return nil
}

func (m *TeamPlayer) GetSkillList() []*SkillData {
	if m != nil {
		return m.SkillList
	}
	return nil
}

func (m *TeamPlayer) GetPurpose() int32 {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return 0
}

type SITeamCopyStartBattle struct {
	PlayerList       []*TeamPlayer `protobuf:"bytes,1,rep,name=playerList" json:"playerList,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *SITeamCopyStartBattle) Reset()                    { *m = SITeamCopyStartBattle{} }
func (m *SITeamCopyStartBattle) String() string            { return proto.CompactTextString(m) }
func (*SITeamCopyStartBattle) ProtoMessage()               {}
func (*SITeamCopyStartBattle) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{1} }

func (m *SITeamCopyStartBattle) GetPlayerList() []*TeamPlayer {
	if m != nil {
		return m.PlayerList
	}
	return nil
}

type ISTeamCopyStartBattle struct {
	Sucess           *bool  `protobuf:"varint,1,req,name=sucess" json:"sucess,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISTeamCopyStartBattle) Reset()                    { *m = ISTeamCopyStartBattle{} }
func (m *ISTeamCopyStartBattle) String() string            { return proto.CompactTextString(m) }
func (*ISTeamCopyStartBattle) ProtoMessage()               {}
func (*ISTeamCopyStartBattle) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{2} }

func (m *ISTeamCopyStartBattle) GetSucess() bool {
	if m != nil && m.Sucess != nil {
		return *m.Sucess
	}
	return false
}

type ISTeamCopyBattleResult struct {
	Purpose          *int32 `protobuf:"varint,1,req,name=purpose" json:"purpose,omitempty"`
	Sucess           *bool  `protobuf:"varint,2,req,name=sucess" json:"sucess,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISTeamCopyBattleResult) Reset()                    { *m = ISTeamCopyBattleResult{} }
func (m *ISTeamCopyBattleResult) String() string            { return proto.CompactTextString(m) }
func (*ISTeamCopyBattleResult) ProtoMessage()               {}
func (*ISTeamCopyBattleResult) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{3} }

func (m *ISTeamCopyBattleResult) GetPurpose() int32 {
	if m != nil && m.Purpose != nil {
		return *m.Purpose
	}
	return 0
}

func (m *ISTeamCopyBattleResult) GetSucess() bool {
	if m != nil && m.Sucess != nil {
		return *m.Sucess
	}
	return false
}

type SITeamCopyBattleResult struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SITeamCopyBattleResult) Reset()                    { *m = SITeamCopyBattleResult{} }
func (m *SITeamCopyBattleResult) String() string            { return proto.CompactTextString(m) }
func (*SITeamCopyBattleResult) ProtoMessage()               {}
func (*SITeamCopyBattleResult) Descriptor() ([]byte, []int) { return fileDescriptor30, []int{4} }

func init() {
	proto.RegisterType((*TeamPlayer)(nil), "cross.TeamPlayer")
	proto.RegisterType((*SITeamCopyStartBattle)(nil), "cross.SITeamCopyStartBattle")
	proto.RegisterType((*ISTeamCopyStartBattle)(nil), "cross.ISTeamCopyStartBattle")
	proto.RegisterType((*ISTeamCopyBattleResult)(nil), "cross.ISTeamCopyBattleResult")
	proto.RegisterType((*SITeamCopyBattleResult)(nil), "cross.SITeamCopyBattleResult")
}

func init() { proto.RegisterFile("teamcopy.proto", fileDescriptor30) }

var fileDescriptor30 = []byte{
	// 326 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x4f, 0xc2, 0x40,
	0x10, 0xc5, 0xc3, 0x96, 0x42, 0x3b, 0xc5, 0x0a, 0x35, 0x90, 0x0d, 0xa7, 0xa6, 0xc6, 0xd8, 0x13,
	0x26, 0xdc, 0xbc, 0x78, 0x50, 0x2f, 0x4d, 0x3c, 0x10, 0xeb, 0x17, 0x58, 0xcb, 0x10, 0x1b, 0x97,
	0xee, 0x66, 0x77, 0x21, 0x72, 0xf4, 0x9b, 0x9b, 0x0e, 0x4d, 0xca, 0xc1, 0xdb, 0xce, 0xdb, 0xdf,
	0x9b, 0x3f, 0x0f, 0x62, 0x87, 0x62, 0x5f, 0x29, 0x7d, 0x5a, 0x69, 0xa3, 0x9c, 0x4a, 0xfc, 0xca,
	0x28, 0x6b, 0x97, 0x91, 0xfd, 0xae, 0xa5, 0x3c, 0x6b, 0xcb, 0x58, 0x1b, 0xa5, 0xd1, 0xb8, 0x8e,
	0xc9, 0x7e, 0x19, 0xc0, 0x07, 0x8a, 0xfd, 0x46, 0x8a, 0x13, 0x9a, 0x64, 0x0a, 0x81, 0xa6, 0x57,
	0xb1, 0xe5, 0x83, 0x94, 0xe5, 0x5e, 0x72, 0x05, 0xfe, 0x4e, 0x99, 0x0a, 0x39, 0xa3, 0x32, 0x86,
	0x91, 0x6a, 0x64, 0xdd, 0x20, 0xf7, 0x52, 0x96, 0x07, 0xc9, 0x04, 0x86, 0x8d, 0xd8, 0x23, 0x1f,
	0xa6, 0x2c, 0x0f, 0x5b, 0x58, 0xe2, 0x11, 0x25, 0xf7, 0x53, 0x96, 0xfb, 0xed, 0xa7, 0x51, 0x12,
	0xf9, 0x88, 0xaa, 0x08, 0x3c, 0x8b, 0x3f, 0x7c, 0x4c, 0xc5, 0x0c, 0xc2, 0x9d, 0xb0, 0x5f, 0xb5,
	0x6a, 0x8a, 0x2d, 0x0f, 0x48, 0x9a, 0x42, 0x60, 0xd1, 0x1c, 0x69, 0x76, 0x48, 0xca, 0x03, 0x24,
	0x9f, 0xc2, 0x39, 0x89, 0x9b, 0x6e, 0xe9, 0x57, 0xe1, 0x04, 0x87, 0x94, 0xe5, 0xd1, 0xfa, 0x66,
	0x45, 0xd7, 0xad, 0x2e, 0xbf, 0x92, 0x5b, 0x08, 0xe9, 0xd8, 0xb7, 0xda, 0x3a, 0x1e, 0xa5, 0x5e,
	0x1e, 0xad, 0xa7, 0x1d, 0x57, 0xb6, 0x3a, 0x41, 0xd7, 0x30, 0xd6, 0x07, 0xa3, 0x95, 0x45, 0x3e,
	0x69, 0xc7, 0x64, 0x4f, 0x30, 0x2f, 0x8b, 0x36, 0x84, 0x17, 0xa5, 0x4f, 0xa5, 0x13, 0xc6, 0x3d,
	0xd3, 0xd4, 0xe4, 0x0e, 0xe0, 0x9c, 0x06, 0xf5, 0x1b, 0x50, 0xbf, 0x59, 0xd7, 0xaf, 0x0f, 0x2d,
	0xbb, 0x87, 0x79, 0x51, 0xfe, 0xe7, 0x8f, 0x61, 0x64, 0x0f, 0x15, 0x5a, 0x4b, 0x59, 0x06, 0xd9,
	0x23, 0x2c, 0x7a, 0xf0, 0xcc, 0xbc, 0xa3, 0x3d, 0x48, 0x77, 0xb9, 0xd3, 0x80, 0x4e, 0xef, 0xad,
	0x8c, 0xac, 0x1c, 0x16, 0xfd, 0x8e, 0x97, 0xd6, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe5, 0xe4,
	0xd2, 0xb0, 0xf6, 0x01, 0x00, 0x00,
}
