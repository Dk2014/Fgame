// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mount.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MountInfo struct {
	AdvancedId       *int32           `protobuf:"varint,1,req,name=advancedId" json:"advancedId,omitempty"`
	MountId          *int32           `protobuf:"varint,2,req,name=mountId" json:"mountId,omitempty"`
	UnrealLevel      *int32           `protobuf:"varint,3,req,name=unrealLevel" json:"unrealLevel,omitempty"`
	UnrealPro        *int32           `protobuf:"varint,4,req,name=unrealPro" json:"unrealPro,omitempty"`
	CulLevel         *int32           `protobuf:"varint,5,req,name=culLevel" json:"culLevel,omitempty"`
	CulPro           *int32           `protobuf:"varint,6,req,name=culPro" json:"culPro,omitempty"`
	SkinList         []*MountSkinInfo `protobuf:"bytes,7,rep,name=skinList" json:"skinList,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *MountInfo) Reset()                    { *m = MountInfo{} }
func (m *MountInfo) String() string            { return proto.CompactTextString(m) }
func (*MountInfo) ProtoMessage()               {}
func (*MountInfo) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{0} }

func (m *MountInfo) GetAdvancedId() int32 {
	if m != nil && m.AdvancedId != nil {
		return *m.AdvancedId
	}
	return 0
}

func (m *MountInfo) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

func (m *MountInfo) GetUnrealLevel() int32 {
	if m != nil && m.UnrealLevel != nil {
		return *m.UnrealLevel
	}
	return 0
}

func (m *MountInfo) GetUnrealPro() int32 {
	if m != nil && m.UnrealPro != nil {
		return *m.UnrealPro
	}
	return 0
}

func (m *MountInfo) GetCulLevel() int32 {
	if m != nil && m.CulLevel != nil {
		return *m.CulLevel
	}
	return 0
}

func (m *MountInfo) GetCulPro() int32 {
	if m != nil && m.CulPro != nil {
		return *m.CulPro
	}
	return 0
}

func (m *MountInfo) GetSkinList() []*MountSkinInfo {
	if m != nil {
		return m.SkinList
	}
	return nil
}

type MountSkinInfo struct {
	MountId          *int32 `protobuf:"varint,1,req,name=mountId" json:"mountId,omitempty"`
	Level            *int32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	Pro              *int32 `protobuf:"varint,3,req,name=pro" json:"pro,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *MountSkinInfo) Reset()                    { *m = MountSkinInfo{} }
func (m *MountSkinInfo) String() string            { return proto.CompactTextString(m) }
func (*MountSkinInfo) ProtoMessage()               {}
func (*MountSkinInfo) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{1} }

func (m *MountSkinInfo) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

func (m *MountSkinInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *MountSkinInfo) GetPro() int32 {
	if m != nil && m.Pro != nil {
		return *m.Pro
	}
	return 0
}

type CSMountGet struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountGet) Reset()                    { *m = CSMountGet{} }
func (m *CSMountGet) String() string            { return proto.CompactTextString(m) }
func (*CSMountGet) ProtoMessage()               {}
func (*CSMountGet) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{2} }

type SCMountGet struct {
	AdvancedId       *int32           `protobuf:"varint,1,req,name=advancedId" json:"advancedId,omitempty"`
	MountId          *int32           `protobuf:"varint,2,req,name=mountId" json:"mountId,omitempty"`
	UnrealLevel      *int32           `protobuf:"varint,3,req,name=unrealLevel" json:"unrealLevel,omitempty"`
	UnrealPro        *int32           `protobuf:"varint,4,req,name=unrealPro" json:"unrealPro,omitempty"`
	CulLevel         *int32           `protobuf:"varint,5,req,name=culLevel" json:"culLevel,omitempty"`
	CulPro           *int32           `protobuf:"varint,6,req,name=culPro" json:"culPro,omitempty"`
	UnrealList       []int32          `protobuf:"varint,7,rep,name=unrealList" json:"unrealList,omitempty"`
	Bless            *int32           `protobuf:"varint,8,opt,name=bless" json:"bless,omitempty"`
	BlessTime        *int64           `protobuf:"varint,9,opt,name=blessTime" json:"blessTime,omitempty"`
	Hidden           *bool            `protobuf:"varint,10,req,name=hidden" json:"hidden,omitempty"`
	MountSkinList    []*MountSkinInfo `protobuf:"bytes,11,rep,name=mountSkinList" json:"mountSkinList,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *SCMountGet) Reset()                    { *m = SCMountGet{} }
func (m *SCMountGet) String() string            { return proto.CompactTextString(m) }
func (*SCMountGet) ProtoMessage()               {}
func (*SCMountGet) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{3} }

func (m *SCMountGet) GetAdvancedId() int32 {
	if m != nil && m.AdvancedId != nil {
		return *m.AdvancedId
	}
	return 0
}

func (m *SCMountGet) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

func (m *SCMountGet) GetUnrealLevel() int32 {
	if m != nil && m.UnrealLevel != nil {
		return *m.UnrealLevel
	}
	return 0
}

func (m *SCMountGet) GetUnrealPro() int32 {
	if m != nil && m.UnrealPro != nil {
		return *m.UnrealPro
	}
	return 0
}

func (m *SCMountGet) GetCulLevel() int32 {
	if m != nil && m.CulLevel != nil {
		return *m.CulLevel
	}
	return 0
}

func (m *SCMountGet) GetCulPro() int32 {
	if m != nil && m.CulPro != nil {
		return *m.CulPro
	}
	return 0
}

func (m *SCMountGet) GetUnrealList() []int32 {
	if m != nil {
		return m.UnrealList
	}
	return nil
}

func (m *SCMountGet) GetBless() int32 {
	if m != nil && m.Bless != nil {
		return *m.Bless
	}
	return 0
}

func (m *SCMountGet) GetBlessTime() int64 {
	if m != nil && m.BlessTime != nil {
		return *m.BlessTime
	}
	return 0
}

func (m *SCMountGet) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

func (m *SCMountGet) GetMountSkinList() []*MountSkinInfo {
	if m != nil {
		return m.MountSkinList
	}
	return nil
}

type CSMountUnrealDan struct {
	Num              *int32 `protobuf:"varint,1,req,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountUnrealDan) Reset()                    { *m = CSMountUnrealDan{} }
func (m *CSMountUnrealDan) String() string            { return proto.CompactTextString(m) }
func (*CSMountUnrealDan) ProtoMessage()               {}
func (*CSMountUnrealDan) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{4} }

func (m *CSMountUnrealDan) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type SCMountUnrealDan struct {
	Level            *int32 `protobuf:"varint,1,req,name=level" json:"level,omitempty"`
	Progress         *int32 `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCMountUnrealDan) Reset()                    { *m = SCMountUnrealDan{} }
func (m *SCMountUnrealDan) String() string            { return proto.CompactTextString(m) }
func (*SCMountUnrealDan) ProtoMessage()               {}
func (*SCMountUnrealDan) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{5} }

func (m *SCMountUnrealDan) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *SCMountUnrealDan) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

type CSMountCulDan struct {
	Num              *int32 `protobuf:"varint,1,req,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountCulDan) Reset()                    { *m = CSMountCulDan{} }
func (m *CSMountCulDan) String() string            { return proto.CompactTextString(m) }
func (*CSMountCulDan) ProtoMessage()               {}
func (*CSMountCulDan) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{6} }

func (m *CSMountCulDan) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type SCMountCulDan struct {
	Level            *int32 `protobuf:"varint,1,req,name=level" json:"level,omitempty"`
	Progress         *int32 `protobuf:"varint,2,req,name=progress" json:"progress,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCMountCulDan) Reset()                    { *m = SCMountCulDan{} }
func (m *SCMountCulDan) String() string            { return proto.CompactTextString(m) }
func (*SCMountCulDan) ProtoMessage()               {}
func (*SCMountCulDan) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{7} }

func (m *SCMountCulDan) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *SCMountCulDan) GetProgress() int32 {
	if m != nil && m.Progress != nil {
		return *m.Progress
	}
	return 0
}

type CSMountUnreal struct {
	MountId          *int32 `protobuf:"varint,1,req,name=mountId" json:"mountId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountUnreal) Reset()                    { *m = CSMountUnreal{} }
func (m *CSMountUnreal) String() string            { return proto.CompactTextString(m) }
func (*CSMountUnreal) ProtoMessage()               {}
func (*CSMountUnreal) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{8} }

func (m *CSMountUnreal) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

type SCMountUnreal struct {
	MountId          *int32 `protobuf:"varint,1,opt,name=mountId" json:"mountId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCMountUnreal) Reset()                    { *m = SCMountUnreal{} }
func (m *SCMountUnreal) String() string            { return proto.CompactTextString(m) }
func (*SCMountUnreal) ProtoMessage()               {}
func (*SCMountUnreal) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{9} }

func (m *SCMountUnreal) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

type CSMountUnload struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountUnload) Reset()                    { *m = CSMountUnload{} }
func (m *CSMountUnload) String() string            { return proto.CompactTextString(m) }
func (*CSMountUnload) ProtoMessage()               {}
func (*CSMountUnload) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{10} }

type SCMountUnload struct {
	MountId          *int32 `protobuf:"varint,1,req,name=mountId" json:"mountId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCMountUnload) Reset()                    { *m = SCMountUnload{} }
func (m *SCMountUnload) String() string            { return proto.CompactTextString(m) }
func (*SCMountUnload) ProtoMessage()               {}
func (*SCMountUnload) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{11} }

func (m *SCMountUnload) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

type CSMountAdvanced struct {
	AutoFlag         *bool  `protobuf:"varint,1,req,name=autoFlag" json:"autoFlag,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountAdvanced) Reset()                    { *m = CSMountAdvanced{} }
func (m *CSMountAdvanced) String() string            { return proto.CompactTextString(m) }
func (*CSMountAdvanced) ProtoMessage()               {}
func (*CSMountAdvanced) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{12} }

func (m *CSMountAdvanced) GetAutoFlag() bool {
	if m != nil && m.AutoFlag != nil {
		return *m.AutoFlag
	}
	return false
}

type SCMountAdvanced struct {
	AdvancedId       *int32 `protobuf:"varint,1,req,name=advancedId" json:"advancedId,omitempty"`
	MountId          *int32 `protobuf:"varint,2,req,name=mountId" json:"mountId,omitempty"`
	Bless            *int32 `protobuf:"varint,3,opt,name=bless" json:"bless,omitempty"`
	BlessTime        *int64 `protobuf:"varint,4,opt,name=blessTime" json:"blessTime,omitempty"`
	AdvancedType     *int32 `protobuf:"varint,5,req,name=advancedType" json:"advancedType,omitempty"`
	IsDouble         *bool  `protobuf:"varint,6,opt,name=isDouble,def=0" json:"isDouble,omitempty"`
	TotalBless       *int32 `protobuf:"varint,7,opt,name=totalBless" json:"totalBless,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCMountAdvanced) Reset()                    { *m = SCMountAdvanced{} }
func (m *SCMountAdvanced) String() string            { return proto.CompactTextString(m) }
func (*SCMountAdvanced) ProtoMessage()               {}
func (*SCMountAdvanced) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{13} }

const Default_SCMountAdvanced_IsDouble bool = false

func (m *SCMountAdvanced) GetAdvancedId() int32 {
	if m != nil && m.AdvancedId != nil {
		return *m.AdvancedId
	}
	return 0
}

func (m *SCMountAdvanced) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

func (m *SCMountAdvanced) GetBless() int32 {
	if m != nil && m.Bless != nil {
		return *m.Bless
	}
	return 0
}

func (m *SCMountAdvanced) GetBlessTime() int64 {
	if m != nil && m.BlessTime != nil {
		return *m.BlessTime
	}
	return 0
}

func (m *SCMountAdvanced) GetAdvancedType() int32 {
	if m != nil && m.AdvancedType != nil {
		return *m.AdvancedType
	}
	return 0
}

func (m *SCMountAdvanced) GetIsDouble() bool {
	if m != nil && m.IsDouble != nil {
		return *m.IsDouble
	}
	return Default_SCMountAdvanced_IsDouble
}

func (m *SCMountAdvanced) GetTotalBless() int32 {
	if m != nil && m.TotalBless != nil {
		return *m.TotalBless
	}
	return 0
}

type CSMountHidden struct {
	Hidden           *bool  `protobuf:"varint,1,req,name=hidden" json:"hidden,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountHidden) Reset()                    { *m = CSMountHidden{} }
func (m *CSMountHidden) String() string            { return proto.CompactTextString(m) }
func (*CSMountHidden) ProtoMessage()               {}
func (*CSMountHidden) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{14} }

func (m *CSMountHidden) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

type SCMountHidden struct {
	Hidden           *bool  `protobuf:"varint,1,req,name=hidden" json:"hidden,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCMountHidden) Reset()                    { *m = SCMountHidden{} }
func (m *SCMountHidden) String() string            { return proto.CompactTextString(m) }
func (*SCMountHidden) ProtoMessage()               {}
func (*SCMountHidden) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{15} }

func (m *SCMountHidden) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

type CSMountUpstar struct {
	MountId          *int32 `protobuf:"varint,1,req,name=mountId" json:"mountId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSMountUpstar) Reset()                    { *m = CSMountUpstar{} }
func (m *CSMountUpstar) String() string            { return proto.CompactTextString(m) }
func (*CSMountUpstar) ProtoMessage()               {}
func (*CSMountUpstar) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{16} }

func (m *CSMountUpstar) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

type SCMountUpstar struct {
	MountId          *int32 `protobuf:"varint,1,req,name=mountId" json:"mountId,omitempty"`
	Level            *int32 `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	UpPro            *int32 `protobuf:"varint,3,req,name=upPro" json:"upPro,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCMountUpstar) Reset()                    { *m = SCMountUpstar{} }
func (m *SCMountUpstar) String() string            { return proto.CompactTextString(m) }
func (*SCMountUpstar) ProtoMessage()               {}
func (*SCMountUpstar) Descriptor() ([]byte, []int) { return fileDescriptor75, []int{17} }

func (m *SCMountUpstar) GetMountId() int32 {
	if m != nil && m.MountId != nil {
		return *m.MountId
	}
	return 0
}

func (m *SCMountUpstar) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *SCMountUpstar) GetUpPro() int32 {
	if m != nil && m.UpPro != nil {
		return *m.UpPro
	}
	return 0
}

func init() {
	proto.RegisterType((*MountInfo)(nil), "ui.MountInfo")
	proto.RegisterType((*MountSkinInfo)(nil), "ui.MountSkinInfo")
	proto.RegisterType((*CSMountGet)(nil), "ui.CSMountGet")
	proto.RegisterType((*SCMountGet)(nil), "ui.SCMountGet")
	proto.RegisterType((*CSMountUnrealDan)(nil), "ui.CSMountUnrealDan")
	proto.RegisterType((*SCMountUnrealDan)(nil), "ui.SCMountUnrealDan")
	proto.RegisterType((*CSMountCulDan)(nil), "ui.CSMountCulDan")
	proto.RegisterType((*SCMountCulDan)(nil), "ui.SCMountCulDan")
	proto.RegisterType((*CSMountUnreal)(nil), "ui.CSMountUnreal")
	proto.RegisterType((*SCMountUnreal)(nil), "ui.SCMountUnreal")
	proto.RegisterType((*CSMountUnload)(nil), "ui.CSMountUnload")
	proto.RegisterType((*SCMountUnload)(nil), "ui.SCMountUnload")
	proto.RegisterType((*CSMountAdvanced)(nil), "ui.CSMountAdvanced")
	proto.RegisterType((*SCMountAdvanced)(nil), "ui.SCMountAdvanced")
	proto.RegisterType((*CSMountHidden)(nil), "ui.CSMountHidden")
	proto.RegisterType((*SCMountHidden)(nil), "ui.SCMountHidden")
	proto.RegisterType((*CSMountUpstar)(nil), "ui.CSMountUpstar")
	proto.RegisterType((*SCMountUpstar)(nil), "ui.SCMountUpstar")
}

func init() { proto.RegisterFile("mount.proto", fileDescriptor75) }

var fileDescriptor75 = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x95, 0x9b, 0xa5, 0x4d, 0x6f, 0x16, 0xda, 0x05, 0x24, 0xfc, 0x80, 0xd4, 0x28, 0x7b, 0xc9,
	0x53, 0x85, 0xe0, 0x0d, 0x21, 0x24, 0xe8, 0x04, 0x54, 0x1a, 0xd2, 0xa4, 0x8e, 0x0f, 0xf0, 0x1a,
	0x6f, 0x44, 0x73, 0xed, 0x28, 0xb1, 0x27, 0xf1, 0x2d, 0x3c, 0xf0, 0x81, 0xfc, 0x04, 0xf2, 0xb5,
	0x93, 0xb5, 0x84, 0x09, 0x9e, 0xf6, 0xe8, 0x93, 0xe3, 0xe3, 0x73, 0xce, 0xbd, 0x81, 0x78, 0xa7,
	0x8c, 0xd4, 0xcb, 0xba, 0x51, 0x5a, 0xa5, 0x23, 0x53, 0xe5, 0x3f, 0x09, 0x4c, 0xbf, 0x58, 0x6c,
	0x2d, 0xaf, 0x55, 0x9a, 0x02, 0xb0, 0xf2, 0x8e, 0xc9, 0x2d, 0x2f, 0xd7, 0x25, 0x25, 0xd9, 0xa8,
	0x08, 0xd3, 0x19, 0x4c, 0xf0, 0xd2, 0xba, 0xa4, 0x23, 0x04, 0x9e, 0x42, 0x6c, 0x64, 0xc3, 0x99,
	0x38, 0xe7, 0x77, 0x5c, 0xd0, 0x00, 0xc1, 0x13, 0x98, 0x3a, 0xf0, 0xa2, 0x51, 0xf4, 0x08, 0xa1,
	0x39, 0x44, 0x5b, 0xe3, 0x49, 0x21, 0x22, 0x4f, 0x60, 0xbc, 0x35, 0xc8, 0x18, 0xe3, 0xf9, 0x14,
	0xa2, 0xf6, 0xb6, 0x92, 0xe7, 0x55, 0xab, 0xe9, 0x24, 0x0b, 0x8a, 0xf8, 0xd5, 0xc9, 0xd2, 0x54,
	0x4b, 0xf4, 0xb3, 0xb9, 0xad, 0xa4, 0xf5, 0x94, 0xbf, 0x85, 0xe4, 0x00, 0xd8, 0x37, 0xe4, 0x1c,
	0x26, 0x10, 0x0a, 0x7c, 0xc5, 0xf9, 0x8b, 0x21, 0xa8, 0x1b, 0xe5, 0x7c, 0xe5, 0xc7, 0x00, 0xab,
	0x0d, 0xde, 0xff, 0xc4, 0x75, 0xfe, 0x8b, 0x00, 0x6c, 0x56, 0xdd, 0xf1, 0xb1, 0xe3, 0xa6, 0x00,
	0x5e, 0xa9, 0x0b, 0x8c, 0xde, 0xaf, 0x04, 0x6f, 0x5b, 0x1a, 0x65, 0xc4, 0xe9, 0xe2, 0xf1, 0xb2,
	0xda, 0x71, 0x3a, 0xcd, 0x48, 0x11, 0x58, 0x95, 0x6f, 0x55, 0x59, 0x72, 0x49, 0x21, 0x1b, 0x15,
	0x51, 0x5a, 0x40, 0xb2, 0xeb, 0xfa, 0x40, 0xa1, 0xf8, 0xa1, 0xe6, 0x16, 0x30, 0xf7, 0xd9, 0xbf,
	0xe2, 0xb3, 0x67, 0x4c, 0xda, 0x72, 0xa4, 0xd9, 0xb9, 0xac, 0xf9, 0x6b, 0x98, 0xfb, 0x36, 0xee,
	0x09, 0x7d, 0x99, 0xa4, 0x4b, 0x55, 0x37, 0xea, 0xa6, 0xb1, 0x16, 0xb1, 0x8f, 0xfc, 0x05, 0x24,
	0x5e, 0x75, 0x65, 0x86, 0x92, 0x2f, 0x21, 0xf1, 0x92, 0xfe, 0xeb, 0x3f, 0xf5, 0xb2, 0x5e, 0xcf,
	0x99, 0x18, 0xcc, 0xd7, 0x32, 0x0e, 0x6c, 0x1e, 0x32, 0x48, 0x11, 0xe6, 0xb3, 0x3d, 0x0d, 0xa1,
	0x58, 0x79, 0x70, 0xc5, 0x02, 0x43, 0xd1, 0x53, 0x98, 0xf9, 0x2b, 0xef, 0xfd, 0x0a, 0x58, 0x6f,
	0xcc, 0x68, 0xf5, 0x51, 0xb0, 0x1b, 0x24, 0x45, 0xf9, 0x0f, 0x02, 0x33, 0xaf, 0xd3, 0xb3, 0xfe,
	0x6b, 0x69, 0xfa, 0xb1, 0x06, 0xc3, 0xb1, 0x1e, 0xe1, 0x58, 0x9f, 0xc1, 0x71, 0x27, 0x73, 0xf9,
	0xbd, 0xe6, 0x7e, 0x65, 0x9e, 0x43, 0x54, 0xb5, 0x67, 0xca, 0x5c, 0x09, 0x4e, 0xc7, 0x19, 0x29,
	0xa2, 0x37, 0xe1, 0x35, 0x13, 0x2d, 0xb7, 0xaf, 0x6a, 0xa5, 0x99, 0xf8, 0x80, 0xaa, 0x13, 0x4c,
	0xbd, 0xe8, 0x53, 0x7f, 0xc6, 0x05, 0xd9, 0x5b, 0x15, 0x67, 0x7f, 0xd1, 0xb7, 0xf0, 0x00, 0x61,
	0xaf, 0xfb, 0xba, 0xd5, 0xac, 0x19, 0xd6, 0xf4, 0xee, 0xbe, 0xc8, 0xbf, 0x33, 0xfe, 0xfc, 0xfb,
	0x12, 0x08, 0x4d, 0x7d, 0xd1, 0xfd, 0x7f, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xb8, 0x03, 0x21,
	0xbe, 0x71, 0x04, 0x00, 0x00,
}
