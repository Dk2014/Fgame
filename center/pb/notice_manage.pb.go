// Code generated by protoc-gen-go. DO NOT EDIT.
// source: notice_manage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 公告请求
type NoticeRequest struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
}

func (m *NoticeRequest) Reset()                    { *m = NoticeRequest{} }
func (m *NoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*NoticeRequest) ProtoMessage()               {}
func (*NoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *NoticeRequest) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

// 公告回复
type NoticeResponse struct {
	Notice string `protobuf:"bytes,1,opt,name=notice" json:"notice,omitempty"`
}

func (m *NoticeResponse) Reset()                    { *m = NoticeResponse{} }
func (m *NoticeResponse) String() string            { return proto.CompactTextString(m) }
func (*NoticeResponse) ProtoMessage()               {}
func (*NoticeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *NoticeResponse) GetNotice() string {
	if m != nil {
		return m.Notice
	}
	return ""
}

// 刷新公告
type RefreshNoticeRequest struct {
}

func (m *RefreshNoticeRequest) Reset()                    { *m = RefreshNoticeRequest{} }
func (m *RefreshNoticeRequest) String() string            { return proto.CompactTextString(m) }
func (*RefreshNoticeRequest) ProtoMessage()               {}
func (*RefreshNoticeRequest) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

// 刷新公告回复
type RefreshNoticeResponse struct {
}

func (m *RefreshNoticeResponse) Reset()                    { *m = RefreshNoticeResponse{} }
func (m *RefreshNoticeResponse) String() string            { return proto.CompactTextString(m) }
func (*RefreshNoticeResponse) ProtoMessage()               {}
func (*RefreshNoticeResponse) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func init() {
	proto.RegisterType((*NoticeRequest)(nil), "pb.NoticeRequest")
	proto.RegisterType((*NoticeResponse)(nil), "pb.NoticeResponse")
	proto.RegisterType((*RefreshNoticeRequest)(nil), "pb.RefreshNoticeRequest")
	proto.RegisterType((*RefreshNoticeResponse)(nil), "pb.RefreshNoticeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NoticeManage service

type NoticeManageClient interface {
	// 获取公告
	GetNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error)
	// 刷新公告
	RefreshNotice(ctx context.Context, in *RefreshNoticeRequest, opts ...grpc.CallOption) (*RefreshNoticeResponse, error)
}

type noticeManageClient struct {
	cc *grpc.ClientConn
}

func NewNoticeManageClient(cc *grpc.ClientConn) NoticeManageClient {
	return &noticeManageClient{cc}
}

func (c *noticeManageClient) GetNotice(ctx context.Context, in *NoticeRequest, opts ...grpc.CallOption) (*NoticeResponse, error) {
	out := new(NoticeResponse)
	err := grpc.Invoke(ctx, "/pb.NoticeManage/GetNotice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *noticeManageClient) RefreshNotice(ctx context.Context, in *RefreshNoticeRequest, opts ...grpc.CallOption) (*RefreshNoticeResponse, error) {
	out := new(RefreshNoticeResponse)
	err := grpc.Invoke(ctx, "/pb.NoticeManage/RefreshNotice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NoticeManage service

type NoticeManageServer interface {
	// 获取公告
	GetNotice(context.Context, *NoticeRequest) (*NoticeResponse, error)
	// 刷新公告
	RefreshNotice(context.Context, *RefreshNoticeRequest) (*RefreshNoticeResponse, error)
}

func RegisterNoticeManageServer(s *grpc.Server, srv NoticeManageServer) {
	s.RegisterService(&_NoticeManage_serviceDesc, srv)
}

func _NoticeManage_GetNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeManageServer).GetNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NoticeManage/GetNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeManageServer).GetNotice(ctx, req.(*NoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NoticeManage_RefreshNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NoticeManageServer).RefreshNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.NoticeManage/RefreshNotice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NoticeManageServer).RefreshNotice(ctx, req.(*RefreshNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NoticeManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.NoticeManage",
	HandlerType: (*NoticeManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotice",
			Handler:    _NoticeManage_GetNotice_Handler,
		},
		{
			MethodName: "RefreshNotice",
			Handler:    _NoticeManage_RefreshNotice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notice_manage.proto",
}

func init() { proto.RegisterFile("notice_manage.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xcb, 0x2f, 0xc9,
	0x4c, 0x4e, 0x8d, 0xcf, 0x4d, 0xcc, 0x4b, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2a, 0x48, 0x52, 0xd2, 0xe6, 0xe2, 0xf5, 0x03, 0x4b, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16,
	0x97, 0x08, 0x49, 0x71, 0x71, 0x14, 0xe4, 0x24, 0x96, 0xa4, 0xe5, 0x17, 0xe5, 0x4a, 0x30, 0x2a,
	0x30, 0x6a, 0xb0, 0x06, 0xc1, 0xf9, 0x4a, 0x1a, 0x5c, 0x7c, 0x30, 0xc5, 0xc5, 0x05, 0xf9, 0x79,
	0xc5, 0xa9, 0x42, 0x62, 0x5c, 0x6c, 0x10, 0x93, 0xc1, 0x6a, 0x39, 0x83, 0xa0, 0x3c, 0x25, 0x31,
	0x2e, 0x91, 0xa0, 0xd4, 0xb4, 0xa2, 0xd4, 0xe2, 0x0c, 0x14, 0xd3, 0x95, 0xc4, 0xb9, 0x44, 0xd1,
	0xc4, 0x21, 0x06, 0x19, 0xf5, 0x30, 0x72, 0xf1, 0x40, 0x84, 0x7c, 0xc1, 0x4e, 0x14, 0x32, 0xe1,
	0xe2, 0x74, 0x4f, 0x2d, 0x81, 0x08, 0x09, 0x09, 0xea, 0x15, 0x24, 0xe9, 0xa1, 0x98, 0x24, 0x25,
	0x84, 0x2c, 0x04, 0x31, 0x44, 0x89, 0x41, 0xc8, 0x8d, 0x8b, 0x17, 0xc5, 0x7c, 0x21, 0x09, 0x90,
	0x32, 0x6c, 0x4e, 0x91, 0x92, 0xc4, 0x22, 0x03, 0x33, 0x27, 0x89, 0x0d, 0x1c, 0x42, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0xc7, 0x26, 0x72, 0x38, 0x01, 0x00, 0x00,
}
