// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shenghen.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ShengHenInfo struct {
	Type             *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ShengHenInfo) Reset()                    { *m = ShengHenInfo{} }
func (m *ShengHenInfo) String() string            { return proto.CompactTextString(m) }
func (*ShengHenInfo) ProtoMessage()               {}
func (*ShengHenInfo) Descriptor() ([]byte, []int) { return fileDescriptor97, []int{0} }

func (m *ShengHenInfo) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type CSShengHenGet struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSShengHenGet) Reset()                    { *m = CSShengHenGet{} }
func (m *CSShengHenGet) String() string            { return proto.CompactTextString(m) }
func (*CSShengHenGet) ProtoMessage()               {}
func (*CSShengHenGet) Descriptor() ([]byte, []int) { return fileDescriptor97, []int{1} }

type SCShengHenGet struct {
	InfoList         []*ShengHenInfo `protobuf:"bytes,1,rep,name=infoList" json:"infoList,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *SCShengHenGet) Reset()                    { *m = SCShengHenGet{} }
func (m *SCShengHenGet) String() string            { return proto.CompactTextString(m) }
func (*SCShengHenGet) ProtoMessage()               {}
func (*SCShengHenGet) Descriptor() ([]byte, []int) { return fileDescriptor97, []int{2} }

func (m *SCShengHenGet) GetInfoList() []*ShengHenInfo {
	if m != nil {
		return m.InfoList
	}
	return nil
}

type CSShengHenActive struct {
	Type             *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSShengHenActive) Reset()                    { *m = CSShengHenActive{} }
func (m *CSShengHenActive) String() string            { return proto.CompactTextString(m) }
func (*CSShengHenActive) ProtoMessage()               {}
func (*CSShengHenActive) Descriptor() ([]byte, []int) { return fileDescriptor97, []int{3} }

func (m *CSShengHenActive) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type SCShengHenActive struct {
	Type             *int32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCShengHenActive) Reset()                    { *m = SCShengHenActive{} }
func (m *SCShengHenActive) String() string            { return proto.CompactTextString(m) }
func (*SCShengHenActive) ProtoMessage()               {}
func (*SCShengHenActive) Descriptor() ([]byte, []int) { return fileDescriptor97, []int{4} }

func (m *SCShengHenActive) GetType() int32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func init() {
	proto.RegisterType((*ShengHenInfo)(nil), "ui.ShengHenInfo")
	proto.RegisterType((*CSShengHenGet)(nil), "ui.CSShengHenGet")
	proto.RegisterType((*SCShengHenGet)(nil), "ui.SCShengHenGet")
	proto.RegisterType((*CSShengHenActive)(nil), "ui.CSShengHenActive")
	proto.RegisterType((*SCShengHenActive)(nil), "ui.SCShengHenActive")
}

func init() { proto.RegisterFile("shenghen.proto", fileDescriptor97) }

var fileDescriptor97 = []byte{
	// 139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xce, 0x48, 0xcd,
	0x4b, 0xcf, 0x48, 0xcd, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0xcd, 0x54, 0x92,
	0xe1, 0xe2, 0x09, 0x06, 0x89, 0x7a, 0xa4, 0xe6, 0x79, 0xe6, 0xa5, 0xe5, 0x0b, 0xf1, 0x70, 0xb1,
	0x94, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x69, 0xb0, 0x2a, 0xf1, 0x73, 0xf1, 0x3a, 0x07,
	0xc3, 0xe4, 0xdd, 0x53, 0x4b, 0x94, 0x8c, 0xb9, 0x78, 0x83, 0x9d, 0x91, 0x04, 0x84, 0x94, 0xb8,
	0x38, 0x32, 0xf3, 0xd2, 0xf2, 0x7d, 0x32, 0x8b, 0x4b, 0x24, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d,
	0x04, 0xf4, 0x4a, 0x33, 0xf5, 0x90, 0xcd, 0x54, 0x52, 0xe0, 0x12, 0x40, 0x98, 0xe2, 0x98, 0x5c,
	0x92, 0x59, 0x96, 0x8a, 0x66, 0x8f, 0x02, 0x97, 0x00, 0xc2, 0x58, 0x6c, 0x2a, 0x00, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x58, 0x60, 0xc5, 0x4f, 0xbc, 0x00, 0x00, 0x00,
}
