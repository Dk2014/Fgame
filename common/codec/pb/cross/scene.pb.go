// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scene.proto

package cross

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type CrossData struct {
	CrossType        *int32   `protobuf:"varint,1,req,name=crossType" json:"crossType,omitempty"`
	Args             []string `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CrossData) Reset()                    { *m = CrossData{} }
func (m *CrossData) String() string            { return proto.CompactTextString(m) }
func (*CrossData) ProtoMessage()               {}
func (*CrossData) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{0} }

func (m *CrossData) GetCrossType() int32 {
	if m != nil && m.CrossType != nil {
		return *m.CrossType
	}
	return 0
}

func (m *CrossData) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type SIPlayerData struct {
	PlayerBasicData      *PlayerBasicData        `protobuf:"bytes,1,req,name=playerBasicData" json:"playerBasicData,omitempty"`
	PlayerShowData       *PlayerShowData         `protobuf:"bytes,2,req,name=playerShowData" json:"playerShowData,omitempty"`
	BasicPropertyData    *PropertyData           `protobuf:"bytes,3,req,name=basicPropertyData" json:"basicPropertyData,omitempty"`
	BattlePropertyData   *PropertyData           `protobuf:"bytes,4,req,name=battlePropertyData" json:"battlePropertyData,omitempty"`
	SkillList            []*SkillData            `protobuf:"bytes,5,rep,name=skillList" json:"skillList,omitempty"`
	BuffList             []*BuffData             `protobuf:"bytes,6,rep,name=buffList" json:"buffList,omitempty"`
	PkData               *PkData                 `protobuf:"bytes,7,req,name=pkData" json:"pkData,omitempty"`
	AllianceData         *AllianceData           `protobuf:"bytes,8,req,name=allianceData" json:"allianceData,omitempty"`
	TeamData             *TeamData               `protobuf:"bytes,9,req,name=teamData" json:"teamData,omitempty"`
	CrossData            *CrossData              `protobuf:"bytes,10,req,name=crossData" json:"crossData,omitempty"`
	ArenaData            *PlayerArenaData        `protobuf:"bytes,11,req,name=arenaData" json:"arenaData,omitempty"`
	XueChiData           *XueChiData             `protobuf:"bytes,12,req,name=xueChiData" json:"xueChiData,omitempty"`
	ReliveData           *PlayerReliveData       `protobuf:"bytes,13,req,name=reliveData" json:"reliveData,omitempty"`
	BattleData           *PlayerBattleData       `protobuf:"bytes,14,req,name=battleData" json:"battleData,omitempty"`
	DenseWatData         *DenseWatData           `protobuf:"bytes,15,req,name=denseWatData" json:"denseWatData,omitempty"`
	Power                *int64                  `protobuf:"varint,16,req,name=power" json:"power,omitempty"`
	LingTongData         *LingTongData           `protobuf:"bytes,17,opt,name=lingTongData" json:"lingTongData,omitempty"`
	ShenMoData           *ShenMoData             `protobuf:"bytes,18,req,name=shenMoData" json:"shenMoData,omitempty"`
	ActivityPkDataList   []*ActivityPkData       `protobuf:"bytes,19,rep,name=activityPkDataList" json:"activityPkDataList,omitempty"`
	ArenapvpData         *PlayerArenapvpData     `protobuf:"bytes,20,req,name=arenapvpData" json:"arenapvpData,omitempty"`
	ActivityRankDataList []*ActivityRankData     `protobuf:"bytes,21,rep,name=activityRankDataList" json:"activityRankDataList,omitempty"`
	JieYiData            *JieYiData              `protobuf:"bytes,22,req,name=jieYiData" json:"jieYiData,omitempty"`
	ChuangShiData        *ChuangShiData          `protobuf:"bytes,23,req,name=chuangShiData" json:"chuangShiData,omitempty"`
	BossReliveDataList   []*PlayerBossReliveData `protobuf:"bytes,24,rep,name=bossReliveDataList" json:"bossReliveDataList,omitempty"`
	TeShuSkillDataList   []*TeShuSkillData       `protobuf:"bytes,25,rep,name=teShuSkillDataList" json:"teShuSkillDataList,omitempty"`
	XXX_unrecognized     []byte                  `json:"-"`
}

func (m *SIPlayerData) Reset()                    { *m = SIPlayerData{} }
func (m *SIPlayerData) String() string            { return proto.CompactTextString(m) }
func (*SIPlayerData) ProtoMessage()               {}
func (*SIPlayerData) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{1} }

func (m *SIPlayerData) GetPlayerBasicData() *PlayerBasicData {
	if m != nil {
		return m.PlayerBasicData
	}
	return nil
}

func (m *SIPlayerData) GetPlayerShowData() *PlayerShowData {
	if m != nil {
		return m.PlayerShowData
	}
	return nil
}

func (m *SIPlayerData) GetBasicPropertyData() *PropertyData {
	if m != nil {
		return m.BasicPropertyData
	}
	return nil
}

func (m *SIPlayerData) GetBattlePropertyData() *PropertyData {
	if m != nil {
		return m.BattlePropertyData
	}
	return nil
}

func (m *SIPlayerData) GetSkillList() []*SkillData {
	if m != nil {
		return m.SkillList
	}
	return nil
}

func (m *SIPlayerData) GetBuffList() []*BuffData {
	if m != nil {
		return m.BuffList
	}
	return nil
}

func (m *SIPlayerData) GetPkData() *PkData {
	if m != nil {
		return m.PkData
	}
	return nil
}

func (m *SIPlayerData) GetAllianceData() *AllianceData {
	if m != nil {
		return m.AllianceData
	}
	return nil
}

func (m *SIPlayerData) GetTeamData() *TeamData {
	if m != nil {
		return m.TeamData
	}
	return nil
}

func (m *SIPlayerData) GetCrossData() *CrossData {
	if m != nil {
		return m.CrossData
	}
	return nil
}

func (m *SIPlayerData) GetArenaData() *PlayerArenaData {
	if m != nil {
		return m.ArenaData
	}
	return nil
}

func (m *SIPlayerData) GetXueChiData() *XueChiData {
	if m != nil {
		return m.XueChiData
	}
	return nil
}

func (m *SIPlayerData) GetReliveData() *PlayerReliveData {
	if m != nil {
		return m.ReliveData
	}
	return nil
}

func (m *SIPlayerData) GetBattleData() *PlayerBattleData {
	if m != nil {
		return m.BattleData
	}
	return nil
}

func (m *SIPlayerData) GetDenseWatData() *DenseWatData {
	if m != nil {
		return m.DenseWatData
	}
	return nil
}

func (m *SIPlayerData) GetPower() int64 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

func (m *SIPlayerData) GetLingTongData() *LingTongData {
	if m != nil {
		return m.LingTongData
	}
	return nil
}

func (m *SIPlayerData) GetShenMoData() *ShenMoData {
	if m != nil {
		return m.ShenMoData
	}
	return nil
}

func (m *SIPlayerData) GetActivityPkDataList() []*ActivityPkData {
	if m != nil {
		return m.ActivityPkDataList
	}
	return nil
}

func (m *SIPlayerData) GetArenapvpData() *PlayerArenapvpData {
	if m != nil {
		return m.ArenapvpData
	}
	return nil
}

func (m *SIPlayerData) GetActivityRankDataList() []*ActivityRankData {
	if m != nil {
		return m.ActivityRankDataList
	}
	return nil
}

func (m *SIPlayerData) GetJieYiData() *JieYiData {
	if m != nil {
		return m.JieYiData
	}
	return nil
}

func (m *SIPlayerData) GetChuangShiData() *ChuangShiData {
	if m != nil {
		return m.ChuangShiData
	}
	return nil
}

func (m *SIPlayerData) GetBossReliveDataList() []*PlayerBossReliveData {
	if m != nil {
		return m.BossReliveDataList
	}
	return nil
}

func (m *SIPlayerData) GetTeShuSkillDataList() []*TeShuSkillData {
	if m != nil {
		return m.TeShuSkillDataList
	}
	return nil
}

type SIPlayerSystemBattlePropertyChanged struct {
	BattlePropertyData *PropertyData `protobuf:"bytes,1,req,name=battlePropertyData" json:"battlePropertyData,omitempty"`
	Power              *int64        `protobuf:"varint,2,req,name=power" json:"power,omitempty"`
	XXX_unrecognized   []byte        `json:"-"`
}

func (m *SIPlayerSystemBattlePropertyChanged) Reset()         { *m = SIPlayerSystemBattlePropertyChanged{} }
func (m *SIPlayerSystemBattlePropertyChanged) String() string { return proto.CompactTextString(m) }
func (*SIPlayerSystemBattlePropertyChanged) ProtoMessage()    {}
func (*SIPlayerSystemBattlePropertyChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor25, []int{2}
}

func (m *SIPlayerSystemBattlePropertyChanged) GetBattlePropertyData() *PropertyData {
	if m != nil {
		return m.BattlePropertyData
	}
	return nil
}

func (m *SIPlayerSystemBattlePropertyChanged) GetPower() int64 {
	if m != nil && m.Power != nil {
		return *m.Power
	}
	return 0
}

type SIPlayerBasicPropertyChanged struct {
	BasicPropertyData *PropertyData `protobuf:"bytes,2,req,name=basicPropertyData" json:"basicPropertyData,omitempty"`
	XXX_unrecognized  []byte        `json:"-"`
}

func (m *SIPlayerBasicPropertyChanged) Reset()                    { *m = SIPlayerBasicPropertyChanged{} }
func (m *SIPlayerBasicPropertyChanged) String() string            { return proto.CompactTextString(m) }
func (*SIPlayerBasicPropertyChanged) ProtoMessage()               {}
func (*SIPlayerBasicPropertyChanged) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{3} }

func (m *SIPlayerBasicPropertyChanged) GetBasicPropertyData() *PropertyData {
	if m != nil {
		return m.BasicPropertyData
	}
	return nil
}

type SIPlayerExitCross struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *SIPlayerExitCross) Reset()                    { *m = SIPlayerExitCross{} }
func (m *SIPlayerExitCross) String() string            { return proto.CompactTextString(m) }
func (*SIPlayerExitCross) ProtoMessage()               {}
func (*SIPlayerExitCross) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{4} }

type ISPlayerExitCross struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISPlayerExitCross) Reset()                    { *m = ISPlayerExitCross{} }
func (m *ISPlayerExitCross) String() string            { return proto.CompactTextString(m) }
func (*ISPlayerExitCross) ProtoMessage()               {}
func (*ISPlayerExitCross) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{5} }

type ISPlayerKillBiology struct {
	BiologyId        *int32 `protobuf:"varint,1,req,name=biologyId" json:"biologyId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISPlayerKillBiology) Reset()                    { *m = ISPlayerKillBiology{} }
func (m *ISPlayerKillBiology) String() string            { return proto.CompactTextString(m) }
func (*ISPlayerKillBiology) ProtoMessage()               {}
func (*ISPlayerKillBiology) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{6} }

func (m *ISPlayerKillBiology) GetBiologyId() int32 {
	if m != nil && m.BiologyId != nil {
		return *m.BiologyId
	}
	return 0
}

type SIPlayerKillBiology struct {
	BiologyId        *int32 `protobuf:"varint,2,req,name=biologyId" json:"biologyId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SIPlayerKillBiology) Reset()                    { *m = SIPlayerKillBiology{} }
func (m *SIPlayerKillBiology) String() string            { return proto.CompactTextString(m) }
func (*SIPlayerKillBiology) ProtoMessage()               {}
func (*SIPlayerKillBiology) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{7} }

func (m *SIPlayerKillBiology) GetBiologyId() int32 {
	if m != nil && m.BiologyId != nil {
		return *m.BiologyId
	}
	return 0
}

type ISPlayerMountSync struct {
	Hidden           *bool  `protobuf:"varint,1,req,name=hidden" json:"hidden,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ISPlayerMountSync) Reset()                    { *m = ISPlayerMountSync{} }
func (m *ISPlayerMountSync) String() string            { return proto.CompactTextString(m) }
func (*ISPlayerMountSync) ProtoMessage()               {}
func (*ISPlayerMountSync) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{8} }

func (m *ISPlayerMountSync) GetHidden() bool {
	if m != nil && m.Hidden != nil {
		return *m.Hidden
	}
	return false
}

type PlayerBossReliveData struct {
	BossType         *int32 `protobuf:"varint,1,req,name=bossType" json:"bossType,omitempty"`
	ReliveTime       *int32 `protobuf:"varint,2,req,name=reliveTime" json:"reliveTime,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *PlayerBossReliveData) Reset()                    { *m = PlayerBossReliveData{} }
func (m *PlayerBossReliveData) String() string            { return proto.CompactTextString(m) }
func (*PlayerBossReliveData) ProtoMessage()               {}
func (*PlayerBossReliveData) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{9} }

func (m *PlayerBossReliveData) GetBossType() int32 {
	if m != nil && m.BossType != nil {
		return *m.BossType
	}
	return 0
}

func (m *PlayerBossReliveData) GetReliveTime() int32 {
	if m != nil && m.ReliveTime != nil {
		return *m.ReliveTime
	}
	return 0
}

type ISPlayerBossReliveSync struct {
	PlayerBossReliveData *PlayerBossReliveData `protobuf:"bytes,1,req,name=playerBossReliveData" json:"playerBossReliveData,omitempty"`
	XXX_unrecognized     []byte                `json:"-"`
}

func (m *ISPlayerBossReliveSync) Reset()                    { *m = ISPlayerBossReliveSync{} }
func (m *ISPlayerBossReliveSync) String() string            { return proto.CompactTextString(m) }
func (*ISPlayerBossReliveSync) ProtoMessage()               {}
func (*ISPlayerBossReliveSync) Descriptor() ([]byte, []int) { return fileDescriptor25, []int{10} }

func (m *ISPlayerBossReliveSync) GetPlayerBossReliveData() *PlayerBossReliveData {
	if m != nil {
		return m.PlayerBossReliveData
	}
	return nil
}

func init() {
	proto.RegisterType((*CrossData)(nil), "cross.CrossData")
	proto.RegisterType((*SIPlayerData)(nil), "cross.SIPlayerData")
	proto.RegisterType((*SIPlayerSystemBattlePropertyChanged)(nil), "cross.SIPlayerSystemBattlePropertyChanged")
	proto.RegisterType((*SIPlayerBasicPropertyChanged)(nil), "cross.SIPlayerBasicPropertyChanged")
	proto.RegisterType((*SIPlayerExitCross)(nil), "cross.SIPlayerExitCross")
	proto.RegisterType((*ISPlayerExitCross)(nil), "cross.ISPlayerExitCross")
	proto.RegisterType((*ISPlayerKillBiology)(nil), "cross.ISPlayerKillBiology")
	proto.RegisterType((*SIPlayerKillBiology)(nil), "cross.SIPlayerKillBiology")
	proto.RegisterType((*ISPlayerMountSync)(nil), "cross.ISPlayerMountSync")
	proto.RegisterType((*PlayerBossReliveData)(nil), "cross.PlayerBossReliveData")
	proto.RegisterType((*ISPlayerBossReliveSync)(nil), "cross.ISPlayerBossReliveSync")
}

func init() { proto.RegisterFile("scene.proto", fileDescriptor25) }

var fileDescriptor25 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0xdf, 0x6f, 0xda, 0x48,
	0x10, 0xc7, 0x15, 0x08, 0x39, 0x18, 0x0c, 0x84, 0x85, 0x24, 0x24, 0x77, 0x27, 0x71, 0x44, 0x27,
	0x11, 0xa5, 0x25, 0x6a, 0xa4, 0xaa, 0xaa, 0xd4, 0x97, 0x90, 0xf4, 0x21, 0x6d, 0x52, 0x45, 0x31,
	0x52, 0xdb, 0xa7, 0x6a, 0x31, 0x0b, 0xde, 0xc4, 0xd8, 0x96, 0xbd, 0x84, 0xf0, 0xaf, 0xf5, 0xaf,
	0xab, 0x76, 0xec, 0x31, 0x6c, 0x0a, 0x7d, 0xc3, 0x33, 0x9f, 0x99, 0xef, 0x30, 0x3f, 0x16, 0xca,
	0xb1, 0x23, 0x7c, 0xd1, 0x0b, 0xa3, 0x40, 0x05, 0xac, 0xe0, 0x44, 0x41, 0x1c, 0x1f, 0x59, 0xa1,
	0xc7, 0x17, 0x22, 0x4a, 0x8c, 0x47, 0x10, 0xbb, 0xc1, 0x3c, 0xfd, 0x5d, 0x8e, 0x1f, 0xa5, 0xe7,
	0x91, 0x63, 0x38, 0x1b, 0x8f, 0xd3, 0xdf, 0xd5, 0x30, 0x0a, 0x42, 0x11, 0xa9, 0x45, 0xfa, 0x5d,
	0x0c, 0x1f, 0xc9, 0xc3, 0x3d, 0x4f, 0x72, 0xdf, 0x11, 0x14, 0xa5, 0x04, 0x9f, 0x52, 0x3a, 0x1e,
	0x09, 0x9f, 0xa7, 0x1f, 0xd6, 0xf3, 0x4c, 0x38, 0xae, 0xa4, 0xaf, 0x48, 0x78, 0xf2, 0x89, 0x82,
	0xac, 0x21, 0x57, 0xca, 0xa3, 0xaf, 0xda, 0x48, 0xf8, 0xb1, 0xf8, 0x31, 0xe7, 0x8a, 0x34, 0x3c,
	0xe9, 0x4f, 0x54, 0xe0, 0x4f, 0x08, 0x8f, 0x5d, 0xe1, 0x4f, 0x83, 0xac, 0x02, 0x47, 0xc9, 0x27,
	0x99, 0xd5, 0x56, 0x45, 0xd5, 0xf0, 0x29, 0xa4, 0x2a, 0x1e, 0xa4, 0x58, 0x90, 0x6e, 0xcd, 0x71,
	0x67, 0xdc, 0x9f, 0xc4, 0x54, 0x48, 0xe7, 0x15, 0x94, 0x2e, 0x75, 0x57, 0xae, 0xb8, 0xe2, 0xac,
	0x0e, 0x25, 0x6c, 0xd1, 0x60, 0x11, 0x8a, 0xd6, 0x56, 0x3b, 0xd7, 0x2d, 0x30, 0x0b, 0xb6, 0x79,
	0x34, 0x89, 0x5b, 0xb9, 0x76, 0xbe, 0x5b, 0xea, 0xfc, 0x2c, 0x82, 0x65, 0x5f, 0xdf, 0x61, 0xff,
	0x30, 0xe2, 0x0c, 0x6a, 0x49, 0x37, 0xfb, 0x3c, 0x96, 0x8e, 0x36, 0x61, 0x5c, 0xf9, 0x7c, 0xbf,
	0x87, 0x99, 0x7a, 0x77, 0xa6, 0x97, 0xbd, 0x86, 0x6a, 0x12, 0x60, 0xbb, 0xc1, 0x1c, 0xf9, 0x1c,
	0xf2, 0x7b, 0x06, 0x4f, 0x4e, 0xd6, 0x83, 0xfa, 0x50, 0xc7, 0xde, 0xa5, 0xfd, 0xc7, 0x88, 0x3c,
	0x46, 0x34, 0x28, 0x62, 0xc5, 0xc5, 0xce, 0x80, 0x25, 0xbd, 0x34, 0x02, 0xb6, 0x37, 0x07, 0x1c,
	0x43, 0x09, 0x87, 0x7e, 0x23, 0x63, 0xd5, 0x2a, 0xb4, 0xf3, 0xdd, 0xf2, 0xf9, 0x6e, 0xca, 0xd9,
	0xda, 0x8e, 0xd0, 0x7f, 0x50, 0xd4, 0xcb, 0x80, 0xcc, 0x0e, 0x32, 0xb5, 0x94, 0xe9, 0xcf, 0xc6,
	0x63, 0x44, 0xfe, 0x85, 0x9d, 0xf0, 0x11, 0xc5, 0xfe, 0x42, 0xb1, 0x0a, 0x89, 0xa1, 0x91, 0x9d,
	0x80, 0x45, 0x8b, 0x82, 0x50, 0xd1, 0xa8, 0xe8, 0x62, 0xc5, 0xa5, 0xc5, 0xf4, 0x0e, 0x21, 0x56,
	0x42, 0x8c, 0xc4, 0x06, 0xa9, 0x59, 0x17, 0xed, 0xd0, 0xd0, 0x5a, 0x80, 0x0c, 0x15, 0xbd, 0x1c,
	0xe6, 0x09, 0x94, 0x70, 0x13, 0x10, 0x2a, 0xaf, 0x19, 0xca, 0x05, 0x79, 0xd9, 0xff, 0x00, 0xcf,
	0x33, 0x71, 0xe9, 0x4a, 0x64, 0x2d, 0x64, 0xeb, 0x29, 0xfb, 0x2d, 0x73, 0xb0, 0x53, 0x80, 0x64,
	0x6d, 0x11, 0xab, 0x20, 0x76, 0x60, 0xa4, 0xbc, 0xcf, 0xdc, 0x1a, 0x4e, 0x26, 0x81, 0x70, 0x75,
	0x0d, 0xdc, 0xcf, 0xdc, 0xba, 0x3d, 0xb8, 0xf4, 0x5f, 0xb9, 0x42, 0xbc, 0x66, 0xb4, 0xe7, 0x6a,
	0xc5, 0xc5, 0x2a, 0x50, 0x08, 0x83, 0xb9, 0x88, 0x5a, 0xbb, 0xed, 0x5c, 0x37, 0xaf, 0x23, 0xf5,
	0x75, 0x0c, 0x02, 0x7f, 0x82, 0x91, 0xf5, 0xf6, 0xd6, 0x4a, 0xe4, 0xcd, 0x8a, 0x4b, 0xff, 0x4b,
	0x7d, 0x38, 0xb7, 0x01, 0x82, 0xcc, 0xf8, 0x97, 0x76, 0xe6, 0x60, 0x6f, 0x80, 0xd1, 0x45, 0x25,
	0xc3, 0xc3, 0xb1, 0x37, 0x70, 0xec, 0xb4, 0xa5, 0x17, 0x06, 0xc0, 0xce, 0xc0, 0xa2, 0xa3, 0xc3,
	0xdc, 0x4d, 0xcc, 0x7d, 0xf8, 0x7b, 0xb7, 0x53, 0x80, 0xbd, 0x85, 0x26, 0x69, 0xdc, 0x73, 0x7f,
	0xa9, 0xb2, 0x87, 0x2a, 0x07, 0x2f, 0x54, 0x08, 0xd1, 0x73, 0x7f, 0x90, 0xe2, 0x7b, 0x32, 0xa6,
	0x7d, 0x63, 0xee, 0x9f, 0xc8, 0xce, 0x4e, 0xa1, 0x92, 0x1c, 0xb9, 0x9d, 0xce, 0xf3, 0x00, 0xc1,
	0x26, 0x2d, 0xc8, 0xaa, 0x8f, 0xbd, 0x03, 0x36, 0x0c, 0xe2, 0x78, 0x39, 0x37, 0x2c, 0xa3, 0x85,
	0x65, 0xfc, 0x6d, 0x4e, 0xcb, 0xc0, 0x74, 0x97, 0x94, 0xb0, 0xdd, 0x59, 0x76, 0x24, 0x18, 0x78,
	0x68, 0x74, 0x69, 0x60, 0x00, 0x1d, 0x01, 0xc7, 0xf4, 0x76, 0xd8, 0x8b, 0x58, 0x89, 0x69, 0xdf,
	0xb8, 0xd4, 0x4b, 0x97, 0xfb, 0x13, 0x31, 0xda, 0x70, 0xc2, 0x5b, 0x9b, 0x4f, 0x38, 0xdb, 0x08,
	0xfd, 0x92, 0xe4, 0x3b, 0x5f, 0xe0, 0x1f, 0x92, 0xe9, 0xaf, 0x3e, 0x1d, 0x94, 0x7f, 0xed, 0x93,
	0x92, 0xdb, 0x98, 0xbe, 0xd3, 0x80, 0x3a, 0xe5, 0xfb, 0xf8, 0x2c, 0x15, 0x1e, 0x98, 0x36, 0x5e,
	0xdb, 0x2f, 0x8d, 0x5d, 0x68, 0x90, 0xf1, 0xb3, 0xf4, 0xbc, 0xbe, 0x0c, 0xbc, 0x60, 0xb2, 0xd0,
	0xaf, 0xea, 0x30, 0xf9, 0x79, 0x3d, 0x4a, 0x5e, 0x55, 0x4d, 0x52, 0xce, 0x8d, 0x64, 0x0e, 0xc9,
	0xe3, 0xa5, 0xd0, 0x6d, 0x30, 0xf3, 0x95, 0xbd, 0xf0, 0x1d, 0x56, 0x85, 0x1d, 0x57, 0x8e, 0x46,
	0xc2, 0xc7, 0x74, 0xc5, 0xce, 0x07, 0x68, 0xae, 0x1d, 0xd2, 0x2e, 0x14, 0x87, 0xe6, 0x73, 0xce,
	0xe8, 0x84, 0x07, 0x72, 0x2a, 0x52, 0x09, 0x1b, 0xf6, 0x49, 0x62, 0x19, 0x8f, 0x3a, 0xef, 0xa1,
	0x19, 0xae, 0xc9, 0x9b, 0x0e, 0xe3, 0x4f, 0xfb, 0xf1, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x43, 0x31,
	0x57, 0x12, 0x79, 0x07, 0x00, 0x00,
}
