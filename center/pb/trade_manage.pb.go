// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trade_manage.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 获取交易战区数据
type TradeServerListRequest struct {
}

func (m *TradeServerListRequest) Reset()                    { *m = TradeServerListRequest{} }
func (m *TradeServerListRequest) String() string            { return proto.CompactTextString(m) }
func (*TradeServerListRequest) ProtoMessage()               {}
func (*TradeServerListRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

type TradeServerInfo struct {
	Platform int32 `protobuf:"varint,1,opt,name=platform" json:"platform,omitempty"`
	ServerId int32 `protobuf:"varint,2,opt,name=serverId" json:"serverId,omitempty"`
	RegionId int32 `protobuf:"varint,3,opt,name=regionId" json:"regionId,omitempty"`
}

func (m *TradeServerInfo) Reset()                    { *m = TradeServerInfo{} }
func (m *TradeServerInfo) String() string            { return proto.CompactTextString(m) }
func (*TradeServerInfo) ProtoMessage()               {}
func (*TradeServerInfo) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *TradeServerInfo) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *TradeServerInfo) GetServerId() int32 {
	if m != nil {
		return m.ServerId
	}
	return 0
}

func (m *TradeServerInfo) GetRegionId() int32 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

type TradeServerListResponse struct {
	TradeServerInfoList []*TradeServerInfo `protobuf:"bytes,1,rep,name=tradeServerInfoList" json:"tradeServerInfoList,omitempty"`
}

func (m *TradeServerListResponse) Reset()                    { *m = TradeServerListResponse{} }
func (m *TradeServerListResponse) String() string            { return proto.CompactTextString(m) }
func (*TradeServerListResponse) ProtoMessage()               {}
func (*TradeServerListResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *TradeServerListResponse) GetTradeServerInfoList() []*TradeServerInfo {
	if m != nil {
		return m.TradeServerInfoList
	}
	return nil
}

func init() {
	proto.RegisterType((*TradeServerListRequest)(nil), "pb.TradeServerListRequest")
	proto.RegisterType((*TradeServerInfo)(nil), "pb.TradeServerInfo")
	proto.RegisterType((*TradeServerListResponse)(nil), "pb.TradeServerListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TradeServerManage service

type TradeServerManageClient interface {
	// 获取服务器列表
	GetTradeServerList(ctx context.Context, in *TradeServerListRequest, opts ...grpc.CallOption) (*TradeServerListResponse, error)
}

type tradeServerManageClient struct {
	cc *grpc.ClientConn
}

func NewTradeServerManageClient(cc *grpc.ClientConn) TradeServerManageClient {
	return &tradeServerManageClient{cc}
}

func (c *tradeServerManageClient) GetTradeServerList(ctx context.Context, in *TradeServerListRequest, opts ...grpc.CallOption) (*TradeServerListResponse, error) {
	out := new(TradeServerListResponse)
	err := grpc.Invoke(ctx, "/pb.TradeServerManage/GetTradeServerList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TradeServerManage service

type TradeServerManageServer interface {
	// 获取服务器列表
	GetTradeServerList(context.Context, *TradeServerListRequest) (*TradeServerListResponse, error)
}

func RegisterTradeServerManageServer(s *grpc.Server, srv TradeServerManageServer) {
	s.RegisterService(&_TradeServerManage_serviceDesc, srv)
}

func _TradeServerManage_GetTradeServerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeServerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeServerManageServer).GetTradeServerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradeServerManage/GetTradeServerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeServerManageServer).GetTradeServerList(ctx, req.(*TradeServerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TradeServerManage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TradeServerManage",
	HandlerType: (*TradeServerManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTradeServerList",
			Handler:    _TradeServerManage_GetTradeServerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trade_manage.proto",
}

func init() { proto.RegisterFile("trade_manage.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x6b, 0x84, 0x30,
	0x10, 0x85, 0xab, 0xd2, 0x52, 0xa6, 0x87, 0xd2, 0x08, 0x6d, 0xb0, 0x17, 0xc9, 0xc9, 0x93, 0x07,
	0xfb, 0x1b, 0x4a, 0x11, 0x5a, 0x0a, 0xb6, 0xf7, 0x36, 0x92, 0x51, 0x84, 0x35, 0xc9, 0x26, 0xd9,
	0xfd, 0xfd, 0x4b, 0x0c, 0x2e, 0xae, 0xeb, 0xf1, 0xf1, 0x3d, 0x66, 0x3e, 0x1e, 0x10, 0x67, 0xb8,
	0xc0, 0xbf, 0x91, 0x4b, 0xde, 0x63, 0xa9, 0x8d, 0x72, 0x8a, 0xc4, 0xba, 0x65, 0x14, 0x9e, 0x7f,
	0x3d, 0xf9, 0x41, 0x73, 0x44, 0xf3, 0x39, 0x58, 0xd7, 0xe0, 0xfe, 0x80, 0xd6, 0x31, 0x84, 0xc7,
	0x05, 0xa9, 0x65, 0xa7, 0x48, 0x06, 0xf7, 0x7a, 0xc7, 0x5d, 0xa7, 0xcc, 0x48, 0xa3, 0x3c, 0x2a,
	0x6e, 0x9b, 0x73, 0xf6, 0xcc, 0x86, 0xa6, 0xa0, 0x71, 0x60, 0x73, 0xf6, 0xcc, 0x60, 0x3f, 0x28,
	0x59, 0x0b, 0x9a, 0x04, 0x36, 0x67, 0xf6, 0x0f, 0x2f, 0x57, 0x02, 0x56, 0x2b, 0x69, 0x91, 0xbc,
	0x43, 0xea, 0x2e, 0x0d, 0x3c, 0xa6, 0x51, 0x9e, 0x14, 0x0f, 0x55, 0x5a, 0xea, 0xb6, 0x5c, 0x09,
	0x36, 0x5b, 0xfd, 0x4a, 0xc0, 0xd3, 0xa2, 0xf7, 0x35, 0x2d, 0x40, 0xbe, 0x81, 0x7c, 0xa0, 0x5b,
	0x7d, 0x26, 0xd9, 0xea, 0xe8, 0x62, 0x8f, 0xec, 0x75, 0x93, 0x05, 0x55, 0x76, 0xd3, 0xde, 0x4d,
	0x9b, 0xbe, 0x9d, 0x02, 0x00, 0x00, 0xff, 0xff, 0xed, 0x8d, 0xbb, 0xb1, 0x69, 0x01, 0x00, 0x00,
}
