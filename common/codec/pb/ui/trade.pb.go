// Code generated by protoc-gen-go. DO NOT EDIT.
// source: trade.proto

package ui

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GlobalTradeInfo struct {
	TradeId          *int64            `protobuf:"varint,1,req,name=tradeId" json:"tradeId,omitempty"`
	ServerId         *int32            `protobuf:"varint,2,req,name=serverId" json:"serverId,omitempty"`
	PlayerId         *int64            `protobuf:"varint,3,req,name=playerId" json:"playerId,omitempty"`
	PlayerName       *string           `protobuf:"bytes,4,req,name=playerName" json:"playerName,omitempty"`
	ItemId           *int32            `protobuf:"varint,5,req,name=itemId" json:"itemId,omitempty"`
	ItemNum          *int32            `protobuf:"varint,6,req,name=itemNum" json:"itemNum,omitempty"`
	PropertyData     *ItemPropertyData `protobuf:"bytes,7,opt,name=propertyData" json:"propertyData,omitempty"`
	Gold             *int32            `protobuf:"varint,8,req,name=gold" json:"gold,omitempty"`
	CreateTime       *int64            `protobuf:"varint,9,req,name=createTime" json:"createTime,omitempty"`
	Level            *int32            `protobuf:"varint,10,req,name=level" json:"level,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *GlobalTradeInfo) Reset()                    { *m = GlobalTradeInfo{} }
func (m *GlobalTradeInfo) String() string            { return proto.CompactTextString(m) }
func (*GlobalTradeInfo) ProtoMessage()               {}
func (*GlobalTradeInfo) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{0} }

func (m *GlobalTradeInfo) GetTradeId() int64 {
	if m != nil && m.TradeId != nil {
		return *m.TradeId
	}
	return 0
}

func (m *GlobalTradeInfo) GetServerId() int32 {
	if m != nil && m.ServerId != nil {
		return *m.ServerId
	}
	return 0
}

func (m *GlobalTradeInfo) GetPlayerId() int64 {
	if m != nil && m.PlayerId != nil {
		return *m.PlayerId
	}
	return 0
}

func (m *GlobalTradeInfo) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

func (m *GlobalTradeInfo) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *GlobalTradeInfo) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *GlobalTradeInfo) GetPropertyData() *ItemPropertyData {
	if m != nil {
		return m.PropertyData
	}
	return nil
}

func (m *GlobalTradeInfo) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *GlobalTradeInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *GlobalTradeInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

type CSTradeInfoList struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSTradeInfoList) Reset()                    { *m = CSTradeInfoList{} }
func (m *CSTradeInfoList) String() string            { return proto.CompactTextString(m) }
func (*CSTradeInfoList) ProtoMessage()               {}
func (*CSTradeInfoList) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{1} }

type SCTradeInfoList struct {
	TradeInfoList    []*GlobalTradeInfo `protobuf:"bytes,1,rep,name=tradeInfoList" json:"tradeInfoList,omitempty"`
	TotalPage        *int32             `protobuf:"varint,2,req,name=totalPage" json:"totalPage,omitempty"`
	CurrentPage      *int32             `protobuf:"varint,3,req,name=currentPage" json:"currentPage,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *SCTradeInfoList) Reset()                    { *m = SCTradeInfoList{} }
func (m *SCTradeInfoList) String() string            { return proto.CompactTextString(m) }
func (*SCTradeInfoList) ProtoMessage()               {}
func (*SCTradeInfoList) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{2} }

func (m *SCTradeInfoList) GetTradeInfoList() []*GlobalTradeInfo {
	if m != nil {
		return m.TradeInfoList
	}
	return nil
}

func (m *SCTradeInfoList) GetTotalPage() int32 {
	if m != nil && m.TotalPage != nil {
		return *m.TotalPage
	}
	return 0
}

func (m *SCTradeInfoList) GetCurrentPage() int32 {
	if m != nil && m.CurrentPage != nil {
		return *m.CurrentPage
	}
	return 0
}

type CSTradeUploadItem struct {
	BagType          *int32 `protobuf:"varint,1,req,name=bagType" json:"bagType,omitempty"`
	Index            *int32 `protobuf:"varint,2,req,name=index" json:"index,omitempty"`
	Num              *int32 `protobuf:"varint,3,req,name=num" json:"num,omitempty"`
	Gold             *int32 `protobuf:"varint,4,req,name=gold" json:"gold,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSTradeUploadItem) Reset()                    { *m = CSTradeUploadItem{} }
func (m *CSTradeUploadItem) String() string            { return proto.CompactTextString(m) }
func (*CSTradeUploadItem) ProtoMessage()               {}
func (*CSTradeUploadItem) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{3} }

func (m *CSTradeUploadItem) GetBagType() int32 {
	if m != nil && m.BagType != nil {
		return *m.BagType
	}
	return 0
}

func (m *CSTradeUploadItem) GetIndex() int32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *CSTradeUploadItem) GetNum() int32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

func (m *CSTradeUploadItem) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

type SCTradeUploadItem struct {
	TradeInfo        *TradeInfo `protobuf:"bytes,1,req,name=tradeInfo" json:"tradeInfo,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *SCTradeUploadItem) Reset()                    { *m = SCTradeUploadItem{} }
func (m *SCTradeUploadItem) String() string            { return proto.CompactTextString(m) }
func (*SCTradeUploadItem) ProtoMessage()               {}
func (*SCTradeUploadItem) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{4} }

func (m *SCTradeUploadItem) GetTradeInfo() *TradeInfo {
	if m != nil {
		return m.TradeInfo
	}
	return nil
}

type CSTradeWithDrawItem struct {
	TradeId          *int64 `protobuf:"varint,1,req,name=tradeId" json:"tradeId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSTradeWithDrawItem) Reset()                    { *m = CSTradeWithDrawItem{} }
func (m *CSTradeWithDrawItem) String() string            { return proto.CompactTextString(m) }
func (*CSTradeWithDrawItem) ProtoMessage()               {}
func (*CSTradeWithDrawItem) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{5} }

func (m *CSTradeWithDrawItem) GetTradeId() int64 {
	if m != nil && m.TradeId != nil {
		return *m.TradeId
	}
	return 0
}

type SCTradeWithDrawItem struct {
	TradeId          *int64 `protobuf:"varint,1,req,name=tradeId" json:"tradeId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCTradeWithDrawItem) Reset()                    { *m = SCTradeWithDrawItem{} }
func (m *SCTradeWithDrawItem) String() string            { return proto.CompactTextString(m) }
func (*SCTradeWithDrawItem) ProtoMessage()               {}
func (*SCTradeWithDrawItem) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{6} }

func (m *SCTradeWithDrawItem) GetTradeId() int64 {
	if m != nil && m.TradeId != nil {
		return *m.TradeId
	}
	return 0
}

type CSTradeItem struct {
	TradeId          *int64 `protobuf:"varint,1,req,name=tradeId" json:"tradeId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSTradeItem) Reset()                    { *m = CSTradeItem{} }
func (m *CSTradeItem) String() string            { return proto.CompactTextString(m) }
func (*CSTradeItem) ProtoMessage()               {}
func (*CSTradeItem) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{7} }

func (m *CSTradeItem) GetTradeId() int64 {
	if m != nil && m.TradeId != nil {
		return *m.TradeId
	}
	return 0
}

type SCTradeItem struct {
	TradeId          *int64 `protobuf:"varint,1,req,name=tradeId" json:"tradeId,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *SCTradeItem) Reset()                    { *m = SCTradeItem{} }
func (m *SCTradeItem) String() string            { return proto.CompactTextString(m) }
func (*SCTradeItem) ProtoMessage()               {}
func (*SCTradeItem) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{8} }

func (m *SCTradeItem) GetTradeId() int64 {
	if m != nil && m.TradeId != nil {
		return *m.TradeId
	}
	return 0
}

type TradeInfo struct {
	TradeId          *int64            `protobuf:"varint,1,req,name=tradeId" json:"tradeId,omitempty"`
	ItemId           *int32            `protobuf:"varint,2,req,name=itemId" json:"itemId,omitempty"`
	ItemNum          *int32            `protobuf:"varint,3,req,name=itemNum" json:"itemNum,omitempty"`
	PropertyData     *ItemPropertyData `protobuf:"bytes,4,opt,name=propertyData" json:"propertyData,omitempty"`
	Gold             *int32            `protobuf:"varint,5,req,name=gold" json:"gold,omitempty"`
	CreateTime       *int64            `protobuf:"varint,6,req,name=createTime" json:"createTime,omitempty"`
	Level            *int32            `protobuf:"varint,7,req,name=level" json:"level,omitempty"`
	Status           *int32            `protobuf:"varint,8,req,name=status" json:"status,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TradeInfo) Reset()                    { *m = TradeInfo{} }
func (m *TradeInfo) String() string            { return proto.CompactTextString(m) }
func (*TradeInfo) ProtoMessage()               {}
func (*TradeInfo) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{9} }

func (m *TradeInfo) GetTradeId() int64 {
	if m != nil && m.TradeId != nil {
		return *m.TradeId
	}
	return 0
}

func (m *TradeInfo) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TradeInfo) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *TradeInfo) GetPropertyData() *ItemPropertyData {
	if m != nil {
		return m.PropertyData
	}
	return nil
}

func (m *TradeInfo) GetGold() int32 {
	if m != nil && m.Gold != nil {
		return *m.Gold
	}
	return 0
}

func (m *TradeInfo) GetCreateTime() int64 {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return 0
}

func (m *TradeInfo) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *TradeInfo) GetStatus() int32 {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return 0
}

type CSSelfTradeInfoList struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSSelfTradeInfoList) Reset()                    { *m = CSSelfTradeInfoList{} }
func (m *CSSelfTradeInfoList) String() string            { return proto.CompactTextString(m) }
func (*CSSelfTradeInfoList) ProtoMessage()               {}
func (*CSSelfTradeInfoList) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{10} }

type SCSelfTradeInfoList struct {
	TradeInfoList    []*TradeInfo `protobuf:"bytes,1,rep,name=tradeInfoList" json:"tradeInfoList,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *SCSelfTradeInfoList) Reset()                    { *m = SCSelfTradeInfoList{} }
func (m *SCSelfTradeInfoList) String() string            { return proto.CompactTextString(m) }
func (*SCSelfTradeInfoList) ProtoMessage()               {}
func (*SCSelfTradeInfoList) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{11} }

func (m *SCSelfTradeInfoList) GetTradeInfoList() []*TradeInfo {
	if m != nil {
		return m.TradeInfoList
	}
	return nil
}

type TradeSellLog struct {
	ItemId           *int32            `protobuf:"varint,1,req,name=itemId" json:"itemId,omitempty"`
	ItemNum          *int32            `protobuf:"varint,2,req,name=itemNum" json:"itemNum,omitempty"`
	PropertyData     *ItemPropertyData `protobuf:"bytes,3,opt,name=propertyData" json:"propertyData,omitempty"`
	TradeTime        *int64            `protobuf:"varint,4,req,name=tradeTime" json:"tradeTime,omitempty"`
	BuyServerId      *int32            `protobuf:"varint,5,req,name=buyServerId" json:"buyServerId,omitempty"`
	BuyPlayerId      *int64            `protobuf:"varint,6,req,name=buyPlayerId" json:"buyPlayerId,omitempty"`
	BuyPlayerName    *string           `protobuf:"bytes,7,req,name=buyPlayerName" json:"buyPlayerName,omitempty"`
	BuyGold          *int32            `protobuf:"varint,8,req,name=buyGold" json:"buyGold,omitempty"`
	GetGold          *int32            `protobuf:"varint,9,req,name=getGold" json:"getGold,omitempty"`
	Fee              *int32            `protobuf:"varint,10,req,name=fee" json:"fee,omitempty"`
	Level            *int32            `protobuf:"varint,11,req,name=level" json:"level,omitempty"`
	FeeRate          *int32            `protobuf:"varint,12,req,name=feeRate" json:"feeRate,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TradeSellLog) Reset()                    { *m = TradeSellLog{} }
func (m *TradeSellLog) String() string            { return proto.CompactTextString(m) }
func (*TradeSellLog) ProtoMessage()               {}
func (*TradeSellLog) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{12} }

func (m *TradeSellLog) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TradeSellLog) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *TradeSellLog) GetPropertyData() *ItemPropertyData {
	if m != nil {
		return m.PropertyData
	}
	return nil
}

func (m *TradeSellLog) GetTradeTime() int64 {
	if m != nil && m.TradeTime != nil {
		return *m.TradeTime
	}
	return 0
}

func (m *TradeSellLog) GetBuyServerId() int32 {
	if m != nil && m.BuyServerId != nil {
		return *m.BuyServerId
	}
	return 0
}

func (m *TradeSellLog) GetBuyPlayerId() int64 {
	if m != nil && m.BuyPlayerId != nil {
		return *m.BuyPlayerId
	}
	return 0
}

func (m *TradeSellLog) GetBuyPlayerName() string {
	if m != nil && m.BuyPlayerName != nil {
		return *m.BuyPlayerName
	}
	return ""
}

func (m *TradeSellLog) GetBuyGold() int32 {
	if m != nil && m.BuyGold != nil {
		return *m.BuyGold
	}
	return 0
}

func (m *TradeSellLog) GetGetGold() int32 {
	if m != nil && m.GetGold != nil {
		return *m.GetGold
	}
	return 0
}

func (m *TradeSellLog) GetFee() int32 {
	if m != nil && m.Fee != nil {
		return *m.Fee
	}
	return 0
}

func (m *TradeSellLog) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *TradeSellLog) GetFeeRate() int32 {
	if m != nil && m.FeeRate != nil {
		return *m.FeeRate
	}
	return 0
}

type TradeBuyLog struct {
	ItemId           *int32            `protobuf:"varint,1,req,name=itemId" json:"itemId,omitempty"`
	ItemNum          *int32            `protobuf:"varint,2,req,name=itemNum" json:"itemNum,omitempty"`
	PropertyData     *ItemPropertyData `protobuf:"bytes,3,opt,name=propertyData" json:"propertyData,omitempty"`
	TradeTime        *int64            `protobuf:"varint,4,req,name=tradeTime" json:"tradeTime,omitempty"`
	SellServerId     *int32            `protobuf:"varint,5,req,name=sellServerId" json:"sellServerId,omitempty"`
	SellPlayerId     *int64            `protobuf:"varint,6,req,name=sellPlayerId" json:"sellPlayerId,omitempty"`
	SellPlayerName   *string           `protobuf:"bytes,7,req,name=sellPlayerName" json:"sellPlayerName,omitempty"`
	BuyGold          *int32            `protobuf:"varint,8,req,name=buyGold" json:"buyGold,omitempty"`
	Level            *int32            `protobuf:"varint,9,req,name=level" json:"level,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *TradeBuyLog) Reset()                    { *m = TradeBuyLog{} }
func (m *TradeBuyLog) String() string            { return proto.CompactTextString(m) }
func (*TradeBuyLog) ProtoMessage()               {}
func (*TradeBuyLog) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{13} }

func (m *TradeBuyLog) GetItemId() int32 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *TradeBuyLog) GetItemNum() int32 {
	if m != nil && m.ItemNum != nil {
		return *m.ItemNum
	}
	return 0
}

func (m *TradeBuyLog) GetPropertyData() *ItemPropertyData {
	if m != nil {
		return m.PropertyData
	}
	return nil
}

func (m *TradeBuyLog) GetTradeTime() int64 {
	if m != nil && m.TradeTime != nil {
		return *m.TradeTime
	}
	return 0
}

func (m *TradeBuyLog) GetSellServerId() int32 {
	if m != nil && m.SellServerId != nil {
		return *m.SellServerId
	}
	return 0
}

func (m *TradeBuyLog) GetSellPlayerId() int64 {
	if m != nil && m.SellPlayerId != nil {
		return *m.SellPlayerId
	}
	return 0
}

func (m *TradeBuyLog) GetSellPlayerName() string {
	if m != nil && m.SellPlayerName != nil {
		return *m.SellPlayerName
	}
	return ""
}

func (m *TradeBuyLog) GetBuyGold() int32 {
	if m != nil && m.BuyGold != nil {
		return *m.BuyGold
	}
	return 0
}

func (m *TradeBuyLog) GetLevel() int32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

type TradeLog struct {
	LogType          *int32        `protobuf:"varint,1,req,name=logType" json:"logType,omitempty"`
	SellLog          *TradeSellLog `protobuf:"bytes,2,opt,name=sellLog" json:"sellLog,omitempty"`
	BuyLog           *TradeBuyLog  `protobuf:"bytes,3,opt,name=buyLog" json:"buyLog,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *TradeLog) Reset()                    { *m = TradeLog{} }
func (m *TradeLog) String() string            { return proto.CompactTextString(m) }
func (*TradeLog) ProtoMessage()               {}
func (*TradeLog) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{14} }

func (m *TradeLog) GetLogType() int32 {
	if m != nil && m.LogType != nil {
		return *m.LogType
	}
	return 0
}

func (m *TradeLog) GetSellLog() *TradeSellLog {
	if m != nil {
		return m.SellLog
	}
	return nil
}

func (m *TradeLog) GetBuyLog() *TradeBuyLog {
	if m != nil {
		return m.BuyLog
	}
	return nil
}

type CSTradeLogList struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CSTradeLogList) Reset()                    { *m = CSTradeLogList{} }
func (m *CSTradeLogList) String() string            { return proto.CompactTextString(m) }
func (*CSTradeLogList) ProtoMessage()               {}
func (*CSTradeLogList) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{15} }

type SCTradeLogList struct {
	TradeInfoList    []*TradeLog `protobuf:"bytes,1,rep,name=tradeInfoList" json:"tradeInfoList,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *SCTradeLogList) Reset()                    { *m = SCTradeLogList{} }
func (m *SCTradeLogList) String() string            { return proto.CompactTextString(m) }
func (*SCTradeLogList) ProtoMessage()               {}
func (*SCTradeLogList) Descriptor() ([]byte, []int) { return fileDescriptor118, []int{16} }

func (m *SCTradeLogList) GetTradeInfoList() []*TradeLog {
	if m != nil {
		return m.TradeInfoList
	}
	return nil
}

func init() {
	proto.RegisterType((*GlobalTradeInfo)(nil), "ui.GlobalTradeInfo")
	proto.RegisterType((*CSTradeInfoList)(nil), "ui.CSTradeInfoList")
	proto.RegisterType((*SCTradeInfoList)(nil), "ui.SCTradeInfoList")
	proto.RegisterType((*CSTradeUploadItem)(nil), "ui.CSTradeUploadItem")
	proto.RegisterType((*SCTradeUploadItem)(nil), "ui.SCTradeUploadItem")
	proto.RegisterType((*CSTradeWithDrawItem)(nil), "ui.CSTradeWithDrawItem")
	proto.RegisterType((*SCTradeWithDrawItem)(nil), "ui.SCTradeWithDrawItem")
	proto.RegisterType((*CSTradeItem)(nil), "ui.CSTradeItem")
	proto.RegisterType((*SCTradeItem)(nil), "ui.SCTradeItem")
	proto.RegisterType((*TradeInfo)(nil), "ui.TradeInfo")
	proto.RegisterType((*CSSelfTradeInfoList)(nil), "ui.CSSelfTradeInfoList")
	proto.RegisterType((*SCSelfTradeInfoList)(nil), "ui.SCSelfTradeInfoList")
	proto.RegisterType((*TradeSellLog)(nil), "ui.TradeSellLog")
	proto.RegisterType((*TradeBuyLog)(nil), "ui.TradeBuyLog")
	proto.RegisterType((*TradeLog)(nil), "ui.TradeLog")
	proto.RegisterType((*CSTradeLogList)(nil), "ui.CSTradeLogList")
	proto.RegisterType((*SCTradeLogList)(nil), "ui.SCTradeLogList")
}

func init() { proto.RegisterFile("trade.proto", fileDescriptor118) }

var fileDescriptor118 = []byte{
	// 626 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0x94, 0xed, 0x24, 0x6e, 0x9e, 0x93, 0xb8, 0x71, 0x5a, 0xb4, 0xe2, 0x00, 0xc1, 0x20, 0x14,
	0xf5, 0xd0, 0x43, 0xa5, 0x9e, 0xb8, 0xd1, 0x4a, 0x55, 0xa4, 0xa8, 0xaa, 0x48, 0x11, 0x47, 0xb4,
	0xa9, 0x5f, 0x8c, 0xa5, 0x4d, 0x36, 0x72, 0xd6, 0x01, 0xff, 0x25, 0xfe, 0x0d, 0x37, 0x7e, 0x0d,
	0x42, 0xfb, 0xbc, 0x76, 0x3e, 0x30, 0x11, 0x27, 0x8e, 0x9e, 0x7d, 0xfb, 0x3c, 0x33, 0x3b, 0x03,
	0x9e, 0x4a, 0x79, 0x84, 0x97, 0xab, 0x54, 0x2a, 0x19, 0xd8, 0x59, 0xf2, 0xdc, 0x4f, 0x96, 0x1b,
	0x5c, 0x2a, 0x99, 0xe6, 0x05, 0x18, 0xfe, 0xb4, 0xc0, 0xbf, 0x13, 0x72, 0xc6, 0xc5, 0xa3, 0x1e,
	0x1d, 0x2f, 0xe7, 0x32, 0xf0, 0xc1, 0xa5, 0x7b, 0xe3, 0x88, 0x59, 0x43, 0x7b, 0xe4, 0x04, 0xa7,
	0x70, 0xb2, 0xc6, 0x74, 0x83, 0xe9, 0x38, 0x62, 0xf6, 0xd0, 0x1e, 0x35, 0x35, 0xb2, 0x12, 0x3c,
	0x27, 0xc4, 0xa1, 0x99, 0x00, 0xa0, 0x40, 0xee, 0xf9, 0x02, 0x59, 0x63, 0x68, 0x8f, 0xda, 0x41,
	0x0f, 0x5a, 0x89, 0xc2, 0xc5, 0x38, 0x62, 0x4d, 0xba, 0xe5, 0x83, 0xab, 0xbf, 0xef, 0xb3, 0x05,
	0x6b, 0x11, 0x70, 0x01, 0x9d, 0x55, 0x2a, 0x57, 0x98, 0xaa, 0xfc, 0x96, 0x2b, 0xce, 0xdc, 0xa1,
	0x35, 0xf2, 0xae, 0xce, 0x2e, 0xb3, 0xe4, 0x72, 0xac, 0x70, 0xf1, 0xb0, 0x73, 0x16, 0x74, 0xa0,
	0x11, 0x4b, 0x11, 0xb1, 0x13, 0xba, 0x19, 0x00, 0x3c, 0xa5, 0xc8, 0x15, 0x3e, 0x26, 0x0b, 0x64,
	0x6d, 0xa2, 0xd0, 0x85, 0xa6, 0xc0, 0x0d, 0x0a, 0x06, 0x7a, 0x24, 0xec, 0x83, 0x7f, 0x33, 0xad,
	0x54, 0x4d, 0x92, 0xb5, 0x0a, 0x11, 0xfc, 0xe9, 0xcd, 0x1e, 0x14, 0x5c, 0x40, 0x57, 0xed, 0x02,
	0xcc, 0x1a, 0x3a, 0x23, 0xef, 0x6a, 0xa0, 0x39, 0x1c, 0x1a, 0xd3, 0x87, 0xb6, 0x92, 0x8a, 0x8b,
	0x07, 0x1e, 0xa3, 0x31, 0x62, 0x00, 0xde, 0x53, 0x96, 0xa6, 0xb8, 0x54, 0x04, 0x3a, 0xf4, 0xe7,
	0x7b, 0xe8, 0x9b, 0x3f, 0x7f, 0x5c, 0x09, 0xc9, 0x23, 0xad, 0x45, 0x8b, 0x9f, 0xf1, 0xf8, 0x31,
	0x5f, 0x21, 0xb9, 0xda, 0xd4, 0x74, 0x93, 0x65, 0x84, 0xdf, 0xcc, 0x26, 0x0f, 0x9c, 0x65, 0xb6,
	0x28, 0x36, 0x54, 0x62, 0x1b, 0xb4, 0xef, 0x1a, 0xfa, 0x86, 0xf6, 0xce, 0xbe, 0x21, 0xb4, 0x2b,
	0xe2, 0xb4, 0xd1, 0xbb, 0xea, 0x6a, 0xd2, 0x15, 0xdd, 0xf0, 0x2d, 0x0c, 0x0c, 0x8d, 0x4f, 0x89,
	0xfa, 0x72, 0x9b, 0xf2, 0xaf, 0x25, 0x91, 0xbd, 0xe7, 0xd5, 0x73, 0x66, 0xfd, 0xf1, 0xb9, 0x17,
	0xe0, 0x95, 0x86, 0xfe, 0xed, 0xbc, 0x74, 0xb7, 0xf6, 0xfc, 0xbb, 0x05, 0xed, 0x23, 0x29, 0xdb,
	0xa6, 0xc5, 0x3e, 0x4c, 0x8b, 0x53, 0x9b, 0x96, 0xc6, 0x3f, 0xa4, 0xa5, 0x59, 0x93, 0x96, 0xd6,
	0x7e, 0x5a, 0x5c, 0x1a, 0xe9, 0x41, 0x6b, 0xad, 0xb8, 0xca, 0xd6, 0x45, 0xc0, 0xc2, 0x73, 0x6d,
	0xde, 0x14, 0xc5, 0x7c, 0x3f, 0x41, 0xef, 0xb4, 0x57, 0x7f, 0xc0, 0xc1, 0x9b, 0xfa, 0x14, 0x1d,
	0x3c, 0xc8, 0x2f, 0x0b, 0x3a, 0xf4, 0x35, 0x45, 0x21, 0x26, 0x32, 0xde, 0x91, 0x6c, 0x1d, 0x4a,
	0xb6, 0x6b, 0x25, 0x3b, 0x47, 0x24, 0xf7, 0x4d, 0x20, 0x48, 0x63, 0x83, 0x34, 0x0e, 0xc0, 0x9b,
	0x65, 0xf9, 0xb4, 0xec, 0x6e, 0xb3, 0x8c, 0xec, 0x2c, 0xcb, 0x1f, 0xca, 0xfa, 0x16, 0x6e, 0x9c,
	0x43, 0xb7, 0x02, 0xa9, 0xc1, 0x2e, 0x35, 0x58, 0x87, 0x36, 0xcb, 0xef, 0xb6, 0xbd, 0xf3, 0xc1,
	0x8d, 0x51, 0x11, 0xd0, 0x2e, 0x63, 0x3b, 0x47, 0x2c, 0x2a, 0xb7, 0xf5, 0xd4, 0x2b, 0x87, 0xe7,
	0x88, 0x1f, 0xb8, 0x42, 0xd6, 0x21, 0x53, 0x7f, 0x58, 0xe0, 0x91, 0x01, 0xef, 0xb3, 0xfc, 0x7f,
	0xe8, 0x3f, 0x83, 0xce, 0x1a, 0x85, 0x38, 0x30, 0xc0, 0xa0, 0x07, 0x0e, 0x3c, 0x83, 0xde, 0x16,
	0x3d, 0x66, 0x41, 0x25, 0x92, 0x0c, 0x08, 0x3f, 0xc3, 0x09, 0x49, 0xd2, 0x7a, 0x7c, 0x70, 0x85,
	0xdc, 0xed, 0xf8, 0x2b, 0x70, 0xd7, 0xc5, 0x5b, 0x33, 0x9b, 0xa8, 0x9f, 0x56, 0x89, 0x28, 0x33,
	0xf0, 0x12, 0x5a, 0x33, 0x72, 0xc3, 0x88, 0xf3, 0xab, 0x89, 0xc2, 0xa4, 0xf0, 0x14, 0x7a, 0xa6,
	0x76, 0x13, 0x19, 0x53, 0x08, 0xaf, 0xa1, 0x67, 0x8a, 0x66, 0x90, 0xe0, 0x75, 0x7d, 0xfe, 0x3a,
	0xd5, 0xae, 0x89, 0x8c, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x94, 0x85, 0x08, 0x6d, 0x0e, 0x06,
	0x00, 0x00,
}
